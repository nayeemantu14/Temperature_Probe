
Temperature_Probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed90  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd0  0800eed0  0800eed0  0000fed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fca0  0800fca0  00010ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fca8  0800fca8  00010ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800fcac  0800fcac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  20000008  0800fcb0  00011008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000200  0800fea8  00011200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000238  0800fedd  00011238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc0  2000024c  0800feee  0001124c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f0c  0800feee  00011f0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00013000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00013000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800feee  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0003569f  00000000  00000000  00012a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007584  00000000  00000000  00048136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002ec0  00000000  00000000  0004f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000023b1  00000000  00000000  00052580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b115  00000000  00000000  00054931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00037767  00000000  00000000  0007fa46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e50d0  00000000  00000000  000b71ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0019c27d  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d410  00000000  00000000  0019c2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005e  00000000  00000000  001a96d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000024c 	.word	0x2000024c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800eeb8 	.word	0x0800eeb8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000250 	.word	0x20000250
 800017c:	0800eeb8 	.word	0x0800eeb8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c40:	4013      	ands	r3, r2
 8000c42:	64cb      	str	r3, [r1, #76]	@ 0x4c
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c5c:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000c60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c70:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4013      	ands	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);

#else
  GPIO_InitTypeDef gpio_config = {0};
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]

  gpio_config.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_ANALOG;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	60bb      	str	r3, [r7, #8]

  gpio_config.Pin = GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13;
 8000ca4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000ca8:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff ffa4 	bl	8000bf8 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &gpio_config);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb8:	f004 fc3a 	bl	8005530 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f7ff ffb4 	bl	8000c2a <LL_AHB2_GRP1_DisableClock>

  gpio_config.Pin = GPIO_PIN_4 | GPIO_PIN_3;
 8000cc2:	2318      	movs	r3, #24
 8000cc4:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f7ff ff96 	bl	8000bf8 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &gpio_config);
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4809      	ldr	r0, [pc, #36]	@ (8000cf8 <APPD_Init+0x70>)
 8000cd2:	f004 fc2d 	bl	8005530 <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f7ff ffa7 	bl	8000c2a <LL_AHB2_GRP1_DisableClock>

  HAL_DBGMCU_DisableDBGSleepMode();
 8000cdc:	f002 ff9c 	bl	8003c18 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000ce0:	f002 ffa0 	bl	8003c24 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000ce4:	f002 ffa4 	bl	8003c30 <HAL_DBGMCU_DisableDBGStandbyMode>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000ce8:	f000 f844 	bl	8000d74 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000cec:	f000 f902 	bl	8000ef4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000cf0:	bf00      	nop
}
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	48000400 	.word	0x48000400

08000cfc <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000cfc:	b5b0      	push	{r4, r5, r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <APPD_EnableCPU2+0x5c>)
 8000d04:	881a      	ldrh	r2, [r3, #0]
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <APPD_EnableCPU2+0x60>)
 8000d08:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 8000d0a:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <APPD_EnableCPU2+0x64>)
 8000d0c:	881a      	ldrh	r2, [r3, #0]
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <APPD_EnableCPU2+0x60>)
 8000d10:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8000d12:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <APPD_EnableCPU2+0x68>)
 8000d14:	881a      	ldrh	r2, [r3, #0]
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <APPD_EnableCPU2+0x60>)
 8000d18:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <APPD_EnableCPU2+0x6c>)
 8000d1c:	881a      	ldrh	r2, [r3, #0]
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <APPD_EnableCPU2+0x60>)
 8000d20:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8000d22:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <APPD_EnableCPU2+0x70>)
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <APPD_EnableCPU2+0x60>)
 8000d28:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <APPD_EnableCPU2+0x74>)
 8000d2c:	1d3c      	adds	r4, r7, #4
 8000d2e:	461d      	mov	r5, r3
 8000d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d38:	c403      	stmia	r4!, {r0, r1}
 8000d3a:	8022      	strh	r2, [r4, #0]
 8000d3c:	3402      	adds	r4, #2
 8000d3e:	0c13      	lsrs	r3, r2, #16
 8000d40:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000d42:	f009 fc7f 	bl	800a644 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f008 ff10 	bl	8009b6e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000d4e:	bf00      	nop
}
 8000d50:	3720      	adds	r7, #32
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bdb0      	pop	{r4, r5, r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	200301e8 	.word	0x200301e8
 8000d60:	2000000a 	.word	0x2000000a
 8000d64:	2000000c 	.word	0x2000000c
 8000d68:	2000000e 	.word	0x2000000e
 8000d6c:	20000010 	.word	0x20000010
 8000d70:	0800eed0 	.word	0x0800eed0

08000d74 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = STBY_DebugGpioaPinList;
 8000d88:	4b54      	ldr	r3, [pc, #336]	@ (8000edc <APPD_SetCPU2GpioConfig+0x168>)
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = STBY_DebugGpiobPinList;
 8000d8e:	4b54      	ldr	r3, [pc, #336]	@ (8000ee0 <APPD_SetCPU2GpioConfig+0x16c>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = STBY_DebugGpiocPinList;
 8000d94:	4b53      	ldr	r3, [pc, #332]	@ (8000ee4 <APPD_SetCPU2GpioConfig+0x170>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	833b      	strh	r3, [r7, #24]

  if(gpioa_pin_list == UINT16_MAX)
 8000d9a:	8bbb      	ldrh	r3, [r7, #28]
 8000d9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d14b      	bne.n	8000e3c <APPD_SetCPU2GpioConfig+0xc8>
  {
    gpioa_pin_list = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	83bb      	strh	r3, [r7, #28]
    gpiob_pin_list = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	837b      	strh	r3, [r7, #26]
    gpioc_pin_list = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	833b      	strh	r3, [r7, #24]

    for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	77fb      	strb	r3, [r7, #31]
 8000db4:	e036      	b.n	8000e24 <APPD_SetCPU2GpioConfig+0xb0>
    {
      if( aGpioConfigList[local_loop].enable != 0)
 8000db6:	7ffb      	ldrb	r3, [r7, #31]
 8000db8:	4a4b      	ldr	r2, [pc, #300]	@ (8000ee8 <APPD_SetCPU2GpioConfig+0x174>)
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	799b      	ldrb	r3, [r3, #6]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d02c      	beq.n	8000e1e <APPD_SetCPU2GpioConfig+0xaa>
      {
        switch((uint32_t)aGpioConfigList[local_loop].port)
 8000dc4:	7ffb      	ldrb	r3, [r7, #31]
 8000dc6:	4a48      	ldr	r2, [pc, #288]	@ (8000ee8 <APPD_SetCPU2GpioConfig+0x174>)
 8000dc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000dcc:	4a47      	ldr	r2, [pc, #284]	@ (8000eec <APPD_SetCPU2GpioConfig+0x178>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d01b      	beq.n	8000e0a <APPD_SetCPU2GpioConfig+0x96>
 8000dd2:	4a46      	ldr	r2, [pc, #280]	@ (8000eec <APPD_SetCPU2GpioConfig+0x178>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d821      	bhi.n	8000e1c <APPD_SetCPU2GpioConfig+0xa8>
 8000dd8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ddc:	d003      	beq.n	8000de6 <APPD_SetCPU2GpioConfig+0x72>
 8000dde:	4a44      	ldr	r2, [pc, #272]	@ (8000ef0 <APPD_SetCPU2GpioConfig+0x17c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d009      	beq.n	8000df8 <APPD_SetCPU2GpioConfig+0x84>
            break;
          case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
            break;
          default:
            break;
 8000de4:	e01a      	b.n	8000e1c <APPD_SetCPU2GpioConfig+0xa8>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000de6:	7ffb      	ldrb	r3, [r7, #31]
 8000de8:	4a3f      	ldr	r2, [pc, #252]	@ (8000ee8 <APPD_SetCPU2GpioConfig+0x174>)
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	4413      	add	r3, r2
 8000dee:	889a      	ldrh	r2, [r3, #4]
 8000df0:	8bbb      	ldrh	r3, [r7, #28]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	83bb      	strh	r3, [r7, #28]
            break;
 8000df6:	e012      	b.n	8000e1e <APPD_SetCPU2GpioConfig+0xaa>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000df8:	7ffb      	ldrb	r3, [r7, #31]
 8000dfa:	4a3b      	ldr	r2, [pc, #236]	@ (8000ee8 <APPD_SetCPU2GpioConfig+0x174>)
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	4413      	add	r3, r2
 8000e00:	889a      	ldrh	r2, [r3, #4]
 8000e02:	8b7b      	ldrh	r3, [r7, #26]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	837b      	strh	r3, [r7, #26]
            break;
 8000e08:	e009      	b.n	8000e1e <APPD_SetCPU2GpioConfig+0xaa>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000e0a:	7ffb      	ldrb	r3, [r7, #31]
 8000e0c:	4a36      	ldr	r2, [pc, #216]	@ (8000ee8 <APPD_SetCPU2GpioConfig+0x174>)
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	4413      	add	r3, r2
 8000e12:	889a      	ldrh	r2, [r3, #4]
 8000e14:	8b3b      	ldrh	r3, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	833b      	strh	r3, [r7, #24]
            break;
 8000e1a:	e000      	b.n	8000e1e <APPD_SetCPU2GpioConfig+0xaa>
            break;
 8000e1c:	bf00      	nop
    for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000e1e:	7ffb      	ldrb	r3, [r7, #31]
 8000e20:	3301      	adds	r3, #1
 8000e22:	77fb      	strb	r3, [r7, #31]
 8000e24:	7ffb      	ldrb	r3, [r7, #31]
 8000e26:	2b25      	cmp	r3, #37	@ 0x25
 8000e28:	d9c5      	bls.n	8000db6 <APPD_SetCPU2GpioConfig+0x42>
        }
      }
    }

    STBY_DebugGpioaPinList = gpioa_pin_list;
 8000e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8000edc <APPD_SetCPU2GpioConfig+0x168>)
 8000e2c:	8bbb      	ldrh	r3, [r7, #28]
 8000e2e:	8013      	strh	r3, [r2, #0]
    STBY_DebugGpiobPinList = gpiob_pin_list;
 8000e30:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee0 <APPD_SetCPU2GpioConfig+0x16c>)
 8000e32:	8b7b      	ldrh	r3, [r7, #26]
 8000e34:	8013      	strh	r3, [r2, #0]
    STBY_DebugGpiocPinList = gpioc_pin_list;
 8000e36:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee4 <APPD_SetCPU2GpioConfig+0x170>)
 8000e38:	8b3b      	ldrh	r3, [r7, #24]
 8000e3a:	8013      	strh	r3, [r2, #0]
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000e48:	8bbb      	ldrh	r3, [r7, #28]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d014      	beq.n	8000e78 <APPD_SetCPU2GpioConfig+0x104>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000e4e:	8bbb      	ldrh	r3, [r7, #28]
 8000e50:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff fed0 	bl	8000bf8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff fef9 	bl	8000c50 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e66:	f004 fb63 	bl	8005530 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000e6a:	8bbb      	ldrh	r3, [r7, #28]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e74:	f004 fcc4 	bl	8005800 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000e78:	8b7b      	ldrh	r3, [r7, #26]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d012      	beq.n	8000ea4 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000e7e:	8b7b      	ldrh	r3, [r7, #26]
 8000e80:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2002      	movs	r0, #2
 8000e84:	f7ff feb8 	bl	8000bf8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f7ff fee1 	bl	8000c50 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4817      	ldr	r0, [pc, #92]	@ (8000ef0 <APPD_SetCPU2GpioConfig+0x17c>)
 8000e94:	f004 fb4c 	bl	8005530 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000e98:	8b7b      	ldrh	r3, [r7, #26]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4814      	ldr	r0, [pc, #80]	@ (8000ef0 <APPD_SetCPU2GpioConfig+0x17c>)
 8000ea0:	f004 fcae 	bl	8005800 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000ea4:	8b3b      	ldrh	r3, [r7, #24]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d013      	beq.n	8000ed2 <APPD_SetCPU2GpioConfig+0x15e>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000eaa:	8b3b      	ldrh	r3, [r7, #24]
 8000eac:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	2004      	movs	r0, #4
 8000eb0:	f7ff fea2 	bl	8000bf8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000eb4:	2004      	movs	r0, #4
 8000eb6:	f7ff fecb 	bl	8000c50 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480b      	ldr	r0, [pc, #44]	@ (8000eec <APPD_SetCPU2GpioConfig+0x178>)
 8000ec0:	f004 fb36 	bl	8005530 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000ec4:	8b3b      	ldrh	r3, [r7, #24]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4808      	ldr	r0, [pc, #32]	@ (8000eec <APPD_SetCPU2GpioConfig+0x178>)
 8000ecc:	f004 fc98 	bl	8005800 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
}
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	2000000a 	.word	0x2000000a
 8000ee4:	2000000c 	.word	0x2000000c
 8000ee8:	0800efb4 	.word	0x0800efb4
 8000eec:	48000800 	.word	0x48000800
 8000ef0:	48000400 	.word	0x48000400

08000ef4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#else
  STBY_DtbGpioaPinList = 0;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <APPD_BleDtbCfg+0x1c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	801a      	strh	r2, [r3, #0]
  STBY_DtbGpiobPinList = 0;
 8000efe:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <APPD_BleDtbCfg+0x20>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	801a      	strh	r2, [r3, #0]
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000f04:	bf00      	nop
}
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000000e 	.word	0x2000000e
 8000f14:	20000010 	.word	0x20000010

08000f18 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f20:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f26:	f023 0207 	bic.w	r2, r3, #7
 8000f2a:	4905      	ldr	r1, [pc, #20]	@ (8000f40 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	58000400 	.word	0x58000400

08000f44 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f4e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000f52:	4905      	ldr	r1, [pc, #20]	@ (8000f68 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	58000800 	.word	0x58000800

08000f6c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000f74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f78:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000f7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f86:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f92:	4313      	orrs	r3, r2
 8000f94:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	cafecafe 	.word	0xcafecafe

08000fa8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000fba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	608b      	str	r3, [r1, #8]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ffe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001006:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800101c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001020:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001024:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001028:	d101      	bne.n	800102e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800103e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800104e:	d101      	bne.n	8001054 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_AHB3_GRP1_EnableClock>:
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800106c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800106e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4313      	orrs	r3, r2
 8001076:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800107c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4013      	ands	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001084:	68fb      	ldr	r3, [r7, #12]
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <LL_DBGMCU_GetDeviceID+0x18>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e0042000 	.word	0xe0042000

080010b0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <LL_DBGMCU_GetRevisionID+0x18>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	0c1b      	lsrs	r3, r3, #16
 80010ba:	b29b      	uxth	r3, r3
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e0042000 	.word	0xe0042000

080010cc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	041b      	lsls	r3, r3, #16
 80010de:	431a      	orrs	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	605a      	str	r2, [r3, #4]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	605a      	str	r2, [r3, #4]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	695a      	ldr	r2, [r3, #20]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	041b      	lsls	r3, r3, #16
 8001124:	431a      	orrs	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	615a      	str	r2, [r3, #20]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695a      	ldr	r2, [r3, #20]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	615a      	str	r2, [r3, #20]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	609a      	str	r2, [r3, #8]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	619a      	str	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <LL_LPM_EnableSleep+0x1c>)
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <LL_LPM_EnableSleep+0x1c>)
 800119a:	f023 0304 	bic.w	r3, r3, #4
 800119e:	6113      	str	r3, [r2, #16]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	22ff      	movs	r2, #255	@ 0xff
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	22ca      	movs	r2, #202	@ 0xca
 80011d6:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2253      	movs	r2, #83	@ 0x53
 80011dc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f023 0207 	bic.w	r2, r3, #7
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	609a      	str	r2, [r3, #8]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <MX_APPE_Config+0x18>)
 8001216:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800121a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800121c:	f000 f82a 	bl	8001274 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001220:	f000 f86a 	bl	80012f8 <Config_HSE>

  return;
 8001224:	bf00      	nop
}
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58004000 	.word	0x58004000

0800122c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001230:	f000 f876 	bl	8001320 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001234:	f000 f88e 	bl	8001354 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001238:	4906      	ldr	r1, [pc, #24]	@ (8001254 <MX_APPE_Init+0x28>)
 800123a:	2000      	movs	r0, #0
 800123c:	f000 fddc 	bl	8001df8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001240:	f7ff fd22 	bl	8000c88 <APPD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8001244:	2101      	movs	r1, #1
 8001246:	2002      	movs	r0, #2
 8001248:	f00a fd12 	bl	800bc70 <UTIL_LPM_SetOffMode>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800124c:	f000 f892 	bl	8001374 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001250:	bf00      	nop
}
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000464 	.word	0x20000464

08001258 <Init_Smps>:

void Init_Smps(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800125c:	bf00      	nop
}
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <Init_Exti>:

void Init_Exti(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800126a:	2050      	movs	r0, #80	@ 0x50
 800126c:	f7ff fe6a 	bl	8000f44 <LL_EXTI_EnableIT_32_63>

  return;
 8001270:	bf00      	nop
}
 8001272:	bd80      	pop	{r7, pc}

08001274 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001278:	f000 f804 	bl	8001284 <Reset_BackupDomain>

  Reset_IPCC();
 800127c:	f000 f81a 	bl	80012b4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001280:	bf00      	nop
}
 8001282:	bd80      	pop	{r7, pc}

08001284 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001288:	f7ff fec4 	bl	8001014 <LL_RCC_IsActiveFlag_PINRST>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00d      	beq.n	80012ae <Reset_BackupDomain+0x2a>
 8001292:	f7ff fed2 	bl	800103a <LL_RCC_IsActiveFlag_SFTRST>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d108      	bne.n	80012ae <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800129c:	f005 f828 	bl	80062f0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80012a0:	f005 f826 	bl	80062f0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80012a4:	f7ff fe94 	bl	8000fd0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80012a8:	f7ff fea3 	bl	8000ff2 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
}
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80012b8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80012bc:	f7ff fed0 	bl	8001060 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80012c0:	213f      	movs	r1, #63	@ 0x3f
 80012c2:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <Reset_IPCC+0x40>)
 80012c4:	f7ff ff48 	bl	8001158 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80012c8:	213f      	movs	r1, #63	@ 0x3f
 80012ca:	480a      	ldr	r0, [pc, #40]	@ (80012f4 <Reset_IPCC+0x40>)
 80012cc:	f7ff ff52 	bl	8001174 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80012d0:	213f      	movs	r1, #63	@ 0x3f
 80012d2:	4808      	ldr	r0, [pc, #32]	@ (80012f4 <Reset_IPCC+0x40>)
 80012d4:	f7ff fefa 	bl	80010cc <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80012d8:	213f      	movs	r1, #63	@ 0x3f
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <Reset_IPCC+0x40>)
 80012dc:	f7ff ff19 	bl	8001112 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80012e0:	213f      	movs	r1, #63	@ 0x3f
 80012e2:	4804      	ldr	r0, [pc, #16]	@ (80012f4 <Reset_IPCC+0x40>)
 80012e4:	f7ff ff04 	bl	80010f0 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80012e8:	213f      	movs	r1, #63	@ 0x3f
 80012ea:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <Reset_IPCC+0x40>)
 80012ec:	f7ff ff23 	bl	8001136 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80012f0:	bf00      	nop
}
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	58000c00 	.word	0x58000c00

080012f8 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80012fe:	2000      	movs	r0, #0
 8001300:	f009 fa2c 	bl	800a75c <OTP_Read>
 8001304:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	799b      	ldrb	r3, [r3, #6]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fe2b 	bl	8000f6c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001316:	bf00      	nop
 8001318:	bf00      	nop
}
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <System_Init>:

static void System_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  Init_Smps();
 8001324:	f7ff ff98 	bl	8001258 <Init_Smps>

  Init_Exti();
 8001328:	f7ff ff9d 	bl	8001266 <Init_Exti>

  Init_Rtc();
 800132c:	f000 f802 	bl	8001334 <Init_Rtc>

  return;
 8001330:	bf00      	nop
}
 8001332:	bd80      	pop	{r7, pc}

08001334 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001338:	4805      	ldr	r0, [pc, #20]	@ (8001350 <Init_Rtc+0x1c>)
 800133a:	f7ff ff46 	bl	80011ca <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800133e:	2100      	movs	r1, #0
 8001340:	4803      	ldr	r0, [pc, #12]	@ (8001350 <Init_Rtc+0x1c>)
 8001342:	f7ff ff52 	bl	80011ea <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001346:	4802      	ldr	r0, [pc, #8]	@ (8001350 <Init_Rtc+0x1c>)
 8001348:	f7ff ff32 	bl	80011b0 <LL_RTC_EnableWriteProtection>

  return;
 800134c:	bf00      	nop
}
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40002800 	.word	0x40002800

08001354 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001358:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800135c:	f7ff fe24 	bl	8000fa8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001360:	f00a fc74 	bl	800bc4c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001364:	2004      	movs	r0, #4
 8001366:	f7ff fdd7 	bl	8000f18 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 800136a:	f004 ffe1 	bl	8006330 <HAL_PWREx_EnableSRAMRetention>

  return;
 800136e:	bf00      	nop
}
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800137a:	f008 ffad 	bl	800a2d8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800137e:	4a11      	ldr	r2, [pc, #68]	@ (80013c4 <appe_Tl_Init+0x50>)
 8001380:	2100      	movs	r1, #0
 8001382:	2004      	movs	r0, #4
 8001384:	f00a fdd6 	bl	800bf34 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001388:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <appe_Tl_Init+0x54>)
 800138a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <appe_Tl_Init+0x58>)
 800138e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	480e      	ldr	r0, [pc, #56]	@ (80013d0 <appe_Tl_Init+0x5c>)
 8001396:	f008 fe61 	bl	800a05c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <appe_Tl_Init+0x60>)
 800139c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <appe_Tl_Init+0x64>)
 80013a0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <appe_Tl_Init+0x68>)
 80013a4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80013a6:	f240 533c 	movw	r3, #1340	@ 0x53c
 80013aa:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4618      	mov	r0, r3
 80013b2:	f009 f8d3 	bl	800a55c <TL_MM_Init>

  TL_Enable();
 80013b6:	f008 ff89 	bl	800a2cc <TL_Enable>

  return;
 80013ba:	bf00      	nop
}
 80013bc:	3720      	adds	r7, #32
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	0800a095 	.word	0x0800a095
 80013c8:	20030734 	.word	0x20030734
 80013cc:	080013e1 	.word	0x080013e1
 80013d0:	080013f9 	.word	0x080013f9
 80013d4:	2003094c 	.word	0x2003094c
 80013d8:	20030840 	.word	0x20030840
 80013dc:	200301f8 	.word	0x200301f8

080013e0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80013ea:	bf00      	nop
}
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	330b      	adds	r3, #11
 8001406:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	b29b      	uxth	r3, r3
 800140e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001412:	2b07      	cmp	r3, #7
 8001414:	d81f      	bhi.n	8001456 <APPE_SysUserEvtRx+0x5e>
 8001416:	a201      	add	r2, pc, #4	@ (adr r2, 800141c <APPE_SysUserEvtRx+0x24>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	0800143d 	.word	0x0800143d
 8001420:	0800144f 	.word	0x0800144f
 8001424:	08001457 	.word	0x08001457
 8001428:	08001457 	.word	0x08001457
 800142c:	08001457 	.word	0x08001457
 8001430:	08001457 	.word	0x08001457
 8001434:	08001457 	.word	0x08001457
 8001438:	08001457 	.word	0x08001457
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4618      	mov	r0, r3
 8001442:	f008 fbc1 	bl	8009bc8 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f81b 	bl	8001482 <APPE_SysEvtReadyProcessing>
    break;
 800144c:	e004      	b.n	8001458 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f806 	bl	8001460 <APPE_SysEvtError>
    break;
 8001454:	e000      	b.n	8001458 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001456:	bf00      	nop
  }

  return;
 8001458:	bf00      	nop
}
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	330b      	adds	r3, #11
 800146e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3302      	adds	r3, #2
 8001474:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001476:	bf00      	nop
}
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b08a      	sub	sp, #40	@ 0x28
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	330b      	adds	r3, #11
 80014a6:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	3302      	adds	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d11d      	bne.n	80014f2 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80014b6:	f7ff fc21 	bl	8000cfc <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80014ba:	230f      	movs	r3, #15
 80014bc:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80014be:	237f      	movs	r3, #127	@ 0x7f
 80014c0:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80014c2:	f7ff fdf5 	bl	80010b0 <LL_DBGMCU_GetRevisionID>
 80014c6:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80014ce:	f7ff fde1 	bl	8001094 <LL_DBGMCU_GetDeviceID>
 80014d2:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	4618      	mov	r0, r3
 80014e0:	f008 fb5c 	bl	8009b9c <SHCI_C2_Config>

    APP_BLE_Init();
 80014e4:	f009 fa44 	bl	800a970 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80014e8:	2100      	movs	r1, #0
 80014ea:	2001      	movs	r0, #1
 80014ec:	f00a fbc0 	bl	800bc70 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80014f0:	e007      	b.n	8001502 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d103      	bne.n	8001502 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
  return;
 8001500:	bf00      	nop
 8001502:	bf00      	nop
}
 8001504:	3728      	adds	r7, #40	@ 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001512:	f002 fb3d 	bl	8003b90 <HAL_GetTick>
 8001516:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001522:	d00a      	beq.n	800153a <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001524:	f002 fb4c 	bl	8003bc0 <HAL_GetTickFreq>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001532:	e002      	b.n	800153a <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001534:	f7ff fe2c 	bl	8001190 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001538:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800153a:	f002 fb29 	bl	8003b90 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	429a      	cmp	r2, r3
 8001548:	d8f4      	bhi.n	8001534 <HAL_Delay+0x2a>
  }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f00a fbee 	bl	800bd3c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8001568:	f00a fbb2 	bl	800bcd0 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800156c:	bf00      	nop
}
 800156e:	bd80      	pop	{r7, pc}

08001570 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800157a:	f04f 30ff 	mov.w	r0, #4294967295
 800157e:	f00a fbdd 	bl	800bd3c <UTIL_SEQ_Run>
  return;
 8001582:	bf00      	nop
}
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001592:	2100      	movs	r1, #0
 8001594:	2004      	movs	r0, #4
 8001596:	f00a fcef 	bl	800bf78 <UTIL_SEQ_SetTask>
  return;
 800159a:	bf00      	nop
}
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80015aa:	2002      	movs	r0, #2
 80015ac:	f00a fd76 	bl	800c09c <UTIL_SEQ_SetEvt>
  return;
 80015b0:	bf00      	nop
}
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80015c0:	2002      	movs	r0, #2
 80015c2:	f00a fd8b 	bl	800c0dc <UTIL_SEQ_WaitEvt>
  return;
 80015c6:	bf00      	nop
}
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <LL_EXTI_EnableIT_0_31>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <LL_EXTI_EnableIT_0_31+0x24>)
 80015da:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80015de:	4905      	ldr	r1, [pc, #20]	@ (80015f4 <LL_EXTI_EnableIT_0_31+0x24>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	58000800 	.word	0x58000800

080015f8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4904      	ldr	r1, [pc, #16]	@ (8001618 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]

}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	58000800 	.word	0x58000800

0800161c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001622:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <ReadRtcSsrValue+0x3c>)
 8001624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001626:	b29b      	uxth	r3, r3
 8001628:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <ReadRtcSsrValue+0x3c>)
 800162c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162e:	b29b      	uxth	r3, r3
 8001630:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001632:	e005      	b.n	8001640 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001638:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <ReadRtcSsrValue+0x3c>)
 800163a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163c:	b29b      	uxth	r3, r3
 800163e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d1f5      	bne.n	8001634 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001648:	683b      	ldr	r3, [r7, #0]
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40002800 	.word	0x40002800

0800165c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	460a      	mov	r2, r1
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	4613      	mov	r3, r2
 800166a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800166c:	79ba      	ldrb	r2, [r7, #6]
 800166e:	491d      	ldr	r1, [pc, #116]	@ (80016e4 <LinkTimerAfter+0x88>)
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	440b      	add	r3, r1
 800167a:	3315      	adds	r3, #21
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	2b06      	cmp	r3, #6
 8001684:	d009      	beq.n	800169a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	4916      	ldr	r1, [pc, #88]	@ (80016e4 <LinkTimerAfter+0x88>)
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	3314      	adds	r3, #20
 8001696:	79fa      	ldrb	r2, [r7, #7]
 8001698:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800169a:	79fa      	ldrb	r2, [r7, #7]
 800169c:	4911      	ldr	r1, [pc, #68]	@ (80016e4 <LinkTimerAfter+0x88>)
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	3315      	adds	r3, #21
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	490c      	ldr	r1, [pc, #48]	@ (80016e4 <LinkTimerAfter+0x88>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	3314      	adds	r3, #20
 80016be:	79ba      	ldrb	r2, [r7, #6]
 80016c0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80016c2:	79ba      	ldrb	r2, [r7, #6]
 80016c4:	4907      	ldr	r1, [pc, #28]	@ (80016e4 <LinkTimerAfter+0x88>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	3315      	adds	r3, #21
 80016d2:	79fa      	ldrb	r2, [r7, #7]
 80016d4:	701a      	strb	r2, [r3, #0]

  return;
 80016d6:	bf00      	nop
}
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000268 	.word	0x20000268

080016e8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	460a      	mov	r2, r1
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	4613      	mov	r3, r2
 80016f6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80016f8:	4b29      	ldr	r3, [pc, #164]	@ (80017a0 <LinkTimerBefore+0xb8>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	79ba      	ldrb	r2, [r7, #6]
 8001700:	429a      	cmp	r2, r3
 8001702:	d032      	beq.n	800176a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001704:	79ba      	ldrb	r2, [r7, #6]
 8001706:	4927      	ldr	r1, [pc, #156]	@ (80017a4 <LinkTimerBefore+0xbc>)
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	3314      	adds	r3, #20
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	4922      	ldr	r1, [pc, #136]	@ (80017a4 <LinkTimerBefore+0xbc>)
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	3315      	adds	r3, #21
 8001728:	79fa      	ldrb	r2, [r7, #7]
 800172a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800172c:	79fa      	ldrb	r2, [r7, #7]
 800172e:	491d      	ldr	r1, [pc, #116]	@ (80017a4 <LinkTimerBefore+0xbc>)
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	440b      	add	r3, r1
 800173a:	3315      	adds	r3, #21
 800173c:	79ba      	ldrb	r2, [r7, #6]
 800173e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001740:	79fa      	ldrb	r2, [r7, #7]
 8001742:	4918      	ldr	r1, [pc, #96]	@ (80017a4 <LinkTimerBefore+0xbc>)
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	3314      	adds	r3, #20
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001754:	79ba      	ldrb	r2, [r7, #6]
 8001756:	4913      	ldr	r1, [pc, #76]	@ (80017a4 <LinkTimerBefore+0xbc>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3314      	adds	r3, #20
 8001764:	79fa      	ldrb	r2, [r7, #7]
 8001766:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001768:	e014      	b.n	8001794 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	490d      	ldr	r1, [pc, #52]	@ (80017a4 <LinkTimerBefore+0xbc>)
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3315      	adds	r3, #21
 800177a:	79ba      	ldrb	r2, [r7, #6]
 800177c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800177e:	79ba      	ldrb	r2, [r7, #6]
 8001780:	4908      	ldr	r1, [pc, #32]	@ (80017a4 <LinkTimerBefore+0xbc>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3314      	adds	r3, #20
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	701a      	strb	r2, [r3, #0]
  return;
 8001792:	bf00      	nop
}
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	200002f8 	.word	0x200002f8
 80017a4:	20000268 	.word	0x20000268

080017a8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017b2:	4b4e      	ldr	r3, [pc, #312]	@ (80018ec <linkTimer+0x144>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b06      	cmp	r3, #6
 80017ba:	d118      	bne.n	80017ee <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80017bc:	4b4b      	ldr	r3, [pc, #300]	@ (80018ec <linkTimer+0x144>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b4b      	ldr	r3, [pc, #300]	@ (80018f0 <linkTimer+0x148>)
 80017c4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80017c6:	4a49      	ldr	r2, [pc, #292]	@ (80018ec <linkTimer+0x144>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80017cc:	79fa      	ldrb	r2, [r7, #7]
 80017ce:	4949      	ldr	r1, [pc, #292]	@ (80018f4 <linkTimer+0x14c>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	3315      	adds	r3, #21
 80017dc:	2206      	movs	r2, #6
 80017de:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80017e0:	4b45      	ldr	r3, [pc, #276]	@ (80018f8 <linkTimer+0x150>)
 80017e2:	f04f 32ff 	mov.w	r2, #4294967295
 80017e6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	81fb      	strh	r3, [r7, #14]
 80017ec:	e078      	b.n	80018e0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80017ee:	f000 f909 	bl	8001a04 <ReturnTimeElapsed>
 80017f2:	4603      	mov	r3, r0
 80017f4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	493e      	ldr	r1, [pc, #248]	@ (80018f4 <linkTimer+0x14c>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	3308      	adds	r3, #8
 8001806:	6819      	ldr	r1, [r3, #0]
 8001808:	89fb      	ldrh	r3, [r7, #14]
 800180a:	79fa      	ldrb	r2, [r7, #7]
 800180c:	4419      	add	r1, r3
 800180e:	4839      	ldr	r0, [pc, #228]	@ (80018f4 <linkTimer+0x14c>)
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4403      	add	r3, r0
 800181a:	3308      	adds	r3, #8
 800181c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	4934      	ldr	r1, [pc, #208]	@ (80018f4 <linkTimer+0x14c>)
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	3308      	adds	r3, #8
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001832:	4b2e      	ldr	r3, [pc, #184]	@ (80018ec <linkTimer+0x144>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	4619      	mov	r1, r3
 800183a:	4a2e      	ldr	r2, [pc, #184]	@ (80018f4 <linkTimer+0x14c>)
 800183c:	460b      	mov	r3, r1
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	440b      	add	r3, r1
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4413      	add	r3, r2
 8001846:	3308      	adds	r3, #8
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	429a      	cmp	r2, r3
 800184e:	d337      	bcc.n	80018c0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001850:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <linkTimer+0x144>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001856:	7b7a      	ldrb	r2, [r7, #13]
 8001858:	4926      	ldr	r1, [pc, #152]	@ (80018f4 <linkTimer+0x14c>)
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	3315      	adds	r3, #21
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800186a:	e013      	b.n	8001894 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800186c:	7b7a      	ldrb	r2, [r7, #13]
 800186e:	4921      	ldr	r1, [pc, #132]	@ (80018f4 <linkTimer+0x14c>)
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	3315      	adds	r3, #21
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001880:	7b7a      	ldrb	r2, [r7, #13]
 8001882:	491c      	ldr	r1, [pc, #112]	@ (80018f4 <linkTimer+0x14c>)
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	3315      	adds	r3, #21
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001894:	7b3b      	ldrb	r3, [r7, #12]
 8001896:	2b06      	cmp	r3, #6
 8001898:	d00b      	beq.n	80018b2 <linkTimer+0x10a>
 800189a:	7b3a      	ldrb	r2, [r7, #12]
 800189c:	4915      	ldr	r1, [pc, #84]	@ (80018f4 <linkTimer+0x14c>)
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	440b      	add	r3, r1
 80018a8:	3308      	adds	r3, #8
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d2dc      	bcs.n	800186c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80018b2:	7b7a      	ldrb	r2, [r7, #13]
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fecf 	bl	800165c <LinkTimerAfter>
 80018be:	e00f      	b.n	80018e0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80018c0:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <linkTimer+0x144>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff0c 	bl	80016e8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <linkTimer+0x144>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <linkTimer+0x148>)
 80018d8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80018da:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <linkTimer+0x144>)
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80018e0:	89fb      	ldrh	r3, [r7, #14]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200002f8 	.word	0x200002f8
 80018f0:	200002f9 	.word	0x200002f9
 80018f4:	20000268 	.word	0x20000268
 80018f8:	200002fc 	.word	0x200002fc

080018fc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	460a      	mov	r2, r1
 8001906:	71fb      	strb	r3, [r7, #7]
 8001908:	4613      	mov	r3, r2
 800190a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800190c:	4b39      	ldr	r3, [pc, #228]	@ (80019f4 <UnlinkTimer+0xf8>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	79fa      	ldrb	r2, [r7, #7]
 8001914:	429a      	cmp	r2, r3
 8001916:	d111      	bne.n	800193c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001918:	4b36      	ldr	r3, [pc, #216]	@ (80019f4 <UnlinkTimer+0xf8>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b36      	ldr	r3, [pc, #216]	@ (80019f8 <UnlinkTimer+0xfc>)
 8001920:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001922:	79fa      	ldrb	r2, [r7, #7]
 8001924:	4935      	ldr	r1, [pc, #212]	@ (80019fc <UnlinkTimer+0x100>)
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	3315      	adds	r3, #21
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <UnlinkTimer+0xf8>)
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e03e      	b.n	80019ba <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800193c:	79fa      	ldrb	r2, [r7, #7]
 800193e:	492f      	ldr	r1, [pc, #188]	@ (80019fc <UnlinkTimer+0x100>)
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	3314      	adds	r3, #20
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	492a      	ldr	r1, [pc, #168]	@ (80019fc <UnlinkTimer+0x100>)
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	3315      	adds	r3, #21
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001964:	79f9      	ldrb	r1, [r7, #7]
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	4824      	ldr	r0, [pc, #144]	@ (80019fc <UnlinkTimer+0x100>)
 800196a:	460b      	mov	r3, r1
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	440b      	add	r3, r1
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4403      	add	r3, r0
 8001974:	3315      	adds	r3, #21
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b2d8      	uxtb	r0, r3
 800197a:	4920      	ldr	r1, [pc, #128]	@ (80019fc <UnlinkTimer+0x100>)
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	3315      	adds	r3, #21
 8001988:	4602      	mov	r2, r0
 800198a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800198c:	7bbb      	ldrb	r3, [r7, #14]
 800198e:	2b06      	cmp	r3, #6
 8001990:	d013      	beq.n	80019ba <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001992:	79f9      	ldrb	r1, [r7, #7]
 8001994:	7bba      	ldrb	r2, [r7, #14]
 8001996:	4819      	ldr	r0, [pc, #100]	@ (80019fc <UnlinkTimer+0x100>)
 8001998:	460b      	mov	r3, r1
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	440b      	add	r3, r1
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4403      	add	r3, r0
 80019a2:	3314      	adds	r3, #20
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2d8      	uxtb	r0, r3
 80019a8:	4914      	ldr	r1, [pc, #80]	@ (80019fc <UnlinkTimer+0x100>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	440b      	add	r3, r1
 80019b4:	3314      	adds	r3, #20
 80019b6:	4602      	mov	r2, r0
 80019b8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80019ba:	79fa      	ldrb	r2, [r7, #7]
 80019bc:	490f      	ldr	r1, [pc, #60]	@ (80019fc <UnlinkTimer+0x100>)
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	330c      	adds	r3, #12
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <UnlinkTimer+0xf8>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b06      	cmp	r3, #6
 80019d6:	d107      	bne.n	80019e8 <UnlinkTimer+0xec>
 80019d8:	79bb      	ldrb	r3, [r7, #6]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d104      	bne.n	80019e8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80019de:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <UnlinkTimer+0x104>)
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	601a      	str	r2, [r3, #0]
  }

  return;
 80019e6:	bf00      	nop
 80019e8:	bf00      	nop
}
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	200002f8 	.word	0x200002f8
 80019f8:	200002f9 	.word	0x200002f9
 80019fc:	20000268 	.word	0x20000268
 8001a00:	200002fc 	.word	0x200002fc

08001a04 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <ReturnTimeElapsed+0x70>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a12:	d026      	beq.n	8001a62 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001a14:	f7ff fe02 	bl	800161c <ReadRtcSsrValue>
 8001a18:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001a1a:	4b16      	ldr	r3, [pc, #88]	@ (8001a74 <ReturnTimeElapsed+0x70>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d805      	bhi.n	8001a30 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001a24:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <ReturnTimeElapsed+0x70>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	e00a      	b.n	8001a46 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <ReturnTimeElapsed+0x74>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a74 <ReturnTimeElapsed+0x70>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <ReturnTimeElapsed+0x78>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <ReturnTimeElapsed+0x7c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	40d3      	lsrs	r3, r2
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	e001      	b.n	8001a66 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	b29b      	uxth	r3, r3
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200002fc 	.word	0x200002fc
 8001a78:	20000304 	.word	0x20000304
 8001a7c:	20000302 	.word	0x20000302
 8001a80:	20000301 	.word	0x20000301

08001a84 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d108      	bne.n	8001aa6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001a94:	f7ff fdc2 	bl	800161c <ReadRtcSsrValue>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4a21      	ldr	r2, [pc, #132]	@ (8001b20 <RestartWakeupCounter+0x9c>)
 8001a9c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	f003 fa25 	bl	8004eee <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001aa4:	e039      	b.n	8001b1a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d803      	bhi.n	8001ab4 <RestartWakeupCounter+0x30>
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <RestartWakeupCounter+0xa0>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d002      	beq.n	8001aba <RestartWakeupCounter+0x36>
      Value -= 1;
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001aba:	bf00      	nop
 8001abc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <RestartWakeupCounter+0xa4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f8      	beq.n	8001abc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <RestartWakeupCounter+0xa4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <RestartWakeupCounter+0xa4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001ada:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001adc:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <RestartWakeupCounter+0xa8>)
 8001ade:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ae2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f003 fa10 	bl	8004f0a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001aea:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <RestartWakeupCounter+0xac>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	0c1b      	lsrs	r3, r3, #16
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	88fa      	ldrh	r2, [r7, #6]
 8001af4:	490e      	ldr	r1, [pc, #56]	@ (8001b30 <RestartWakeupCounter+0xac>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001afa:	f7ff fd8f 	bl	800161c <ReadRtcSsrValue>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a07      	ldr	r2, [pc, #28]	@ (8001b20 <RestartWakeupCounter+0x9c>)
 8001b02:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <RestartWakeupCounter+0xa4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <RestartWakeupCounter+0xa4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b12:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001b14:	f3af 8000 	nop.w
  return ;
 8001b18:	bf00      	nop
}
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200002fc 	.word	0x200002fc
 8001b24:	20000301 	.word	0x20000301
 8001b28:	20000464 	.word	0x20000464
 8001b2c:	58000800 	.word	0x58000800
 8001b30:	40002800 	.word	0x40002800

08001b34 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001b3a:	4b45      	ldr	r3, [pc, #276]	@ (8001c50 <RescheduleTimerList+0x11c>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b46:	d107      	bne.n	8001b58 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001b48:	bf00      	nop
 8001b4a:	4b42      	ldr	r3, [pc, #264]	@ (8001c54 <RescheduleTimerList+0x120>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f8      	bne.n	8001b4a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001b58:	4b3e      	ldr	r3, [pc, #248]	@ (8001c54 <RescheduleTimerList+0x120>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c54 <RescheduleTimerList+0x120>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b66:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001b68:	4b3b      	ldr	r3, [pc, #236]	@ (8001c58 <RescheduleTimerList+0x124>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	493a      	ldr	r1, [pc, #232]	@ (8001c5c <RescheduleTimerList+0x128>)
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001b82:	f7ff ff3f 	bl	8001a04 <ReturnTimeElapsed>
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d205      	bcs.n	8001b9e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b96:	4b32      	ldr	r3, [pc, #200]	@ (8001c60 <RescheduleTimerList+0x12c>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
 8001b9c:	e04d      	b.n	8001c3a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	4a30      	ldr	r2, [pc, #192]	@ (8001c64 <RescheduleTimerList+0x130>)
 8001ba2:	8812      	ldrh	r2, [r2, #0]
 8001ba4:	b292      	uxth	r2, r2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d906      	bls.n	8001bbe <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c64 <RescheduleTimerList+0x130>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <RescheduleTimerList+0x12c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e03d      	b.n	8001c3a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001bc8:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <RescheduleTimerList+0x12c>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bce:	e034      	b.n	8001c3a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	4922      	ldr	r1, [pc, #136]	@ (8001c5c <RescheduleTimerList+0x128>)
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	3308      	adds	r3, #8
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d20a      	bcs.n	8001bfe <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	491c      	ldr	r1, [pc, #112]	@ (8001c5c <RescheduleTimerList+0x128>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3308      	adds	r3, #8
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	e013      	b.n	8001c26 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	4916      	ldr	r1, [pc, #88]	@ (8001c5c <RescheduleTimerList+0x128>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3308      	adds	r3, #8
 8001c0e:	6819      	ldr	r1, [r3, #0]
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	1ac9      	subs	r1, r1, r3
 8001c16:	4811      	ldr	r0, [pc, #68]	@ (8001c5c <RescheduleTimerList+0x128>)
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4403      	add	r3, r0
 8001c22:	3308      	adds	r3, #8
 8001c24:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	490c      	ldr	r1, [pc, #48]	@ (8001c5c <RescheduleTimerList+0x128>)
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	3315      	adds	r3, #21
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	2b06      	cmp	r3, #6
 8001c3e:	d1c7      	bne.n	8001bd0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001c40:	89bb      	ldrh	r3, [r7, #12]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff1e 	bl	8001a84 <RestartWakeupCounter>

  return ;
 8001c48:	bf00      	nop
}
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40002800 	.word	0x40002800
 8001c54:	20000464 	.word	0x20000464
 8001c58:	200002f8 	.word	0x200002f8
 8001c5c:	20000268 	.word	0x20000268
 8001c60:	20000300 	.word	0x20000300
 8001c64:	20000306 	.word	0x20000306

08001c68 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	@ 0x28
 8001c6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8001c72:	617b      	str	r3, [r7, #20]
  return(result);
 8001c74:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001c78:	b672      	cpsid	i
}
 8001c7a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c7c:	4b59      	ldr	r3, [pc, #356]	@ (8001de4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	22ca      	movs	r2, #202	@ 0xca
 8001c82:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c84:	4b57      	ldr	r3, [pc, #348]	@ (8001de4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2253      	movs	r2, #83	@ 0x53
 8001c8a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001c8c:	4b55      	ldr	r3, [pc, #340]	@ (8001de4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	4b54      	ldr	r3, [pc, #336]	@ (8001de4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c9a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001c9c:	4b52      	ldr	r3, [pc, #328]	@ (8001de8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001ca4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ca8:	4950      	ldr	r1, [pc, #320]	@ (8001dec <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	440b      	add	r3, r1
 8001cb4:	330c      	adds	r3, #12
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d16e      	bne.n	8001d9c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001cbe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001cc2:	494a      	ldr	r1, [pc, #296]	@ (8001dec <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001cd2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001cd6:	4945      	ldr	r1, [pc, #276]	@ (8001dec <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3310      	adds	r3, #16
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001ce8:	4b41      	ldr	r3, [pc, #260]	@ (8001df0 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d04c      	beq.n	8001d8c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001cf2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001cf6:	493d      	ldr	r1, [pc, #244]	@ (8001dec <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	440b      	add	r3, r1
 8001d02:	330d      	adds	r3, #13
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d124      	bne.n	8001d56 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d10:	2101      	movs	r1, #1
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fdf2 	bl	80018fc <UnlinkTimer>
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f383 8810 	msr	PRIMASK, r3
}
 8001d22:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001d24:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001d28:	4930      	ldr	r1, [pc, #192]	@ (8001dec <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	440b      	add	r3, r1
 8001d34:	3304      	adds	r3, #4
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fa32 	bl	80021a8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d44:	4b27      	ldr	r3, [pc, #156]	@ (8001de4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	22ca      	movs	r2, #202	@ 0xca
 8001d4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d4c:	4b25      	ldr	r3, [pc, #148]	@ (8001de4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2253      	movs	r2, #83	@ 0x53
 8001d52:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d54:	e012      	b.n	8001d7c <HW_TS_RTC_Wakeup_Handler+0x114>
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f383 8810 	msr	PRIMASK, r3
}
 8001d60:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001d62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f99a 	bl	80020a0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	22ca      	movs	r2, #202	@ 0xca
 8001d72:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2253      	movs	r2, #83	@ 0x53
 8001d7a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001d7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	4619      	mov	r1, r3
 8001d84:	69b8      	ldr	r0, [r7, #24]
 8001d86:	f000 fa95 	bl	80022b4 <HW_TS_RTC_Int_AppNot>
 8001d8a:	e022      	b.n	8001dd2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001d8c:	f7ff fed2 	bl	8001b34 <RescheduleTimerList>
 8001d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d92:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f383 8810 	msr	PRIMASK, r3
}
 8001d9a:	e01a      	b.n	8001dd2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001d9c:	bf00      	nop
 8001d9e:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f8      	beq.n	8001d9e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001dac:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001dbc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001dc0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f383 8810 	msr	PRIMASK, r3
}
 8001dd0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001dd2:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	22ff      	movs	r2, #255	@ 0xff
 8001dd8:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001dda:	bf00      	nop
}
 8001ddc:	3728      	adds	r7, #40	@ 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000464 	.word	0x20000464
 8001de8:	200002f8 	.word	0x200002f8
 8001dec:	20000268 	.word	0x20000268
 8001df0:	20000300 	.word	0x20000300
 8001df4:	58000800 	.word	0x58000800

08001df8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e04:	4b5e      	ldr	r3, [pc, #376]	@ (8001f80 <HW_TS_Init+0x188>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	22ca      	movs	r2, #202	@ 0xca
 8001e0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8001f80 <HW_TS_Init+0x188>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2253      	movs	r2, #83	@ 0x53
 8001e12:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001e14:	4b5b      	ldr	r3, [pc, #364]	@ (8001f84 <HW_TS_Init+0x18c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a5a      	ldr	r2, [pc, #360]	@ (8001f84 <HW_TS_Init+0x18c>)
 8001e1a:	f043 0320 	orr.w	r3, r3, #32
 8001e1e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001e20:	4b58      	ldr	r3, [pc, #352]	@ (8001f84 <HW_TS_Init+0x18c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f1c3 0304 	rsb	r3, r3, #4
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b55      	ldr	r3, [pc, #340]	@ (8001f88 <HW_TS_Init+0x190>)
 8001e34:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001e36:	4b53      	ldr	r3, [pc, #332]	@ (8001f84 <HW_TS_Init+0x18c>)
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e3e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001e42:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	fa92 f2a2 	rbit	r2, r2
 8001e4a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	2a00      	cmp	r2, #0
 8001e54:	d101      	bne.n	8001e5a <HW_TS_Init+0x62>
  {
    return 32U;
 8001e56:	2220      	movs	r2, #32
 8001e58:	e003      	b.n	8001e62 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	fab2 f282 	clz	r2, r2
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	40d3      	lsrs	r3, r2
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4b48      	ldr	r3, [pc, #288]	@ (8001f8c <HW_TS_Init+0x194>)
 8001e6c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001e6e:	4b45      	ldr	r3, [pc, #276]	@ (8001f84 <HW_TS_Init+0x18c>)
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	4b44      	ldr	r3, [pc, #272]	@ (8001f90 <HW_TS_Init+0x198>)
 8001e80:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001e82:	4b43      	ldr	r3, [pc, #268]	@ (8001f90 <HW_TS_Init+0x198>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	4a40      	ldr	r2, [pc, #256]	@ (8001f8c <HW_TS_Init+0x194>)
 8001e8a:	7812      	ldrb	r2, [r2, #0]
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e94:	4a3c      	ldr	r2, [pc, #240]	@ (8001f88 <HW_TS_Init+0x190>)
 8001e96:	7812      	ldrb	r2, [r2, #0]
 8001e98:	40d3      	lsrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d904      	bls.n	8001eb0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8001f94 <HW_TS_Init+0x19c>)
 8001ea8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eac:	801a      	strh	r2, [r3, #0]
 8001eae:	e003      	b.n	8001eb8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b37      	ldr	r3, [pc, #220]	@ (8001f94 <HW_TS_Init+0x19c>)
 8001eb6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001eb8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001ebc:	f7ff fb9c 	bl	80015f8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001ec0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001ec4:	f7ff fb84 	bl	80015d0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d13d      	bne.n	8001f4a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001ece:	4b32      	ldr	r3, [pc, #200]	@ (8001f98 <HW_TS_Init+0x1a0>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001ed4:	4b31      	ldr	r3, [pc, #196]	@ (8001f9c <HW_TS_Init+0x1a4>)
 8001ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eda:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	77fb      	strb	r3, [r7, #31]
 8001ee0:	e00c      	b.n	8001efc <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001ee2:	7ffa      	ldrb	r2, [r7, #31]
 8001ee4:	492e      	ldr	r1, [pc, #184]	@ (8001fa0 <HW_TS_Init+0x1a8>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	330c      	adds	r3, #12
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001ef6:	7ffb      	ldrb	r3, [r7, #31]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	77fb      	strb	r3, [r7, #31]
 8001efc:	7ffb      	ldrb	r3, [r7, #31]
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d9ef      	bls.n	8001ee2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001f02:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <HW_TS_Init+0x1ac>)
 8001f04:	2206      	movs	r2, #6
 8001f06:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001f08:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <HW_TS_Init+0x188>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <HW_TS_Init+0x188>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f16:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001f18:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <HW_TS_Init+0x188>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <HW_TS_Init+0x188>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001f28:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <HW_TS_Init+0x1b0>)
 8001f2c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001f30:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001f32:	2003      	movs	r0, #3
 8001f34:	f002 ffe9 	bl	8004f0a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HW_TS_Init+0x188>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HW_TS_Init+0x188>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	e009      	b.n	8001f5e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <HW_TS_Init+0x188>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f002 ffc8 	bl	8004eee <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <HW_TS_Init+0x188>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	22ff      	movs	r2, #255	@ 0xff
 8001f64:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001f66:	2200      	movs	r2, #0
 8001f68:	2103      	movs	r1, #3
 8001f6a:	2003      	movs	r0, #3
 8001f6c:	f002 ff7d 	bl	8004e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f70:	2003      	movs	r0, #3
 8001f72:	f002 ff94 	bl	8004e9e <HAL_NVIC_EnableIRQ>

  return;
 8001f76:	bf00      	nop
}
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000464 	.word	0x20000464
 8001f84:	40002800 	.word	0x40002800
 8001f88:	20000301 	.word	0x20000301
 8001f8c:	20000302 	.word	0x20000302
 8001f90:	20000304 	.word	0x20000304
 8001f94:	20000306 	.word	0x20000306
 8001f98:	20000300 	.word	0x20000300
 8001f9c:	200002fc 	.word	0x200002fc
 8001fa0:	20000268 	.word	0x20000268
 8001fa4:	200002f8 	.word	0x200002f8
 8001fa8:	58000800 	.word	0x58000800

08001fac <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b08b      	sub	sp, #44	@ 0x2c
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fc6:	61fb      	str	r3, [r7, #28]
  return(result);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001fca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
}
 8001fce:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001fd0:	e004      	b.n	8001fdc <HW_TS_Create+0x30>
  {
    loop++;
 8001fd2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001fdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d80c      	bhi.n	8001ffe <HW_TS_Create+0x52>
 8001fe4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001fe8:	492c      	ldr	r1, [pc, #176]	@ (800209c <HW_TS_Create+0xf0>)
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	330c      	adds	r3, #12
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1e9      	bne.n	8001fd2 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ffe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002002:	2b06      	cmp	r3, #6
 8002004:	d038      	beq.n	8002078 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002006:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800200a:	4924      	ldr	r1, [pc, #144]	@ (800209c <HW_TS_Create+0xf0>)
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	440b      	add	r3, r1
 8002016:	330c      	adds	r3, #12
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f383 8810 	msr	PRIMASK, r3
}
 8002026:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002028:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800202c:	491b      	ldr	r1, [pc, #108]	@ (800209c <HW_TS_Create+0xf0>)
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	440b      	add	r3, r1
 8002038:	3310      	adds	r3, #16
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800203e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002042:	4916      	ldr	r1, [pc, #88]	@ (800209c <HW_TS_Create+0xf0>)
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	440b      	add	r3, r1
 800204e:	330d      	adds	r3, #13
 8002050:	79fa      	ldrb	r2, [r7, #7]
 8002052:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002054:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002058:	4910      	ldr	r1, [pc, #64]	@ (800209c <HW_TS_Create+0xf0>)
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800206e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002076:	e008      	b.n	800208a <HW_TS_Create+0xde>
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f383 8810 	msr	PRIMASK, r3
}
 8002082:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 800208a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800208e:	4618      	mov	r0, r3
 8002090:	372c      	adds	r7, #44	@ 0x2c
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000268 	.word	0x20000268

080020a0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020aa:	f3ef 8310 	mrs	r3, PRIMASK
 80020ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80020b0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80020b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80020b4:	b672      	cpsid	i
}
 80020b6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80020b8:	2003      	movs	r0, #3
 80020ba:	f002 fefe 	bl	8004eba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020be:	4b34      	ldr	r3, [pc, #208]	@ (8002190 <HW_TS_Stop+0xf0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	22ca      	movs	r2, #202	@ 0xca
 80020c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80020c6:	4b32      	ldr	r3, [pc, #200]	@ (8002190 <HW_TS_Stop+0xf0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2253      	movs	r2, #83	@ 0x53
 80020cc:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80020ce:	79fa      	ldrb	r2, [r7, #7]
 80020d0:	4930      	ldr	r1, [pc, #192]	@ (8002194 <HW_TS_Stop+0xf4>)
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	330c      	adds	r3, #12
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d142      	bne.n	800216c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fc06 	bl	80018fc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80020f0:	4b29      	ldr	r3, [pc, #164]	@ (8002198 <HW_TS_Stop+0xf8>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	2b06      	cmp	r3, #6
 80020fa:	d12f      	bne.n	800215c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80020fc:	4b27      	ldr	r3, [pc, #156]	@ (800219c <HW_TS_Stop+0xfc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002108:	d107      	bne.n	800211a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800210a:	bf00      	nop
 800210c:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <HW_TS_Stop+0xf0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f8      	bne.n	800210c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800211a:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <HW_TS_Stop+0xf0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HW_TS_Stop+0xf0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002128:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800212a:	bf00      	nop
 800212c:	4b18      	ldr	r3, [pc, #96]	@ (8002190 <HW_TS_Stop+0xf0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f8      	beq.n	800212c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <HW_TS_Stop+0xf0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <HW_TS_Stop+0xf0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800214a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800214c:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <HW_TS_Stop+0x100>)
 800214e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002152:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002154:	2003      	movs	r0, #3
 8002156:	f002 fed8 	bl	8004f0a <HAL_NVIC_ClearPendingIRQ>
 800215a:	e007      	b.n	800216c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800215c:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <HW_TS_Stop+0x104>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	7cfa      	ldrb	r2, [r7, #19]
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002168:	f7ff fce4 	bl	8001b34 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800216c:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <HW_TS_Stop+0xf0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	22ff      	movs	r2, #255	@ 0xff
 8002172:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002174:	2003      	movs	r0, #3
 8002176:	f002 fe92 	bl	8004e9e <HAL_NVIC_EnableIRQ>
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f383 8810 	msr	PRIMASK, r3
}
 8002184:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002186:	bf00      	nop
}
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000464 	.word	0x20000464
 8002194:	20000268 	.word	0x20000268
 8002198:	200002f8 	.word	0x200002f8
 800219c:	40002800 	.word	0x40002800
 80021a0:	58000800 	.word	0x58000800
 80021a4:	200002f9 	.word	0x200002f9

080021a8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80021b4:	79fa      	ldrb	r2, [r7, #7]
 80021b6:	493b      	ldr	r1, [pc, #236]	@ (80022a4 <HW_TS_Start+0xfc>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	330c      	adds	r3, #12
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d103      	bne.n	80021d4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff66 	bl	80020a0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d4:	f3ef 8310 	mrs	r3, PRIMASK
 80021d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80021da:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021de:	b672      	cpsid	i
}
 80021e0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80021e2:	2003      	movs	r0, #3
 80021e4:	f002 fe69 	bl	8004eba <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021e8:	4b2f      	ldr	r3, [pc, #188]	@ (80022a8 <HW_TS_Start+0x100>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	22ca      	movs	r2, #202	@ 0xca
 80021ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80021f0:	4b2d      	ldr	r3, [pc, #180]	@ (80022a8 <HW_TS_Start+0x100>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2253      	movs	r2, #83	@ 0x53
 80021f6:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80021f8:	79fa      	ldrb	r2, [r7, #7]
 80021fa:	492a      	ldr	r1, [pc, #168]	@ (80022a4 <HW_TS_Start+0xfc>)
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	330c      	adds	r3, #12
 8002208:	2202      	movs	r2, #2
 800220a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800220c:	79fa      	ldrb	r2, [r7, #7]
 800220e:	4925      	ldr	r1, [pc, #148]	@ (80022a4 <HW_TS_Start+0xfc>)
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	3308      	adds	r3, #8
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002220:	79fa      	ldrb	r2, [r7, #7]
 8002222:	4920      	ldr	r1, [pc, #128]	@ (80022a4 <HW_TS_Start+0xfc>)
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	3304      	adds	r3, #4
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fab6 	bl	80017a8 <linkTimer>
 800223c:	4603      	mov	r3, r0
 800223e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002240:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <HW_TS_Start+0x104>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002246:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <HW_TS_Start+0x108>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	7c7a      	ldrb	r2, [r7, #17]
 800224e:	429a      	cmp	r2, r3
 8002250:	d002      	beq.n	8002258 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002252:	f7ff fc6f 	bl	8001b34 <RescheduleTimerList>
 8002256:	e013      	b.n	8002280 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002258:	79fa      	ldrb	r2, [r7, #7]
 800225a:	4912      	ldr	r1, [pc, #72]	@ (80022a4 <HW_TS_Start+0xfc>)
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	3308      	adds	r3, #8
 8002268:	6819      	ldr	r1, [r3, #0]
 800226a:	8a7b      	ldrh	r3, [r7, #18]
 800226c:	79fa      	ldrb	r2, [r7, #7]
 800226e:	1ac9      	subs	r1, r1, r3
 8002270:	480c      	ldr	r0, [pc, #48]	@ (80022a4 <HW_TS_Start+0xfc>)
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4403      	add	r3, r0
 800227c:	3308      	adds	r3, #8
 800227e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002280:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HW_TS_Start+0x100>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	22ff      	movs	r2, #255	@ 0xff
 8002286:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002288:	2003      	movs	r0, #3
 800228a:	f002 fe08 	bl	8004e9e <HAL_NVIC_EnableIRQ>
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f383 8810 	msr	PRIMASK, r3
}
 8002298:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800229a:	bf00      	nop
}
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000268 	.word	0x20000268
 80022a8:	20000464 	.word	0x20000464
 80022ac:	200002f8 	.word	0x200002f8
 80022b0:	200002f9 	.word	0x200002f9

080022b4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	460b      	mov	r3, r1
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4798      	blx	r3

  return;
 80022c6:	bf00      	nop
}
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <HAL_UART_TxCpltCallback+0x34>)
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d107      	bne.n	80022f4 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <HAL_UART_TxCpltCallback+0x38>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_UART_TxCpltCallback+0x38>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4798      	blx	r3
            }
            break;
 80022f2:	e001      	b.n	80022f8 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80022f4:	bf00      	nop
 80022f6:	e000      	b.n	80022fa <HAL_UART_TxCpltCallback+0x2a>
            break;
 80022f8:	bf00      	nop
    }

    return;
 80022fa:	bf00      	nop
}
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40013800 	.word	0x40013800
 8002308:	20000308 	.word	0x20000308

0800230c <LL_RCC_LSE_SetDriveCapability>:
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231c:	f023 0218 	bic.w	r2, r3, #24
 8002320:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_AHB1_GRP1_EnableClock>:
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002344:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002346:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4313      	orrs	r3, r2
 800234e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002354:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800235c:	68fb      	ldr	r3, [r7, #12]
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_AHB2_GRP1_EnableClock>:
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002376:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002378:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4313      	orrs	r3, r2
 8002380:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002386:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4013      	ands	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023a0:	f001 fb88 	bl	8003ab4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80023a4:	f7fe ff34 	bl	8001210 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023a8:	f000 f817 	bl	80023da <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80023ac:	f000 f861 	bl	8002472 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80023b0:	f000 f932 	bl	8002618 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023b4:	f000 f9b4 	bl	8002720 <MX_GPIO_Init>
  MX_DMA_Init();
 80023b8:	f000 f990 	bl	80026dc <MX_DMA_Init>
  MX_ADC1_Init();
 80023bc:	f000 f87a 	bl	80024b4 <MX_ADC1_Init>
  MX_RTC_Init();
 80023c0:	f000 f95c 	bl	800267c <MX_RTC_Init>
  MX_RNG_Init();
 80023c4:	f000 f944 	bl	8002650 <MX_RNG_Init>
  MX_I2C1_Init();
 80023c8:	f000 f8e6 	bl	8002598 <MX_I2C1_Init>
  MX_RF_Init();
 80023cc:	f000 f938 	bl	8002640 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80023d0:	f7fe ff2c 	bl	800122c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80023d4:	f7ff f8be 	bl	8001554 <MX_APPE_Process>
 80023d8:	e7fc      	b.n	80023d4 <main+0x38>

080023da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b098      	sub	sp, #96	@ 0x60
 80023de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	2244      	movs	r2, #68	@ 0x44
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f00a fc98 	bl	800cd1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ee:	463b      	mov	r3, r7
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
 80023fc:	615a      	str	r2, [r3, #20]
 80023fe:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002400:	f003 ff76 	bl	80062f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002404:	2000      	movs	r0, #0
 8002406:	f7ff ff81 	bl	800230c <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800240a:	2307      	movs	r3, #7
 800240c:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800240e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002414:	2301      	movs	r3, #1
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800241c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800241e:	2340      	movs	r3, #64	@ 0x40
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002422:	2300      	movs	r3, #0
 8002424:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4618      	mov	r0, r3
 800242c:	f004 fae8 	bl	8006a00 <HAL_RCC_OscConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <SystemClock_Config+0x60>
  {
    Error_Handler();
 8002436:	f000 f980 	bl	800273a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800243a:	236f      	movs	r3, #111	@ 0x6f
 800243c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800243e:	2302      	movs	r3, #2
 8002440:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002456:	463b      	mov	r3, r7
 8002458:	2101      	movs	r1, #1
 800245a:	4618      	mov	r0, r3
 800245c:	f004 fe06 	bl	800706c <HAL_RCC_ClockConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002466:	f000 f968 	bl	800273a <Error_Handler>
  }
}
 800246a:	bf00      	nop
 800246c:	3760      	adds	r7, #96	@ 0x60
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b08c      	sub	sp, #48	@ 0x30
 8002476:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002478:	463b      	mov	r3, r7
 800247a:	2230      	movs	r2, #48	@ 0x30
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f00a fc4d 	bl	800cd1e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002484:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002488:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800248a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002490:	2302      	movs	r3, #2
 8002492:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002498:	463b      	mov	r3, r7
 800249a:	4618      	mov	r0, r3
 800249c:	f005 f97c 	bl	8007798 <HAL_RCCEx_PeriphCLKConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80024a6:	f000 f948 	bl	800273a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80024aa:	bf00      	nop
 80024ac:	3730      	adds	r7, #48	@ 0x30
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80024c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002584 <MX_ADC1_Init+0xd0>)
 80024c6:	4a30      	ldr	r2, [pc, #192]	@ (8002588 <MX_ADC1_Init+0xd4>)
 80024c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80024ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002584 <MX_ADC1_Init+0xd0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002584 <MX_ADC1_Init+0xd0>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002584 <MX_ADC1_Init+0xd0>)
 80024d8:	2200      	movs	r2, #0
 80024da:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80024dc:	4b29      	ldr	r3, [pc, #164]	@ (8002584 <MX_ADC1_Init+0xd0>)
 80024de:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80024e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024e4:	4b27      	ldr	r3, [pc, #156]	@ (8002584 <MX_ADC1_Init+0xd0>)
 80024e6:	2204      	movs	r2, #4
 80024e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80024ea:	4b26      	ldr	r3, [pc, #152]	@ (8002584 <MX_ADC1_Init+0xd0>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80024f0:	4b24      	ldr	r3, [pc, #144]	@ (8002584 <MX_ADC1_Init+0xd0>)
 80024f2:	2207      	movs	r2, #7
 80024f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80024f6:	4b23      	ldr	r3, [pc, #140]	@ (8002584 <MX_ADC1_Init+0xd0>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80024fc:	4b21      	ldr	r3, [pc, #132]	@ (8002584 <MX_ADC1_Init+0xd0>)
 80024fe:	2201      	movs	r2, #1
 8002500:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 8002502:	4b20      	ldr	r3, [pc, #128]	@ (8002584 <MX_ADC1_Init+0xd0>)
 8002504:	2202      	movs	r2, #2
 8002506:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002508:	4b1e      	ldr	r3, [pc, #120]	@ (8002584 <MX_ADC1_Init+0xd0>)
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002510:	4b1c      	ldr	r3, [pc, #112]	@ (8002584 <MX_ADC1_Init+0xd0>)
 8002512:	2200      	movs	r2, #0
 8002514:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002516:	4b1b      	ldr	r3, [pc, #108]	@ (8002584 <MX_ADC1_Init+0xd0>)
 8002518:	2200      	movs	r2, #0
 800251a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800251c:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <MX_ADC1_Init+0xd0>)
 800251e:	2200      	movs	r2, #0
 8002520:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002524:	4b17      	ldr	r3, [pc, #92]	@ (8002584 <MX_ADC1_Init+0xd0>)
 8002526:	2200      	movs	r2, #0
 8002528:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800252a:	4816      	ldr	r0, [pc, #88]	@ (8002584 <MX_ADC1_Init+0xd0>)
 800252c:	f001 fcfe 	bl	8003f2c <HAL_ADC_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002536:	f000 f900 	bl	800273a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800253a:	4b14      	ldr	r3, [pc, #80]	@ (800258c <MX_ADC1_Init+0xd8>)
 800253c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	4619      	mov	r1, r3
 800254a:	480e      	ldr	r0, [pc, #56]	@ (8002584 <MX_ADC1_Init+0xd0>)
 800254c:	f002 f84c 	bl	80045e8 <HAL_ADC_ConfigChannel>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002556:	f000 f8f0 	bl	800273a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800255a:	4b0d      	ldr	r3, [pc, #52]	@ (8002590 <MX_ADC1_Init+0xdc>)
 800255c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800255e:	2304      	movs	r3, #4
 8002560:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
 8002562:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <MX_ADC1_Init+0xe0>)
 8002564:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	4619      	mov	r1, r3
 800256a:	4806      	ldr	r0, [pc, #24]	@ (8002584 <MX_ADC1_Init+0xd0>)
 800256c:	f002 f83c 	bl	80045e8 <HAL_ADC_ConfigChannel>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002576:	f000 f8e0 	bl	800273a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	2000030c 	.word	0x2000030c
 8002588:	40012400 	.word	0x40012400
 800258c:	14000020 	.word	0x14000020
 8002590:	24000200 	.word	0x24000200
 8002594:	07ffff04 	.word	0x07ffff04

08002598 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800259c:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <MX_I2C1_Init+0x74>)
 800259e:	4a1c      	ldr	r2, [pc, #112]	@ (8002610 <MX_I2C1_Init+0x78>)
 80025a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80025a2:	4b1a      	ldr	r3, [pc, #104]	@ (800260c <MX_I2C1_Init+0x74>)
 80025a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002614 <MX_I2C1_Init+0x7c>)
 80025a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025a8:	4b18      	ldr	r3, [pc, #96]	@ (800260c <MX_I2C1_Init+0x74>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025ae:	4b17      	ldr	r3, [pc, #92]	@ (800260c <MX_I2C1_Init+0x74>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b4:	4b15      	ldr	r3, [pc, #84]	@ (800260c <MX_I2C1_Init+0x74>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80025ba:	4b14      	ldr	r3, [pc, #80]	@ (800260c <MX_I2C1_Init+0x74>)
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025c0:	4b12      	ldr	r3, [pc, #72]	@ (800260c <MX_I2C1_Init+0x74>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025c6:	4b11      	ldr	r3, [pc, #68]	@ (800260c <MX_I2C1_Init+0x74>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025cc:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <MX_I2C1_Init+0x74>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025d2:	480e      	ldr	r0, [pc, #56]	@ (800260c <MX_I2C1_Init+0x74>)
 80025d4:	f003 f950 	bl	8005878 <HAL_I2C_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80025de:	f000 f8ac 	bl	800273a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025e2:	2100      	movs	r1, #0
 80025e4:	4809      	ldr	r0, [pc, #36]	@ (800260c <MX_I2C1_Init+0x74>)
 80025e6:	f003 fd65 	bl	80060b4 <HAL_I2CEx_ConfigAnalogFilter>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025f0:	f000 f8a3 	bl	800273a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025f4:	2100      	movs	r1, #0
 80025f6:	4805      	ldr	r0, [pc, #20]	@ (800260c <MX_I2C1_Init+0x74>)
 80025f8:	f003 fda7 	bl	800614a <HAL_I2CEx_ConfigDigitalFilter>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002602:	f000 f89a 	bl	800273a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200003c0 	.word	0x200003c0
 8002610:	40005400 	.word	0x40005400
 8002614:	00b07cb4 	.word	0x00b07cb4

08002618 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800261c:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <MX_IPCC_Init+0x20>)
 800261e:	4a07      	ldr	r2, [pc, #28]	@ (800263c <MX_IPCC_Init+0x24>)
 8002620:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002622:	4805      	ldr	r0, [pc, #20]	@ (8002638 <MX_IPCC_Init+0x20>)
 8002624:	f003 fdde 	bl	80061e4 <HAL_IPCC_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800262e:	f000 f884 	bl	800273a <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000414 	.word	0x20000414
 800263c:	58000c00 	.word	0x58000c00

08002640 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002654:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <MX_RNG_Init+0x24>)
 8002656:	4a08      	ldr	r2, [pc, #32]	@ (8002678 <MX_RNG_Init+0x28>)
 8002658:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <MX_RNG_Init+0x24>)
 800265c:	2200      	movs	r2, #0
 800265e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002660:	4804      	ldr	r0, [pc, #16]	@ (8002674 <MX_RNG_Init+0x24>)
 8002662:	f005 f98f 	bl	8007984 <HAL_RNG_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800266c:	f000 f865 	bl	800273a <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000450 	.word	0x20000450
 8002678:	58001000 	.word	0x58001000

0800267c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002680:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <MX_RTC_Init+0x58>)
 8002682:	4a15      	ldr	r2, [pc, #84]	@ (80026d8 <MX_RTC_Init+0x5c>)
 8002684:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002686:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <MX_RTC_Init+0x58>)
 8002688:	2200      	movs	r2, #0
 800268a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <MX_RTC_Init+0x58>)
 800268e:	220f      	movs	r2, #15
 8002690:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002692:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <MX_RTC_Init+0x58>)
 8002694:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002698:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800269a:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <MX_RTC_Init+0x58>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026a0:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <MX_RTC_Init+0x58>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026a6:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <MX_RTC_Init+0x58>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026ac:	4809      	ldr	r0, [pc, #36]	@ (80026d4 <MX_RTC_Init+0x58>)
 80026ae:	f005 fa07 	bl	8007ac0 <HAL_RTC_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80026b8:	f000 f83f 	bl	800273a <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	4804      	ldr	r0, [pc, #16]	@ (80026d4 <MX_RTC_Init+0x58>)
 80026c2:	f005 fafd 	bl	8007cc0 <HAL_RTCEx_SetWakeUpTimer_IT>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80026cc:	f000 f835 	bl	800273a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000464 	.word	0x20000464
 80026d8:	40002800 	.word	0x40002800

080026dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80026e0:	2004      	movs	r0, #4
 80026e2:	f7ff fe29 	bl	8002338 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7ff fe26 	bl	8002338 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2100      	movs	r1, #0
 80026f0:	200b      	movs	r0, #11
 80026f2:	f002 fbba 	bl	8004e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026f6:	200b      	movs	r0, #11
 80026f8:	f002 fbd1 	bl	8004e9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2100      	movs	r1, #0
 8002700:	200c      	movs	r0, #12
 8002702:	f002 fbb2 	bl	8004e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002706:	200c      	movs	r0, #12
 8002708:	f002 fbc9 	bl	8004e9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	2100      	movs	r1, #0
 8002710:	200d      	movs	r0, #13
 8002712:	f002 fbaa 	bl	8004e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002716:	200d      	movs	r0, #13
 8002718:	f002 fbc1 	bl	8004e9e <HAL_NVIC_EnableIRQ>

}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}

08002720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002724:	2004      	movs	r0, #4
 8002726:	f7ff fe20 	bl	800236a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	2002      	movs	r0, #2
 800272c:	f7ff fe1d 	bl	800236a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002730:	2001      	movs	r0, #1
 8002732:	f7ff fe1a 	bl	800236a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}

0800273a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800273e:	b672      	cpsid	i
}
 8002740:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002742:	bf00      	nop
 8002744:	e7fd      	b.n	8002742 <Error_Handler+0x8>
	...

08002748 <LL_PWR_EnableSRAM2Retention>:
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <LL_PWR_EnableSRAM2Retention+0x1c>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002752:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002756:	6093      	str	r3, [r2, #8]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	58000400 	.word	0x58000400

08002768 <LL_EXTI_IsEnabledRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledRisingTrig_0_31(uint32_t ExtiLine)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->RTSR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002770:	4b07      	ldr	r3, [pc, #28]	@ (8002790 <LL_EXTI_IsEnabledRisingTrig_0_31+0x28>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4013      	ands	r3, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d101      	bne.n	8002782 <LL_EXTI_IsEnabledRisingTrig_0_31+0x1a>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <LL_EXTI_IsEnabledRisingTrig_0_31+0x1c>
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	58000800 	.word	0x58000800

08002794 <LL_EXTI_IsEnabledFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledFallingTrig_0_31(uint32_t ExtiLine)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FTSR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800279c:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <LL_EXTI_IsEnabledFallingTrig_0_31+0x28>)
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4013      	ands	r3, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d101      	bne.n	80027ae <LL_EXTI_IsEnabledFallingTrig_0_31+0x1a>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <LL_EXTI_IsEnabledFallingTrig_0_31+0x1c>
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	58000800 	.word	0x58000800

080027c0 <LL_EXTI_GenerateSWI_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_GenerateSWI_0_31(uint32_t ExtiLine)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->SWIER1, ExtiLine);
 80027c8:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <LL_EXTI_GenerateSWI_0_31+0x20>)
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	4904      	ldr	r1, [pc, #16]	@ (80027e0 <LL_EXTI_GenerateSWI_0_31+0x20>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	58000800 	.word	0x58000800

080027e4 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80027f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_SYSCFG_GetEXTISource>:
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x03U], (Line >> 16U)) >> (POSITION_VAL(Line >> 16U) & 0x0000000FUL));
 8002814:	4a12      	ldr	r2, [pc, #72]	@ (8002860 <LL_SYSCFG_GetEXTISource+0x54>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	3302      	adds	r3, #2
 800281e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	401a      	ands	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	0c1b      	lsrs	r3, r3, #16
 800282c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	60fb      	str	r3, [r7, #12]
  return result;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <LL_SYSCFG_GetEXTISource+0x38>
    return 32U;
 8002840:	2320      	movs	r3, #32
 8002842:	e003      	b.n	800284c <LL_SYSCFG_GetEXTISource+0x40>
  return __builtin_clz(value);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40010000 	.word	0x40010000

08002864 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	3220      	adds	r2, #32
 8002874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002878:	4a05      	ldr	r2, [pc, #20]	@ (8002890 <LL_HSEM_1StepLock+0x2c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d001      	beq.n	8002882 <LL_HSEM_1StepLock+0x1e>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <LL_HSEM_1StepLock+0x20>
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	80000400 	.word	0x80000400

08002894 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <STBY_AppHwSave>:
/*******************************************************************************
 * This part may be updated by the user
 ******************************************************************************/

void STBY_AppHwSave(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
/* In this function HW parameters lost in standby can de saved.
   All RAM memory is in retention */
  /* USER CODE BEGIN STBY_AppHwSave_1 */

  /* USER CODE END STBY_AppHwSave_1 */
  return;
 80028be:	bf00      	nop
}
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <STBY_AppHwRestore>:

void STBY_AppHwRestore(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN STBY_AppHwRestore_1 */

  /* USER CODE END STBY_AppHwRestore_1 */

  HAL_Init();
 80028cc:	f001 f8f2 	bl	8003ab4 <HAL_Init>
  HAL_ResumeTick();
 80028d0:	f001 f992 	bl	8003bf8 <HAL_ResumeTick>
  /* In this user section add MX init functions present in main.c, except MX_RTC_Init() */
  /* USER CODE BEGIN STBY_AppHwRestore_2 */

  /* USER CODE END STBY_AppHwRestore_2 */

  STBY_TriggerIT();
 80028d4:	f000 f858 	bl	8002988 <STBY_TriggerIT>

  return;
 80028d8:	bf00      	nop
}
 80028da:	bd80      	pop	{r7, pc}

080028dc <STBY_SysHwSave>:
/*******************************************************************************
 * Do not update code from this limit.
 ******************************************************************************/

void STBY_SysHwSave(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  STBY_BackupIpccC1MR = READ_REG(IPCC->C1MR);
 80028e0:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <STBY_SysHwSave+0x20>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a06      	ldr	r2, [pc, #24]	@ (8002900 <STBY_SysHwSave+0x24>)
 80028e6:	6013      	str	r3, [r2, #0]
  STBY_BackupVTOR = SCB->VTOR;
 80028e8:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <STBY_SysHwSave+0x28>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a06      	ldr	r2, [pc, #24]	@ (8002908 <STBY_SysHwSave+0x2c>)
 80028ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN STBY_SysHwSave_1 */

  /* USER CODE END STBY_SysHwSave_1 */
  return;
 80028f0:	bf00      	nop
}
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	58000c00 	.word	0x58000c00
 8002900:	200005dc 	.word	0x200005dc
 8002904:	e000ed00 	.word	0xe000ed00
 8002908:	200005e0 	.word	0x200005e0

0800290c <STBY_SysHwRestore>:

void STBY_SysHwRestore(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN STBY_SysHwRestore_1 */

  /* USER CODE END STBY_SysHwRestore_1 */
  APPD_Init();
 8002910:	f7fe f9ba 	bl	8000c88 <APPD_Init>

  Init_Smps();
 8002914:	f7fe fca0 	bl	8001258 <Init_Smps>
  Init_Exti();
 8002918:	f7fe fca5 	bl	8001266 <Init_Exti>
  HAL_Init();
 800291c:	f001 f8ca 	bl	8003ab4 <HAL_Init>

  WRITE_REG(SCB->VTOR, STBY_BackupVTOR);
 8002920:	4a13      	ldr	r2, [pc, #76]	@ (8002970 <STBY_SysHwRestore+0x64>)
 8002922:	4b14      	ldr	r3, [pc, #80]	@ (8002974 <STBY_SysHwRestore+0x68>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6093      	str	r3, [r2, #8]

  HW_IPCC_Init();
 8002928:	f009 f8ba 	bl	800baa0 <HW_IPCC_Init>
  WRITE_REG(IPCC->C1MR, STBY_BackupIpccC1MR);
 800292c:	4a12      	ldr	r2, [pc, #72]	@ (8002978 <STBY_SysHwRestore+0x6c>)
 800292e:	4b13      	ldr	r3, [pc, #76]	@ (800297c <STBY_SysHwRestore+0x70>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6053      	str	r3, [r2, #4]

  if( !LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) )
 8002934:	2103      	movs	r1, #3
 8002936:	4812      	ldr	r0, [pc, #72]	@ (8002980 <STBY_SysHwRestore+0x74>)
 8002938:	f7ff ff94 	bl	8002864 <LL_HSEM_1StepLock>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d108      	bne.n	8002954 <STBY_SysHwRestore+0x48>
  {
    LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8002942:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002946:	f7ff ff4d 	bl	80027e4 <LL_RCC_SetClkAfterWakeFromStop>
    LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 800294a:	2200      	movs	r2, #0
 800294c:	2103      	movs	r1, #3
 800294e:	480c      	ldr	r0, [pc, #48]	@ (8002980 <STBY_SysHwRestore+0x74>)
 8002950:	f7ff ffa0 	bl	8002894 <LL_HSEM_ReleaseLock>
  }
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_PWR_STANDBY_SEMID, 0 );
 8002954:	2200      	movs	r2, #0
 8002956:	210a      	movs	r1, #10
 8002958:	4809      	ldr	r0, [pc, #36]	@ (8002980 <STBY_SysHwRestore+0x74>)
 800295a:	f7ff ff9b 	bl	8002894 <LL_HSEM_ReleaseLock>

  HW_TS_Init(hw_ts_InitMode_Limited, &hrtc);
 800295e:	4909      	ldr	r1, [pc, #36]	@ (8002984 <STBY_SysHwRestore+0x78>)
 8002960:	2001      	movs	r0, #1
 8002962:	f7ff fa49 	bl	8001df8 <HW_TS_Init>

  LL_PWR_EnableSRAM2Retention();
 8002966:	f7ff feef 	bl	8002748 <LL_PWR_EnableSRAM2Retention>

  /* USER CODE BEGIN STBY_SysHwRestore_2 */

  /* USER CODE END STBY_SysHwRestore_2 */

  return;
 800296a:	bf00      	nop
}
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	e000ed00 	.word	0xe000ed00
 8002974:	200005e0 	.word	0x200005e0
 8002978:	58000c00 	.word	0x58000c00
 800297c:	200005dc 	.word	0x200005dc
 8002980:	58001400 	.word	0x58001400
 8002984:	20000464 	.word	0x20000464

08002988 <STBY_TriggerIT>:

  return STBY_BootStatus;
}

static void STBY_TriggerIT(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* If system has been woken-up by an RTC alarm,
   * a software event must be generated to trigger the IT.
   * NVIC and EXTI must be reconfigured properly before triggering the event.
   */
  if((__HAL_RTC_ALARM_GET_FLAG((RTC_HandleTypeDef *)&hrtc, RTC_FLAG_ALRAF) != 0) ||
 800298c:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <STBY_TriggerIT+0xec>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <STBY_TriggerIT+0x20>
     (__HAL_RTC_ALARM_GET_FLAG((RTC_HandleTypeDef *)&hrtc, RTC_FLAG_ALRBF) != 0) )
 800299a:	4b36      	ldr	r3, [pc, #216]	@ (8002a74 <STBY_TriggerIT+0xec>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if((__HAL_RTC_ALARM_GET_FLAG((RTC_HandleTypeDef *)&hrtc, RTC_FLAG_ALRAF) != 0) ||
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <STBY_TriggerIT+0x2c>
  {
    __HAL_RTC_ALARM_EXTI_GENERATE_SWIT();
 80029a8:	4b33      	ldr	r3, [pc, #204]	@ (8002a78 <STBY_TriggerIT+0xf0>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a32      	ldr	r2, [pc, #200]	@ (8002a78 <STBY_TriggerIT+0xf0>)
 80029ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b2:	6093      	str	r3, [r2, #8]

  /* If system has been woken-up by a wake up pin,
   * a software event must be generated to trigger the IT.
   * NVIC and EXTI must be reconfigured properly before triggering the event.
   */
  if(HAL_PWREx_GetWakeupFlag(PWR_FLAG_WUF1) != 0)
 80029b4:	2020      	movs	r0, #32
 80029b6:	f003 fcc1 	bl	800633c <HAL_PWREx_GetWakeupFlag>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d027      	beq.n	8002a10 <STBY_TriggerIT+0x88>
  {
    if( (LL_SYSCFG_GetEXTISource(LL_SYSCFG_EXTI_LINE0) == LL_SYSCFG_EXTI_PORTA) )
 80029c0:	f44f 2070 	mov.w	r0, #983040	@ 0xf0000
 80029c4:	f7ff ff22 	bl	800280c <LL_SYSCFG_GetEXTISource>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d11d      	bne.n	8002a0a <STBY_TriggerIT+0x82>
    {
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP1) >> PWR_CR4_WP1_Pos) == 0) &&
 80029ce:	4b2b      	ldr	r3, [pc, #172]	@ (8002a7c <STBY_TriggerIT+0xf4>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d108      	bne.n	80029ec <STBY_TriggerIT+0x64>
         (LL_EXTI_IsEnabledRisingTrig_0_31(LL_EXTI_LINE_0) == 1) )
 80029da:	2001      	movs	r0, #1
 80029dc:	f7ff fec4 	bl	8002768 <LL_EXTI_IsEnabledRisingTrig_0_31>
 80029e0:	4603      	mov	r3, r0
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP1) >> PWR_CR4_WP1_Pos) == 0) &&
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d102      	bne.n	80029ec <STBY_TriggerIT+0x64>
      {
        LL_EXTI_GenerateSWI_0_31(LL_EXTI_LINE_0);
 80029e6:	2001      	movs	r0, #1
 80029e8:	f7ff feea 	bl	80027c0 <LL_EXTI_GenerateSWI_0_31>
      }
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP1) >> PWR_CR4_WP1_Pos) == 1) &&
 80029ec:	4b23      	ldr	r3, [pc, #140]	@ (8002a7c <STBY_TriggerIT+0xf4>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d108      	bne.n	8002a0a <STBY_TriggerIT+0x82>
         (LL_EXTI_IsEnabledFallingTrig_0_31(LL_EXTI_LINE_0) == 1) )
 80029f8:	2001      	movs	r0, #1
 80029fa:	f7ff fecb 	bl	8002794 <LL_EXTI_IsEnabledFallingTrig_0_31>
 80029fe:	4603      	mov	r3, r0
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP1) >> PWR_CR4_WP1_Pos) == 1) &&
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d102      	bne.n	8002a0a <STBY_TriggerIT+0x82>
      {
        LL_EXTI_GenerateSWI_0_31(LL_EXTI_LINE_0);
 8002a04:	2001      	movs	r0, #1
 8002a06:	f7ff fedb 	bl	80027c0 <LL_EXTI_GenerateSWI_0_31>
      }
    }
    HAL_PWREx_ClearWakeupFlag(PWR_FLAG_WUF1);
 8002a0a:	2020      	movs	r0, #32
 8002a0c:	f003 fcac 	bl	8006368 <HAL_PWREx_ClearWakeupFlag>
  }

  if(HAL_PWREx_GetWakeupFlag(PWR_FLAG_WUF4) != 0)
 8002a10:	2023      	movs	r0, #35	@ 0x23
 8002a12:	f003 fc93 	bl	800633c <HAL_PWREx_GetWakeupFlag>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d029      	beq.n	8002a70 <STBY_TriggerIT+0xe8>
  {
    if( (LL_SYSCFG_GetEXTISource(LL_SYSCFG_EXTI_LINE2) == LL_SYSCFG_EXTI_PORTA) )
 8002a1c:	f04f 6070 	mov.w	r0, #251658240	@ 0xf000000
 8002a20:	f7ff fef4 	bl	800280c <LL_SYSCFG_GetEXTISource>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d11e      	bne.n	8002a68 <STBY_TriggerIT+0xe0>
    {
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP4) >> PWR_CR4_WP4_Pos) == 0) &&
 8002a2a:	4b14      	ldr	r3, [pc, #80]	@ (8002a7c <STBY_TriggerIT+0xf4>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d108      	bne.n	8002a48 <STBY_TriggerIT+0xc0>
         (LL_EXTI_IsEnabledRisingTrig_0_31(LL_EXTI_LINE_2) == 1) )
 8002a36:	2004      	movs	r0, #4
 8002a38:	f7ff fe96 	bl	8002768 <LL_EXTI_IsEnabledRisingTrig_0_31>
 8002a3c:	4603      	mov	r3, r0
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP4) >> PWR_CR4_WP4_Pos) == 0) &&
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d102      	bne.n	8002a48 <STBY_TriggerIT+0xc0>
      {
        LL_EXTI_GenerateSWI_0_31(LL_EXTI_LINE_2);
 8002a42:	2004      	movs	r0, #4
 8002a44:	f7ff febc 	bl	80027c0 <LL_EXTI_GenerateSWI_0_31>
      }
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP4) >> PWR_CR4_WP4_Pos) == 1) &&
 8002a48:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <STBY_TriggerIT+0xf4>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	08db      	lsrs	r3, r3, #3
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d108      	bne.n	8002a68 <STBY_TriggerIT+0xe0>
         (LL_EXTI_IsEnabledFallingTrig_0_31(LL_EXTI_LINE_2) == 1) )
 8002a56:	2004      	movs	r0, #4
 8002a58:	f7ff fe9c 	bl	8002794 <LL_EXTI_IsEnabledFallingTrig_0_31>
 8002a5c:	4603      	mov	r3, r0
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP4) >> PWR_CR4_WP4_Pos) == 1) &&
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d102      	bne.n	8002a68 <STBY_TriggerIT+0xe0>
      {
        LL_EXTI_GenerateSWI_0_31(LL_EXTI_LINE_2);
 8002a62:	2004      	movs	r0, #4
 8002a64:	f7ff feac 	bl	80027c0 <LL_EXTI_GenerateSWI_0_31>
      }
    }
    HAL_PWREx_ClearWakeupFlag(PWR_FLAG_WUF4);
 8002a68:	2023      	movs	r0, #35	@ 0x23
 8002a6a:	f003 fc7d 	bl	8006368 <HAL_PWREx_ClearWakeupFlag>
  }

  return;
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
}
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000464 	.word	0x20000464
 8002a78:	58000800 	.word	0x58000800
 8002a7c:	58000400 	.word	0x58000400

08002a80 <LL_PWR_SetPowerMode>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8002a88:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <LL_PWR_SetPowerMode+0x24>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 0207 	bic.w	r2, r3, #7
 8002a90:	4904      	ldr	r1, [pc, #16]	@ (8002aa4 <LL_PWR_SetPowerMode+0x24>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	58000400 	.word	0x58000400

08002aa8 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8002aac:	4b03      	ldr	r3, [pc, #12]	@ (8002abc <LL_PWR_ClearFlag_WU+0x14>)
 8002aae:	2209      	movs	r2, #9
 8002ab0:	619a      	str	r2, [r3, #24]
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	58000400 	.word	0x58000400

08002ac0 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8002ac4:	4b07      	ldr	r3, [pc, #28]	@ (8002ae4 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad2:	d101      	bne.n	8002ad8 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	58000400 	.word	0x58000400

08002ae8 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8002aec:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002afa:	d101      	bne.n	8002b00 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	58000400 	.word	0x58000400

08002b10 <LL_EXTI_EnableEvent_32_63>:
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002b18:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <LL_EXTI_EnableEvent_32_63+0x24>)
 8002b1a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002b1e:	4905      	ldr	r1, [pc, #20]	@ (8002b34 <LL_EXTI_EnableEvent_32_63+0x24>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	58000800 	.word	0x58000800

08002b38 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002b42:	6a1a      	ldr	r2, [r3, #32]
 8002b44:	4904      	ldr	r1, [pc, #16]	@ (8002b58 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	620b      	str	r3, [r1, #32]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	58000800 	.word	0x58000800

08002b5c <LL_RCC_HSI_Enable>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <LL_RCC_HSI_IsReady>:
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b8c:	d101      	bne.n	8002b92 <LL_RCC_HSI_IsReady+0x18>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <LL_RCC_HSI_IsReady+0x1a>
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_RCC_SetSysClkSource>:
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f023 0203 	bic.w	r2, r3, #3
 8002bb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_RCC_GetSysClkSource>:
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <LL_RCC_SetSMPSClockSource>:
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	f023 0203 	bic.w	r2, r3, #3
 8002bf0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_LPM_EnableSleep>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002c2c:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <LL_LPM_EnableSleep+0x1c>)
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <LL_LPM_EnableSleep+0x1c>)
 8002c32:	f023 0304 	bic.w	r3, r3, #4
 8002c36:	6113      	str	r3, [r2, #16]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002c4c:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <LL_LPM_EnableDeepSleep+0x1c>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <LL_LPM_EnableDeepSleep+0x1c>)
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	6113      	str	r3, [r2, #16]
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <LL_HSEM_1StepLock>:
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	3220      	adds	r2, #32
 8002c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7c:	4a05      	ldr	r2, [pc, #20]	@ (8002c94 <LL_HSEM_1StepLock+0x2c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d001      	beq.n	8002c86 <LL_HSEM_1StepLock+0x1e>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <LL_HSEM_1StepLock+0x20>
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	80000400 	.word	0x80000400

08002c98 <LL_HSEM_ReleaseLock>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8002cc2:	f000 ff89 	bl	8003bd8 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8002cc6:	f7ff ff9e 	bl	8002c06 <LL_RCC_ClearResetFlags>

  EnterLowPower();
 8002cca:	f000 f857 	bl	8002d7c <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8002cce:	f7ff feeb 	bl	8002aa8 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8002cd2:	2003      	movs	r0, #3
 8002cd4:	f7ff fed4 	bl	8002a80 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8002cd8:	f7ff ffb6 	bl	8002c48 <LL_LPM_EnableDeepSleep>
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

#if (CFG_LPM_STANDBY_SUPPORTED != 0)
  LL_EXTI_EnableRisingTrig_32_63(LL_EXTI_LINE_40);
 8002cdc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ce0:	f7ff ff2a 	bl	8002b38 <LL_EXTI_EnableRisingTrig_32_63>
  LL_EXTI_EnableEvent_32_63(LL_EXTI_LINE_40);
 8002ce4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ce8:	f7ff ff12 	bl	8002b10 <LL_EXTI_EnableEvent_32_63>

  STBY_AppHwSave();
 8002cec:	f7ff fde5 	bl	80028ba <STBY_AppHwSave>
  STBY_SysHwSave();
 8002cf0:	f7ff fdf4 	bl	80028dc <STBY_SysHwSave>

  CPUcontextSave();/* this function will call WFI instruction */
 8002cf4:	f000 f83b 	bl	8002d6e <CPUcontextSave>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8002cf8:	bf00      	nop
}
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
#if (CFG_LPM_STANDBY_SUPPORTED != 0)
  if(STBY_BootStatus != 0)
 8002d00:	4b07      	ldr	r3, [pc, #28]	@ (8002d20 <PWR_ExitOffMode+0x24>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <PWR_ExitOffMode+0x1a>
  {
    STBY_SysHwRestore();
 8002d08:	f7ff fe00 	bl	800290c <STBY_SysHwRestore>
    ExitLowPower_standby();
 8002d0c:	f000 f892 	bl	8002e34 <ExitLowPower_standby>
    STBY_AppHwRestore();
 8002d10:	f7ff fdda 	bl	80028c8 <STBY_AppHwRestore>
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8002d14:	e002      	b.n	8002d1c <PWR_ExitOffMode+0x20>
    ExitLowPower();
 8002d16:	f000 f86d 	bl	8002df4 <ExitLowPower>
  return;
 8002d1a:	bf00      	nop
}
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200005e4 	.word	0x200005e4

08002d24 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8002d28:	f000 ff56 	bl	8003bd8 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8002d2c:	f000 f826 	bl	8002d7c <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8002d30:	2001      	movs	r0, #1
 8002d32:	f7ff fea5 	bl	8002a80 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8002d36:	f7ff ff87 	bl	8002c48 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 8002d3a:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8002d3c:	bf00      	nop
}
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8002d44:	f000 f856 	bl	8002df4 <ExitLowPower>

  HAL_ResumeTick();
 8002d48:	f000 ff56 	bl	8003bf8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8002d4c:	bf00      	nop
}
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8002d54:	f000 ff40 	bl	8003bd8 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002d58:	f7ff ff66 	bl	8002c28 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 8002d5c:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8002d5e:	bf00      	nop
}
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8002d66:	f000 ff47 	bl	8003bf8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8002d6a:	bf00      	nop
}
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <CPUcontextSave>:
* @brief Weak CPUcontextSave function definition to implement in startup file.
* @param none
* @retval none
*/
__WEAK void CPUcontextSave(void)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	af00      	add	r7, sp, #0
  /*
   * If you are here, you have to update your startup_stm32wb15xx_cm4.s file to
   * implement CPUcontextSave function like done in latest STM32CubeWB package
   * into STM32WB15 BLE applications.
   */
  Error_Handler();
 8002d72:	f7ff fce2 	bl	800273a <Error_Handler>
#endif

  return;
 8002d76:	bf00      	nop
}
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8002d80:	bf00      	nop
 8002d82:	2103      	movs	r1, #3
 8002d84:	4819      	ldr	r0, [pc, #100]	@ (8002dec <EnterLowPower+0x70>)
 8002d86:	f7ff ff6f 	bl	8002c68 <LL_HSEM_1StepLock>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f8      	bne.n	8002d82 <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8002d90:	2104      	movs	r1, #4
 8002d92:	4816      	ldr	r0, [pc, #88]	@ (8002dec <EnterLowPower+0x70>)
 8002d94:	f7ff ff68 	bl	8002c68 <LL_HSEM_1StepLock>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d117      	bne.n	8002dce <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8002d9e:	f7ff fea3 	bl	8002ae8 <LL_PWR_IsActiveFlag_C2DS>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d104      	bne.n	8002db2 <EnterLowPower+0x36>
 8002da8:	f7ff fe8a 	bl	8002ac0 <LL_PWR_IsActiveFlag_C2SB>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d015      	beq.n	8002dde <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2104      	movs	r1, #4
 8002db6:	480d      	ldr	r0, [pc, #52]	@ (8002dec <EnterLowPower+0x70>)
 8002db8:	f7ff ff6e 	bl	8002c98 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8002dbc:	f000 f858 	bl	8002e70 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <EnterLowPower+0x74>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <EnterLowPower+0x74>)
 8002dc6:	f023 0307 	bic.w	r3, r3, #7
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	e007      	b.n	8002dde <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8002dce:	f000 f84f 	bl	8002e70 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8002dd2:	4b07      	ldr	r3, [pc, #28]	@ (8002df0 <EnterLowPower+0x74>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a06      	ldr	r2, [pc, #24]	@ (8002df0 <EnterLowPower+0x74>)
 8002dd8:	f023 0307 	bic.w	r3, r3, #7
 8002ddc:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2103      	movs	r1, #3
 8002de2:	4802      	ldr	r0, [pc, #8]	@ (8002dec <EnterLowPower+0x70>)
 8002de4:	f7ff ff58 	bl	8002c98 <LL_HSEM_ReleaseLock>

  return;
 8002de8:	bf00      	nop
}
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	58001400 	.word	0x58001400
 8002df0:	58004000 	.word	0x58004000

08002df4 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2104      	movs	r1, #4
 8002dfc:	480b      	ldr	r0, [pc, #44]	@ (8002e2c <ExitLowPower+0x38>)
 8002dfe:	f7ff ff4b 	bl	8002c98 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8002e02:	bf00      	nop
 8002e04:	2103      	movs	r1, #3
 8002e06:	4809      	ldr	r0, [pc, #36]	@ (8002e2c <ExitLowPower+0x38>)
 8002e08:	f7ff ff2e 	bl	8002c68 <LL_HSEM_1StepLock>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f8      	bne.n	8002e04 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002e12:	f7ff fed8 	bl	8002bc6 <LL_RCC_GetSysClkSource>

/* USER CODE END ExitLowPower_2 */
  }
#if (CFG_LPM_STANDBY_SUPPORTED != 0)

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8002e16:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <ExitLowPower+0x3c>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2103      	movs	r1, #3
 8002e22:	4802      	ldr	r0, [pc, #8]	@ (8002e2c <ExitLowPower+0x38>)
 8002e24:	f7ff ff38 	bl	8002c98 <LL_HSEM_ReleaseLock>

  return;
 8002e28:	bf00      	nop
}
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	58001400 	.word	0x58001400
 8002e30:	58000400 	.word	0x58000400

08002e34 <ExitLowPower_standby>:
  * @brief Restore the system to exit standby mode
  * @param none
  * @retval none
  */
static void ExitLowPower_standby(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
/* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2104      	movs	r1, #4
 8002e3c:	480a      	ldr	r0, [pc, #40]	@ (8002e68 <ExitLowPower_standby+0x34>)
 8002e3e:	f7ff ff2b 	bl	8002c98 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8002e42:	bf00      	nop
 8002e44:	2103      	movs	r1, #3
 8002e46:	4808      	ldr	r0, [pc, #32]	@ (8002e68 <ExitLowPower_standby+0x34>)
 8002e48:	f7ff ff0e 	bl	8002c68 <LL_HSEM_1StepLock>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f8      	bne.n	8002e44 <ExitLowPower_standby+0x10>
/* USER CODE BEGIN ExitLowPower_standby */

/* USER CODE END ExitLowPower_standby */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8002e52:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <ExitLowPower_standby+0x38>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2103      	movs	r1, #3
 8002e5e:	4802      	ldr	r0, [pc, #8]	@ (8002e68 <ExitLowPower_standby+0x34>)
 8002e60:	f7ff ff1a 	bl	8002c98 <LL_HSEM_ReleaseLock>

  return;
 8002e64:	bf00      	nop
}
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	58001400 	.word	0x58001400
 8002e6c:	58000400 	.word	0x58000400

08002e70 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8002e74:	f7ff fe72 	bl	8002b5c <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8002e78:	bf00      	nop
 8002e7a:	f7ff fe7e 	bl	8002b7a <LL_RCC_HSI_IsReady>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0fa      	beq.n	8002e7a <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002e84:	2001      	movs	r0, #1
 8002e86:	f7ff fe8a 	bl	8002b9e <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7ff fea7 	bl	8002bde <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8002e90:	bf00      	nop
 8002e92:	f7ff fe98 	bl	8002bc6 <LL_RCC_GetSysClkSource>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d1fa      	bne.n	8002e92 <Switch_On_HSI+0x22>
  return;
 8002e9c:	bf00      	nop
}
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <LL_RCC_EnableRTC>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_AHB2_GRP1_EnableClock>:
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ece:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ed0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ede:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_AHB3_GRP1_EnableClock>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4013      	ands	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f18:	68fb      	ldr	r3, [r7, #12]
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_APB1_GRP1_EnableClock>:
{
 8002f26:	b480      	push	{r7}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f32:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4013      	ands	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <LL_APB2_GRP1_EnableClock>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002f8e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f92:	f7ff ffaf 	bl	8002ef4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002f96:	2200      	movs	r2, #0
 8002f98:	2100      	movs	r1, #0
 8002f9a:	202e      	movs	r0, #46	@ 0x2e
 8002f9c:	f001 ff65 	bl	8004e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002fa0:	202e      	movs	r0, #46	@ 0x2e
 8002fa2:	f001 ff7c 	bl	8004e9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b094      	sub	sp, #80	@ 0x50
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fc4:	f107 030c 	add.w	r3, r7, #12
 8002fc8:	2230      	movs	r2, #48	@ 0x30
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f009 fea6 	bl	800cd1e <memset>
  if(hadc->Instance==ADC1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8003094 <HAL_ADC_MspInit+0xe8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d156      	bne.n	800308a <HAL_ADC_MspInit+0xde>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002fdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fe0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002fe2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fe8:	f107 030c 	add.w	r3, r7, #12
 8002fec:	4618      	mov	r0, r3
 8002fee:	f004 fbd3 	bl	8007798 <HAL_RCCEx_PeriphCLKConfig>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002ff8:	f7ff fb9f 	bl	800273a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002ffc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003000:	f7ff ffaa 	bl	8002f58 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003004:	2001      	movs	r0, #1
 8003006:	f7ff ff5c 	bl	8002ec2 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800300a:	2311      	movs	r3, #17
 800300c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800300e:	2303      	movs	r3, #3
 8003010:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003016:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800301a:	4619      	mov	r1, r3
 800301c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003020:	f002 fa86 	bl	8005530 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8003024:	4b1c      	ldr	r3, [pc, #112]	@ (8003098 <HAL_ADC_MspInit+0xec>)
 8003026:	4a1d      	ldr	r2, [pc, #116]	@ (800309c <HAL_ADC_MspInit+0xf0>)
 8003028:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800302a:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <HAL_ADC_MspInit+0xec>)
 800302c:	2205      	movs	r2, #5
 800302e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003030:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <HAL_ADC_MspInit+0xec>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003036:	4b18      	ldr	r3, [pc, #96]	@ (8003098 <HAL_ADC_MspInit+0xec>)
 8003038:	2200      	movs	r2, #0
 800303a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800303c:	4b16      	ldr	r3, [pc, #88]	@ (8003098 <HAL_ADC_MspInit+0xec>)
 800303e:	2280      	movs	r2, #128	@ 0x80
 8003040:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <HAL_ADC_MspInit+0xec>)
 8003044:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003048:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800304a:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <HAL_ADC_MspInit+0xec>)
 800304c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003050:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003052:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <HAL_ADC_MspInit+0xec>)
 8003054:	2220      	movs	r2, #32
 8003056:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003058:	4b0f      	ldr	r3, [pc, #60]	@ (8003098 <HAL_ADC_MspInit+0xec>)
 800305a:	2200      	movs	r2, #0
 800305c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800305e:	480e      	ldr	r0, [pc, #56]	@ (8003098 <HAL_ADC_MspInit+0xec>)
 8003060:	f001 ff62 	bl	8004f28 <HAL_DMA_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800306a:	f7ff fb66 	bl	800273a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a09      	ldr	r2, [pc, #36]	@ (8003098 <HAL_ADC_MspInit+0xec>)
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40
 8003074:	4a08      	ldr	r2, [pc, #32]	@ (8003098 <HAL_ADC_MspInit+0xec>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	2101      	movs	r1, #1
 800307e:	2012      	movs	r0, #18
 8003080:	f001 fef3 	bl	8004e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003084:	2012      	movs	r0, #18
 8003086:	f001 ff0a 	bl	8004e9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800308a:	bf00      	nop
 800308c:	3750      	adds	r7, #80	@ 0x50
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40012400 	.word	0x40012400
 8003098:	20000360 	.word	0x20000360
 800309c:	40020030 	.word	0x40020030

080030a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b094      	sub	sp, #80	@ 0x50
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	2230      	movs	r2, #48	@ 0x30
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f009 fe2c 	bl	800cd1e <memset>
  if(hi2c->Instance==I2C1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a17      	ldr	r2, [pc, #92]	@ (8003128 <HAL_I2C_MspInit+0x88>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d126      	bne.n	800311e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030d0:	2304      	movs	r3, #4
 80030d2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030d4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80030d8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030da:	f107 030c 	add.w	r3, r7, #12
 80030de:	4618      	mov	r0, r3
 80030e0:	f004 fb5a 	bl	8007798 <HAL_RCCEx_PeriphCLKConfig>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80030ea:	f7ff fb26 	bl	800273a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ee:	2002      	movs	r0, #2
 80030f0:	f7ff fee7 	bl	8002ec2 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030fa:	2312      	movs	r3, #18
 80030fc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003102:	2300      	movs	r3, #0
 8003104:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003106:	2304      	movs	r3, #4
 8003108:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800310e:	4619      	mov	r1, r3
 8003110:	4806      	ldr	r0, [pc, #24]	@ (800312c <HAL_I2C_MspInit+0x8c>)
 8003112:	f002 fa0d 	bl	8005530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003116:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800311a:	f7ff ff04 	bl	8002f26 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800311e:	bf00      	nop
 8003120:	3750      	adds	r7, #80	@ 0x50
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40005400 	.word	0x40005400
 800312c:	48000400 	.word	0x48000400

08003130 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0d      	ldr	r2, [pc, #52]	@ (8003174 <HAL_IPCC_MspInit+0x44>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d113      	bne.n	800316a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003142:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003146:	f7ff fed5 	bl	8002ef4 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2100      	movs	r1, #0
 800314e:	202c      	movs	r0, #44	@ 0x2c
 8003150:	f001 fe8b 	bl	8004e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003154:	202c      	movs	r0, #44	@ 0x2c
 8003156:	f001 fea2 	bl	8004e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	2100      	movs	r1, #0
 800315e:	202d      	movs	r0, #45	@ 0x2d
 8003160:	f001 fe83 	bl	8004e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003164:	202d      	movs	r0, #45	@ 0x2d
 8003166:	f001 fe9a 	bl	8004e9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	58000c00 	.word	0x58000c00

08003178 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08e      	sub	sp, #56	@ 0x38
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003180:	f107 0308 	add.w	r3, r7, #8
 8003184:	2230      	movs	r2, #48	@ 0x30
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f009 fdc8 	bl	800cd1e <memset>
  if(hrng->Instance==RNG)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a11      	ldr	r2, [pc, #68]	@ (80031d8 <HAL_RNG_MspInit+0x60>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d11b      	bne.n	80031d0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003198:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800319c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 800319e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80031a2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031a4:	f107 0308 	add.w	r3, r7, #8
 80031a8:	4618      	mov	r0, r3
 80031aa:	f004 faf5 	bl	8007798 <HAL_RCCEx_PeriphCLKConfig>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80031b4:	f7ff fac1 	bl	800273a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80031b8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80031bc:	f7ff fe9a 	bl	8002ef4 <LL_AHB3_GRP1_EnableClock>
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 80031c0:	2200      	movs	r2, #0
 80031c2:	2100      	movs	r1, #0
 80031c4:	2035      	movs	r0, #53	@ 0x35
 80031c6:	f001 fe50 	bl	8004e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 80031ca:	2035      	movs	r0, #53	@ 0x35
 80031cc:	f001 fe67 	bl	8004e9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80031d0:	bf00      	nop
 80031d2:	3738      	adds	r7, #56	@ 0x38
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	58001000 	.word	0x58001000

080031dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08e      	sub	sp, #56	@ 0x38
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031e4:	f107 0308 	add.w	r3, r7, #8
 80031e8:	2230      	movs	r2, #48	@ 0x30
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f009 fd96 	bl	800cd1e <memset>
  if(hrtc->Instance==RTC)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a12      	ldr	r2, [pc, #72]	@ (8003240 <HAL_RTC_MspInit+0x64>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d11d      	bne.n	8003238 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80031fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003200:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003202:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003206:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003208:	f107 0308 	add.w	r3, r7, #8
 800320c:	4618      	mov	r0, r3
 800320e:	f004 fac3 	bl	8007798 <HAL_RCCEx_PeriphCLKConfig>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003218:	f7ff fa8f 	bl	800273a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800321c:	f7ff fe40 	bl	8002ea0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003220:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003224:	f7ff fe7f 	bl	8002f26 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003228:	2200      	movs	r2, #0
 800322a:	2100      	movs	r1, #0
 800322c:	2003      	movs	r0, #3
 800322e:	f001 fe1c 	bl	8004e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003232:	2003      	movs	r0, #3
 8003234:	f001 fe33 	bl	8004e9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8003238:	bf00      	nop
 800323a:	3738      	adds	r7, #56	@ 0x38
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40002800 	.word	0x40002800

08003244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003248:	bf00      	nop
 800324a:	e7fd      	b.n	8003248 <NMI_Handler+0x4>

0800324c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003250:	bf00      	nop
 8003252:	e7fd      	b.n	8003250 <HardFault_Handler+0x4>

08003254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003258:	bf00      	nop
 800325a:	e7fd      	b.n	8003258 <MemManage_Handler+0x4>

0800325c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003260:	bf00      	nop
 8003262:	e7fd      	b.n	8003260 <BusFault_Handler+0x4>

08003264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003268:	bf00      	nop
 800326a:	e7fd      	b.n	8003268 <UsageFault_Handler+0x4>

0800326c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003270:	bf00      	nop
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800329a:	f000 fc65 	bl	8003b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80032a6:	f7fe fcdf 	bl	8001c68 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80032b4:	4802      	ldr	r0, [pc, #8]	@ (80032c0 <DMA1_Channel1_IRQHandler+0x10>)
 80032b6:	f001 fffc 	bl	80052b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	2000051c 	.word	0x2000051c

080032c4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80032c8:	4802      	ldr	r0, [pc, #8]	@ (80032d4 <DMA1_Channel2_IRQHandler+0x10>)
 80032ca:	f001 fff2 	bl	80052b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	2000057c 	.word	0x2000057c

080032d8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032dc:	4802      	ldr	r0, [pc, #8]	@ (80032e8 <DMA1_Channel3_IRQHandler+0x10>)
 80032de:	f001 ffe8 	bl	80052b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000360 	.word	0x20000360

080032ec <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80032f0:	4802      	ldr	r0, [pc, #8]	@ (80032fc <ADC1_IRQHandler+0x10>)
 80032f2:	f001 f847 	bl	8004384 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	2000030c 	.word	0x2000030c

08003300 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003304:	4802      	ldr	r0, [pc, #8]	@ (8003310 <USART1_IRQHandler+0x10>)
 8003306:	f004 fd97 	bl	8007e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000488 	.word	0x20000488

08003314 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003318:	f008 fb42 	bl	800b9a0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}

08003320 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003324:	f008 fb72 	bl	800ba0c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003328:	bf00      	nop
 800332a:	bd80      	pop	{r7, pc}

0800332c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003330:	f002 fa7e 	bl	8005830 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}

08003338 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800333c:	4802      	ldr	r0, [pc, #8]	@ (8003348 <RNG_IRQHandler+0x10>)
 800333e:	f004 fb56 	bl	80079ee <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000450 	.word	0x20000450

0800334c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return 1;
 8003350:	2301      	movs	r3, #1
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <_kill>:

int _kill(int pid, int sig)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003366:	f009 fd2d 	bl	800cdc4 <__errno>
 800336a:	4603      	mov	r3, r0
 800336c:	2216      	movs	r2, #22
 800336e:	601a      	str	r2, [r3, #0]
  return -1;
 8003370:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <_exit>:

void _exit (int status)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003384:	f04f 31ff 	mov.w	r1, #4294967295
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ffe7 	bl	800335c <_kill>
  while (1) {}    /* Make sure we hang here */
 800338e:	bf00      	nop
 8003390:	e7fd      	b.n	800338e <_exit+0x12>

08003392 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b086      	sub	sp, #24
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	e00a      	b.n	80033ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033a4:	f3af 8000 	nop.w
 80033a8:	4601      	mov	r1, r0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	60ba      	str	r2, [r7, #8]
 80033b0:	b2ca      	uxtb	r2, r1
 80033b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	3301      	adds	r3, #1
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	429a      	cmp	r2, r3
 80033c0:	dbf0      	blt.n	80033a4 <_read+0x12>
  }

  return len;
 80033c2:	687b      	ldr	r3, [r7, #4]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	e009      	b.n	80033f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	60ba      	str	r2, [r7, #8]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	3301      	adds	r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	dbf1      	blt.n	80033de <_write+0x12>
  }
  return len;
 80033fa:	687b      	ldr	r3, [r7, #4]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_close>:

int _close(int file)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800342c:	605a      	str	r2, [r3, #4]
  return 0;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <_isatty>:

int _isatty(int file)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003444:	2301      	movs	r3, #1
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003474:	4a14      	ldr	r2, [pc, #80]	@ (80034c8 <_sbrk+0x5c>)
 8003476:	4b15      	ldr	r3, [pc, #84]	@ (80034cc <_sbrk+0x60>)
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003480:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <_sbrk+0x64>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003488:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <_sbrk+0x64>)
 800348a:	4a12      	ldr	r2, [pc, #72]	@ (80034d4 <_sbrk+0x68>)
 800348c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800348e:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <_sbrk+0x64>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	429a      	cmp	r2, r3
 800349a:	d207      	bcs.n	80034ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800349c:	f009 fc92 	bl	800cdc4 <__errno>
 80034a0:	4603      	mov	r3, r0
 80034a2:	220c      	movs	r2, #12
 80034a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
 80034aa:	e009      	b.n	80034c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034ac:	4b08      	ldr	r3, [pc, #32]	@ (80034d0 <_sbrk+0x64>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034b2:	4b07      	ldr	r3, [pc, #28]	@ (80034d0 <_sbrk+0x64>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	4a05      	ldr	r2, [pc, #20]	@ (80034d0 <_sbrk+0x64>)
 80034bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034be:	68fb      	ldr	r3, [r7, #12]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20003000 	.word	0x20003000
 80034cc:	00000400 	.word	0x00000400
 80034d0:	200005e8 	.word	0x200005e8
 80034d4:	20000f10 	.word	0x20000f10

080034d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80034dc:	4b22      	ldr	r3, [pc, #136]	@ (8003568 <SystemInit+0x90>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e2:	4a21      	ldr	r2, [pc, #132]	@ (8003568 <SystemInit+0x90>)
 80034e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80034ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80034fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003500:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003504:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003510:	4b16      	ldr	r3, [pc, #88]	@ (800356c <SystemInit+0x94>)
 8003512:	4013      	ands	r3, r2
 8003514:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800351a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800351e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003522:	f023 0305 	bic.w	r3, r3, #5
 8003526:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800352a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800352e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003532:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003536:	f023 0301 	bic.w	r3, r3, #1
 800353a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800353e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003542:	4a0b      	ldr	r2, [pc, #44]	@ (8003570 <SystemInit+0x98>)
 8003544:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003550:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003554:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800355a:	2200      	movs	r2, #0
 800355c:	619a      	str	r2, [r3, #24]
}
 800355e:	bf00      	nop
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00
 800356c:	faf6fefb 	.word	0xfaf6fefb
 8003570:	22041000 	.word	0x22041000

08003574 <CopyDataInit>:
 8003574:	58d4      	ldr	r4, [r2, r3]
 8003576:	50c4      	str	r4, [r0, r3]
 8003578:	3304      	adds	r3, #4

0800357a <LoopCopyDataInit>:
 800357a:	18c4      	adds	r4, r0, r3
 800357c:	428c      	cmp	r4, r1
 800357e:	d3f9      	bcc.n	8003574 <CopyDataInit>
 8003580:	4770      	bx	lr

08003582 <FillZerobss>:
 8003582:	6003      	str	r3, [r0, #0]
 8003584:	3004      	adds	r0, #4

08003586 <LoopFillZerobss>:
 8003586:	4288      	cmp	r0, r1
 8003588:	d3fb      	bcc.n	8003582 <FillZerobss>
 800358a:	4770      	bx	lr

0800358c <Reset_Handler>:
 800358c:	480c      	ldr	r0, [pc, #48]	@ (80035c0 <LoopForever+0x2>)
 800358e:	4685      	mov	sp, r0
 8003590:	f7ff ffa2 	bl	80034d8 <SystemInit>
 8003594:	480b      	ldr	r0, [pc, #44]	@ (80035c4 <LoopForever+0x6>)
 8003596:	490c      	ldr	r1, [pc, #48]	@ (80035c8 <LoopForever+0xa>)
 8003598:	4a0c      	ldr	r2, [pc, #48]	@ (80035cc <LoopForever+0xe>)
 800359a:	2300      	movs	r3, #0
 800359c:	f7ff ffed 	bl	800357a <LoopCopyDataInit>
 80035a0:	480b      	ldr	r0, [pc, #44]	@ (80035d0 <LoopForever+0x12>)
 80035a2:	490c      	ldr	r1, [pc, #48]	@ (80035d4 <LoopForever+0x16>)
 80035a4:	4a0c      	ldr	r2, [pc, #48]	@ (80035d8 <LoopForever+0x1a>)
 80035a6:	2300      	movs	r3, #0
 80035a8:	f7ff ffe7 	bl	800357a <LoopCopyDataInit>
 80035ac:	480b      	ldr	r0, [pc, #44]	@ (80035dc <LoopForever+0x1e>)
 80035ae:	490c      	ldr	r1, [pc, #48]	@ (80035e0 <LoopForever+0x22>)
 80035b0:	2300      	movs	r3, #0
 80035b2:	f7ff ffe8 	bl	8003586 <LoopFillZerobss>
 80035b6:	f009 fc0b 	bl	800cdd0 <__libc_init_array>
 80035ba:	f7fe feef 	bl	800239c <main>

080035be <LoopForever>:
 80035be:	e7fe      	b.n	80035be <LoopForever>
 80035c0:	20003000 	.word	0x20003000
 80035c4:	20000008 	.word	0x20000008
 80035c8:	20000200 	.word	0x20000200
 80035cc:	0800fcb0 	.word	0x0800fcb0
 80035d0:	200301e4 	.word	0x200301e4
 80035d4:	20030a67 	.word	0x20030a67
 80035d8:	0800feee 	.word	0x0800feee
 80035dc:	2000024c 	.word	0x2000024c
 80035e0:	20000f0c 	.word	0x20000f0c

080035e4 <AES2_IRQHandler>:
 80035e4:	e7fe      	b.n	80035e4 <AES2_IRQHandler>

080035e6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af04      	add	r7, sp, #16
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	9302      	str	r3, [sp, #8]
 8003604:	2301      	movs	r3, #1
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	1dfb      	adds	r3, r7, #7
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2301      	movs	r3, #1
 800360e:	2200      	movs	r2, #0
 8003610:	2178      	movs	r1, #120	@ 0x78
 8003612:	4803      	ldr	r0, [pc, #12]	@ (8003620 <ssd1306_WriteCommand+0x2c>)
 8003614:	f002 f9cc 	bl	80059b0 <HAL_I2C_Mem_Write>
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200003c0 	.word	0x200003c0

08003624 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af04      	add	r7, sp, #16
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	b29b      	uxth	r3, r3
 8003632:	f04f 32ff 	mov.w	r2, #4294967295
 8003636:	9202      	str	r2, [sp, #8]
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2301      	movs	r3, #1
 8003640:	2240      	movs	r2, #64	@ 0x40
 8003642:	2178      	movs	r1, #120	@ 0x78
 8003644:	4803      	ldr	r0, [pc, #12]	@ (8003654 <ssd1306_WriteData+0x30>)
 8003646:	f002 f9b3 	bl	80059b0 <HAL_I2C_Mem_Write>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	200003c0 	.word	0x200003c0

08003658 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800365c:	f7ff ffc3 	bl	80035e6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003660:	2064      	movs	r0, #100	@ 0x64
 8003662:	f7fd ff52 	bl	800150a <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003666:	2000      	movs	r0, #0
 8003668:	f000 f9d6 	bl	8003a18 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800366c:	2020      	movs	r0, #32
 800366e:	f7ff ffc1 	bl	80035f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003672:	2000      	movs	r0, #0
 8003674:	f7ff ffbe 	bl	80035f4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003678:	20b0      	movs	r0, #176	@ 0xb0
 800367a:	f7ff ffbb 	bl	80035f4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800367e:	20c8      	movs	r0, #200	@ 0xc8
 8003680:	f7ff ffb8 	bl	80035f4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003684:	2000      	movs	r0, #0
 8003686:	f7ff ffb5 	bl	80035f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800368a:	2010      	movs	r0, #16
 800368c:	f7ff ffb2 	bl	80035f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003690:	2040      	movs	r0, #64	@ 0x40
 8003692:	f7ff ffaf 	bl	80035f4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003696:	20ff      	movs	r0, #255	@ 0xff
 8003698:	f000 f9aa 	bl	80039f0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800369c:	20a1      	movs	r0, #161	@ 0xa1
 800369e:	f7ff ffa9 	bl	80035f4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80036a2:	20a6      	movs	r0, #166	@ 0xa6
 80036a4:	f7ff ffa6 	bl	80035f4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80036a8:	20a8      	movs	r0, #168	@ 0xa8
 80036aa:	f7ff ffa3 	bl	80035f4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80036ae:	203f      	movs	r0, #63	@ 0x3f
 80036b0:	f7ff ffa0 	bl	80035f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80036b4:	20a4      	movs	r0, #164	@ 0xa4
 80036b6:	f7ff ff9d 	bl	80035f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80036ba:	20d3      	movs	r0, #211	@ 0xd3
 80036bc:	f7ff ff9a 	bl	80035f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80036c0:	2000      	movs	r0, #0
 80036c2:	f7ff ff97 	bl	80035f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80036c6:	20d5      	movs	r0, #213	@ 0xd5
 80036c8:	f7ff ff94 	bl	80035f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80036cc:	20f0      	movs	r0, #240	@ 0xf0
 80036ce:	f7ff ff91 	bl	80035f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80036d2:	20d9      	movs	r0, #217	@ 0xd9
 80036d4:	f7ff ff8e 	bl	80035f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80036d8:	2022      	movs	r0, #34	@ 0x22
 80036da:	f7ff ff8b 	bl	80035f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80036de:	20da      	movs	r0, #218	@ 0xda
 80036e0:	f7ff ff88 	bl	80035f4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80036e4:	2012      	movs	r0, #18
 80036e6:	f7ff ff85 	bl	80035f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80036ea:	20db      	movs	r0, #219	@ 0xdb
 80036ec:	f7ff ff82 	bl	80035f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80036f0:	2020      	movs	r0, #32
 80036f2:	f7ff ff7f 	bl	80035f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80036f6:	208d      	movs	r0, #141	@ 0x8d
 80036f8:	f7ff ff7c 	bl	80035f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80036fc:	2014      	movs	r0, #20
 80036fe:	f7ff ff79 	bl	80035f4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003702:	2001      	movs	r0, #1
 8003704:	f000 f988 	bl	8003a18 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003708:	2000      	movs	r0, #0
 800370a:	f000 f80f 	bl	800372c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800370e:	f000 f825 	bl	800375c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003712:	4b05      	ldr	r3, [pc, #20]	@ (8003728 <ssd1306_Init+0xd0>)
 8003714:	2200      	movs	r2, #0
 8003716:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003718:	4b03      	ldr	r3, [pc, #12]	@ (8003728 <ssd1306_Init+0xd0>)
 800371a:	2200      	movs	r2, #0
 800371c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800371e:	4b02      	ldr	r3, [pc, #8]	@ (8003728 <ssd1306_Init+0xd0>)
 8003720:	2201      	movs	r2, #1
 8003722:	711a      	strb	r2, [r3, #4]
}
 8003724:	bf00      	nop
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200009ec 	.word	0x200009ec

0800372c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <ssd1306_Fill+0x14>
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <ssd1306_Fill+0x16>
 8003740:	23ff      	movs	r3, #255	@ 0xff
 8003742:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003746:	4619      	mov	r1, r3
 8003748:	4803      	ldr	r0, [pc, #12]	@ (8003758 <ssd1306_Fill+0x2c>)
 800374a:	f009 fae8 	bl	800cd1e <memset>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	200005ec 	.word	0x200005ec

0800375c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003762:	2300      	movs	r3, #0
 8003764:	71fb      	strb	r3, [r7, #7]
 8003766:	e016      	b.n	8003796 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	3b50      	subs	r3, #80	@ 0x50
 800376c:	b2db      	uxtb	r3, r3
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff ff40 	bl	80035f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003774:	2000      	movs	r0, #0
 8003776:	f7ff ff3d 	bl	80035f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800377a:	2010      	movs	r0, #16
 800377c:	f7ff ff3a 	bl	80035f4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	01db      	lsls	r3, r3, #7
 8003784:	4a08      	ldr	r2, [pc, #32]	@ (80037a8 <ssd1306_UpdateScreen+0x4c>)
 8003786:	4413      	add	r3, r2
 8003788:	2180      	movs	r1, #128	@ 0x80
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff ff4a 	bl	8003624 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	3301      	adds	r3, #1
 8003794:	71fb      	strb	r3, [r7, #7]
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	2b07      	cmp	r3, #7
 800379a:	d9e5      	bls.n	8003768 <ssd1306_UpdateScreen+0xc>
    }
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200005ec 	.word	0x200005ec

080037ac <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	71fb      	strb	r3, [r7, #7]
 80037b6:	460b      	mov	r3, r1
 80037b8:	71bb      	strb	r3, [r7, #6]
 80037ba:	4613      	mov	r3, r2
 80037bc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	db3d      	blt.n	8003842 <ssd1306_DrawPixel+0x96>
 80037c6:	79bb      	ldrb	r3, [r7, #6]
 80037c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80037ca:	d83a      	bhi.n	8003842 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80037cc:	797b      	ldrb	r3, [r7, #5]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d11a      	bne.n	8003808 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80037d2:	79fa      	ldrb	r2, [r7, #7]
 80037d4:	79bb      	ldrb	r3, [r7, #6]
 80037d6:	08db      	lsrs	r3, r3, #3
 80037d8:	b2d8      	uxtb	r0, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	01db      	lsls	r3, r3, #7
 80037de:	4413      	add	r3, r2
 80037e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003850 <ssd1306_DrawPixel+0xa4>)
 80037e2:	5cd3      	ldrb	r3, [r2, r3]
 80037e4:	b25a      	sxtb	r2, r3
 80037e6:	79bb      	ldrb	r3, [r7, #6]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	2101      	movs	r1, #1
 80037ee:	fa01 f303 	lsl.w	r3, r1, r3
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	4313      	orrs	r3, r2
 80037f6:	b259      	sxtb	r1, r3
 80037f8:	79fa      	ldrb	r2, [r7, #7]
 80037fa:	4603      	mov	r3, r0
 80037fc:	01db      	lsls	r3, r3, #7
 80037fe:	4413      	add	r3, r2
 8003800:	b2c9      	uxtb	r1, r1
 8003802:	4a13      	ldr	r2, [pc, #76]	@ (8003850 <ssd1306_DrawPixel+0xa4>)
 8003804:	54d1      	strb	r1, [r2, r3]
 8003806:	e01d      	b.n	8003844 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003808:	79fa      	ldrb	r2, [r7, #7]
 800380a:	79bb      	ldrb	r3, [r7, #6]
 800380c:	08db      	lsrs	r3, r3, #3
 800380e:	b2d8      	uxtb	r0, r3
 8003810:	4603      	mov	r3, r0
 8003812:	01db      	lsls	r3, r3, #7
 8003814:	4413      	add	r3, r2
 8003816:	4a0e      	ldr	r2, [pc, #56]	@ (8003850 <ssd1306_DrawPixel+0xa4>)
 8003818:	5cd3      	ldrb	r3, [r2, r3]
 800381a:	b25a      	sxtb	r2, r3
 800381c:	79bb      	ldrb	r3, [r7, #6]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	2101      	movs	r1, #1
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	b25b      	sxtb	r3, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	b25b      	sxtb	r3, r3
 800382e:	4013      	ands	r3, r2
 8003830:	b259      	sxtb	r1, r3
 8003832:	79fa      	ldrb	r2, [r7, #7]
 8003834:	4603      	mov	r3, r0
 8003836:	01db      	lsls	r3, r3, #7
 8003838:	4413      	add	r3, r2
 800383a:	b2c9      	uxtb	r1, r1
 800383c:	4a04      	ldr	r2, [pc, #16]	@ (8003850 <ssd1306_DrawPixel+0xa4>)
 800383e:	54d1      	strb	r1, [r2, r3]
 8003840:	e000      	b.n	8003844 <ssd1306_DrawPixel+0x98>
        return;
 8003842:	bf00      	nop
    }
}
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	200005ec 	.word	0x200005ec

08003854 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b089      	sub	sp, #36	@ 0x24
 8003858:	af00      	add	r7, sp, #0
 800385a:	4604      	mov	r4, r0
 800385c:	4638      	mov	r0, r7
 800385e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003862:	4623      	mov	r3, r4
 8003864:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b1f      	cmp	r3, #31
 800386a:	d902      	bls.n	8003872 <ssd1306_WriteChar+0x1e>
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b7e      	cmp	r3, #126	@ 0x7e
 8003870:	d901      	bls.n	8003876 <ssd1306_WriteChar+0x22>
        return 0;
 8003872:	2300      	movs	r3, #0
 8003874:	e077      	b.n	8003966 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8003876:	4b3e      	ldr	r3, [pc, #248]	@ (8003970 <ssd1306_WriteChar+0x11c>)
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	783b      	ldrb	r3, [r7, #0]
 800387e:	4413      	add	r3, r2
 8003880:	2b80      	cmp	r3, #128	@ 0x80
 8003882:	dc06      	bgt.n	8003892 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003884:	4b3a      	ldr	r3, [pc, #232]	@ (8003970 <ssd1306_WriteChar+0x11c>)
 8003886:	885b      	ldrh	r3, [r3, #2]
 8003888:	461a      	mov	r2, r3
 800388a:	787b      	ldrb	r3, [r7, #1]
 800388c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800388e:	2b40      	cmp	r3, #64	@ 0x40
 8003890:	dd01      	ble.n	8003896 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8003892:	2300      	movs	r3, #0
 8003894:	e067      	b.n	8003966 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	e04e      	b.n	800393a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	3b20      	subs	r3, #32
 80038a2:	7879      	ldrb	r1, [r7, #1]
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	4619      	mov	r1, r3
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	440b      	add	r3, r1
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	e036      	b.n	800392a <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d013      	beq.n	80038f4 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80038cc:	4b28      	ldr	r3, [pc, #160]	@ (8003970 <ssd1306_WriteChar+0x11c>)
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	b2d8      	uxtb	r0, r3
 80038da:	4b25      	ldr	r3, [pc, #148]	@ (8003970 <ssd1306_WriteChar+0x11c>)
 80038dc:	885b      	ldrh	r3, [r3, #2]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80038ec:	4619      	mov	r1, r3
 80038ee:	f7ff ff5d 	bl	80037ac <ssd1306_DrawPixel>
 80038f2:	e017      	b.n	8003924 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80038f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003970 <ssd1306_WriteChar+0x11c>)
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	4413      	add	r3, r2
 8003900:	b2d8      	uxtb	r0, r3
 8003902:	4b1b      	ldr	r3, [pc, #108]	@ (8003970 <ssd1306_WriteChar+0x11c>)
 8003904:	885b      	ldrh	r3, [r3, #2]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	4413      	add	r3, r2
 800390e:	b2d9      	uxtb	r1, r3
 8003910:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	f7ff ff44 	bl	80037ac <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	3301      	adds	r3, #1
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	783b      	ldrb	r3, [r7, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	4293      	cmp	r3, r2
 8003932:	d3c3      	bcc.n	80038bc <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	3301      	adds	r3, #1
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	787b      	ldrb	r3, [r7, #1]
 800393c:	461a      	mov	r2, r3
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4293      	cmp	r3, r2
 8003942:	d3ab      	bcc.n	800389c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <ssd1306_WriteChar+0x11c>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	2a00      	cmp	r2, #0
 800394c:	d005      	beq.n	800395a <ssd1306_WriteChar+0x106>
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	7bfa      	ldrb	r2, [r7, #15]
 8003952:	3a20      	subs	r2, #32
 8003954:	440a      	add	r2, r1
 8003956:	7812      	ldrb	r2, [r2, #0]
 8003958:	e000      	b.n	800395c <ssd1306_WriteChar+0x108>
 800395a:	783a      	ldrb	r2, [r7, #0]
 800395c:	4413      	add	r3, r2
 800395e:	b29a      	uxth	r2, r3
 8003960:	4b03      	ldr	r3, [pc, #12]	@ (8003970 <ssd1306_WriteChar+0x11c>)
 8003962:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003964:	7bfb      	ldrb	r3, [r7, #15]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3724      	adds	r7, #36	@ 0x24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd90      	pop	{r4, r7, pc}
 800396e:	bf00      	nop
 8003970:	200009ec 	.word	0x200009ec

08003974 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	4638      	mov	r0, r7
 800397e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003982:	e013      	b.n	80039ac <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	7818      	ldrb	r0, [r3, #0]
 8003988:	7e3b      	ldrb	r3, [r7, #24]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	463b      	mov	r3, r7
 800398e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003990:	f7ff ff60 	bl	8003854 <ssd1306_WriteChar>
 8003994:	4603      	mov	r3, r0
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d002      	beq.n	80039a6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	e008      	b.n	80039b8 <ssd1306_WriteString+0x44>
        }
        str++;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3301      	adds	r3, #1
 80039aa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e7      	bne.n	8003984 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	781b      	ldrb	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	460a      	mov	r2, r1
 80039ca:	71fb      	strb	r3, [r7, #7]
 80039cc:	4613      	mov	r3, r2
 80039ce:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <ssd1306_SetCursor+0x2c>)
 80039d6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80039d8:	79bb      	ldrb	r3, [r7, #6]
 80039da:	b29a      	uxth	r2, r3
 80039dc:	4b03      	ldr	r3, [pc, #12]	@ (80039ec <ssd1306_SetCursor+0x2c>)
 80039de:	805a      	strh	r2, [r3, #2]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	200009ec 	.word	0x200009ec

080039f0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80039fa:	2381      	movs	r3, #129	@ 0x81
 80039fc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fdf7 	bl	80035f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fdf3 	bl	80035f4 <ssd1306_WriteCommand>
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003a28:	23af      	movs	r3, #175	@ 0xaf
 8003a2a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003a2c:	4b08      	ldr	r3, [pc, #32]	@ (8003a50 <ssd1306_SetDisplayOn+0x38>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	715a      	strb	r2, [r3, #5]
 8003a32:	e004      	b.n	8003a3e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003a34:	23ae      	movs	r3, #174	@ 0xae
 8003a36:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003a38:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <ssd1306_SetDisplayOn+0x38>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fdd7 	bl	80035f4 <ssd1306_WriteCommand>
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	200009ec 	.word	0x200009ec

08003a54 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003a58:	4b05      	ldr	r3, [pc, #20]	@ (8003a70 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a04      	ldr	r2, [pc, #16]	@ (8003a70 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	6053      	str	r3, [r2, #4]
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e0042000 	.word	0xe0042000

08003a74 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003a78:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4a04      	ldr	r2, [pc, #16]	@ (8003a90 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 8003a7e:	f023 0302 	bic.w	r3, r3, #2
 8003a82:	6053      	str	r3, [r2, #4]
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	e0042000 	.word	0xe0042000

08003a94 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003a98:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a04      	ldr	r2, [pc, #16]	@ (8003ab0 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8003a9e:	f023 0304 	bic.w	r3, r3, #4
 8003aa2:	6053      	str	r3, [r2, #4]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e0042000 	.word	0xe0042000

08003ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003abe:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <HAL_Init+0x3c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8003af0 <HAL_Init+0x3c>)
 8003ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aca:	2003      	movs	r0, #3
 8003acc:	f001 f9c2 	bl	8004e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ad0:	200f      	movs	r0, #15
 8003ad2:	f000 f80f 	bl	8003af4 <HAL_InitTick>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	71fb      	strb	r3, [r7, #7]
 8003ae0:	e001      	b.n	8003ae6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ae2:	f7ff fa52 	bl	8002f8a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	58004000 	.word	0x58004000

08003af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003b00:	4b17      	ldr	r3, [pc, #92]	@ (8003b60 <HAL_InitTick+0x6c>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d024      	beq.n	8003b52 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b08:	f003 fc5c 	bl	80073c4 <HAL_RCC_GetHCLKFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <HAL_InitTick+0x6c>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	4619      	mov	r1, r3
 8003b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b18:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 f9d8 	bl	8004ed6 <HAL_SYSTICK_Config>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10f      	bne.n	8003b4c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b0f      	cmp	r3, #15
 8003b30:	d809      	bhi.n	8003b46 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b32:	2200      	movs	r2, #0
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3a:	f001 f996 	bl	8004e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b3e:	4a09      	ldr	r2, [pc, #36]	@ (8003b64 <HAL_InitTick+0x70>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e007      	b.n	8003b56 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
 8003b4a:	e004      	b.n	8003b56 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	e001      	b.n	8003b56 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	2000001c 	.word	0x2000001c
 8003b64:	20000018 	.word	0x20000018

08003b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_IncTick+0x20>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <HAL_IncTick+0x24>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	4a04      	ldr	r2, [pc, #16]	@ (8003b8c <HAL_IncTick+0x24>)
 8003b7a:	6013      	str	r3, [r2, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	2000001c 	.word	0x2000001c
 8003b8c:	200009f4 	.word	0x200009f4

08003b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return uwTick;
 8003b94:	4b03      	ldr	r3, [pc, #12]	@ (8003ba4 <HAL_GetTick+0x14>)
 8003b96:	681b      	ldr	r3, [r3, #0]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	200009f4 	.word	0x200009f4

08003ba8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003bac:	4b03      	ldr	r3, [pc, #12]	@ (8003bbc <HAL_GetTickPrio+0x14>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20000018 	.word	0x20000018

08003bc0 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	@ (8003bd4 <HAL_GetTickFreq+0x14>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	2000001c 	.word	0x2000001c

08003bd8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <HAL_SuspendTick+0x1c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a04      	ldr	r2, [pc, #16]	@ (8003bf4 <HAL_SuspendTick+0x1c>)
 8003be2:	f023 0302 	bic.w	r3, r3, #2
 8003be6:	6013      	str	r3, [r2, #0]
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000e010 	.word	0xe000e010

08003bf8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003bfc:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <HAL_ResumeTick+0x1c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a04      	ldr	r2, [pc, #16]	@ (8003c14 <HAL_ResumeTick+0x1c>)
 8003c02:	f043 0302 	orr.w	r3, r3, #2
 8003c06:	6013      	str	r3, [r2, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000e010 	.word	0xe000e010

08003c18 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003c1c:	f7ff ff1a 	bl	8003a54 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003c20:	bf00      	nop
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003c28:	f7ff ff24 	bl	8003a74 <LL_DBGMCU_DisableDBGStopMode>
}
 8003c2c:	bf00      	nop
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003c34:	f7ff ff2e 	bl	8003a94 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003c38:	bf00      	nop
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	609a      	str	r2, [r3, #8]
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2107      	movs	r1, #7
 8003c96:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	401a      	ands	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	431a      	orrs	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003cb0:	bf00      	nop
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003cd4:	2300      	movs	r3, #0
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	210f      	movs	r1, #15
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	401a      	ands	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	0e9b      	lsrs	r3, r3, #26
 8003d06:	f003 010f 	and.w	r1, r3, #15
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	fa01 f303 	lsl.w	r3, r1, r3
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	629a      	str	r2, [r3, #40]	@ 0x28

  MODIFY_REG(*preg,
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_ADC_REG_SetSequencerChAdd>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_ADC_REG_SetSequencerChRem>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d60:	43db      	mvns	r3, r3
 8003d62:	401a      	ands	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0303 	and.w	r3, r3, #3
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	43db      	mvns	r3, r3
 8003da6:	401a      	ands	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	0219      	lsls	r1, r3, #8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	400b      	ands	r3, r1
 8003db0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003db4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003db8:	431a      	orrs	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003dda:	f023 0317 	bic.w	r3, r3, #23
 8003dde:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e06:	d101      	bne.n	8003e0c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e2a:	f023 0317 	bic.w	r3, r3, #23
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e52:	f023 0317 	bic.w	r3, r3, #23
 8003e56:	f043 0202 	orr.w	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <LL_ADC_IsEnabled+0x18>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <LL_ADC_IsEnabled+0x1a>
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d101      	bne.n	8003ea8 <LL_ADC_IsDisableOngoing+0x18>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <LL_ADC_IsDisableOngoing+0x1a>
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ec6:	f023 0317 	bic.w	r3, r3, #23
 8003eca:	f043 0204 	orr.w	r2, r3, #4
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003eee:	f023 0317 	bic.w	r3, r3, #23
 8003ef2:	f043 0210 	orr.w	r2, r3, #16
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d101      	bne.n	8003f1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60fb      	str	r3, [r7, #12]
#if defined(ADC_SUPPORT_2_5_MSPS)
  uint32_t tmpCFGR2 = 0UL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e16b      	b.n	8004226 <HAL_ADC_Init+0x2fa>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
  
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff f825 	bl	8002fac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff3c 	bl	8003df2 <LL_ADC_IsInternalRegulatorEnabled>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d115      	bne.n	8003fac <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff20 	bl	8003dca <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f8a:	4b9c      	ldr	r3, [pc, #624]	@ (80041fc <HAL_ADC_Init+0x2d0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	099b      	lsrs	r3, r3, #6
 8003f90:	4a9b      	ldr	r2, [pc, #620]	@ (8004200 <HAL_ADC_Init+0x2d4>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	099b      	lsrs	r3, r3, #6
 8003f98:	3301      	adds	r3, #1
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f9e:	e002      	b.n	8003fa6 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f9      	bne.n	8003fa0 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ff1e 	bl	8003df2 <LL_ADC_IsInternalRegulatorEnabled>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10d      	bne.n	8003fd8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc0:	f043 0210 	orr.w	r2, r3, #16
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fcc:	f043 0201 	orr.w	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	64da      	str	r2, [r3, #76]	@ 0x4c

    tmp_hal_status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff92 	bl	8003f06 <LL_ADC_REG_IsConversionOngoing>
 8003fe2:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f040 8111 	bne.w	8004214 <HAL_ADC_Init+0x2e8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f040 810d 	bne.w	8004214 <HAL_ADC_Init+0x2e8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ffe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004002:	f043 0202 	orr.w	r2, r3, #2
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	649a      	str	r2, [r3, #72]	@ 0x48
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff ff2b 	bl	8003e6a <LL_ADC_IsEnabled>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d138      	bne.n	800408c <HAL_ADC_Init+0x160>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f023 0118 	bic.w	r1, r3, #24
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	60da      	str	r2, [r3, #12]
      /*  - oversampling enable                                               */
      /*  - oversampling ratio                                                */
      /*  - oversampling shift                                                */
      /*  - oversampling discontinuous mode (triggered mode)                  */
      /*  - trigger frequency mode                                            */
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                    hadc->Init.TriggerFrequencyMode
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800403c:	4313      	orrs	r3, r2
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
                    );
      
      MODIFY_REG(hadc->Instance->CFGR2,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	430a      	orrs	r2, r1
 8004056:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_LFTRIG     ,
                 tmpCFGR2              );
      
      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004060:	d014      	beq.n	800408c <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406a:	d00f      	beq.n	800408c <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004070:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004074:	d00a      	beq.n	800408c <HAL_ADC_Init+0x160>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8004076:	4b63      	ldr	r3, [pc, #396]	@ (8004204 <HAL_ADC_Init+0x2d8>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004086:	495f      	ldr	r1, [pc, #380]	@ (8004204 <HAL_ADC_Init+0x2d8>)
 8004088:	4313      	orrs	r3, r2
 800408a:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	7e1b      	ldrb	r3, [r3, #24]
 8004090:	039a      	lsls	r2, r3, #14
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	7e5b      	ldrb	r3, [r3, #25]
 8004096:	03db      	lsls	r3, r3, #15
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004098:	431a      	orrs	r2, r3
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7e9b      	ldrb	r3, [r3, #26]
 800409e:	035b      	lsls	r3, r3, #13
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80040a0:	4313      	orrs	r3, r2
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040a6:	2a00      	cmp	r2, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_ADC_Init+0x184>
 80040aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040ae:	e000      	b.n	80040b2 <HAL_ADC_Init+0x186>
 80040b0:	2200      	movs	r2, #0
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80040b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                            |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80040b8:	431a      	orrs	r2, r3
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	da04      	bge.n	80040cc <HAL_ADC_Init+0x1a0>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040ca:	e001      	b.n	80040d0 <HAL_ADC_Init+0x1a4>
 80040cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                hadc->Init.DataAlign                                            |
 80040d0:	431a      	orrs	r2, r3
                ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80040d8:	005b      	lsls	r3, r3, #1
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80040da:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d114      	bne.n	8004116 <HAL_ADC_Init+0x1ea>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7e9b      	ldrb	r3, [r3, #26]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d104      	bne.n	80040fe <HAL_ADC_Init+0x1d2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR |= ADC_CFGR1_DISCEN;
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	e00b      	b.n	8004116 <HAL_ADC_Init+0x1ea>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004102:	f043 0220 	orr.w	r2, r3, #32
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	649a      	str	r2, [r3, #72]	@ 0x48
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410e:	f043 0201 	orr.w	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_ADC_Init+0x206>
    {
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge );
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800412a:	4313      	orrs	r3, r2
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	4b33      	ldr	r3, [pc, #204]	@ (8004208 <HAL_ADC_Init+0x2dc>)
 800413a:	4013      	ands	r3, r2
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	69b9      	ldr	r1, [r7, #24]
 8004142:	430b      	orrs	r3, r1
 8004144:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_SCANDIR   |
               ADC_CFGR1_DMACFG,
               tmpCFGR);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414e:	461a      	mov	r2, r3
 8004150:	2100      	movs	r1, #0
 8004152:	f7ff fd94 	bl	8003c7e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415e:	461a      	mov	r2, r3
 8004160:	492a      	ldr	r1, [pc, #168]	@ (800420c <HAL_ADC_Init+0x2e0>)
 8004162:	f7ff fd8c 	bl	8003c7e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d108      	bne.n	8004180 <HAL_ADC_Init+0x254>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f062 020f 	orn	r2, r2, #15
 800417c:	629a      	str	r2, [r3, #40]	@ 0x28
 800417e:	e017      	b.n	80041b0 <HAL_ADC_Init+0x284>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004188:	d112      	bne.n	80041b0 <HAL_ADC_Init+0x284>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	3b01      	subs	r3, #1
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	f003 031c 	and.w	r3, r3, #28
 800419c:	f06f 020f 	mvn.w	r2, #15
 80041a0:	fa02 f103 	lsl.w	r1, r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR').                                  */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	4b16      	ldr	r3, [pc, #88]	@ (8004210 <HAL_ADC_Init+0x2e4>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d10b      	bne.n	80041d8 <HAL_ADC_Init+0x2ac>
         == tmpCFGR)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ca:	f023 0303 	bic.w	r3, r3, #3
 80041ce:	f043 0201 	orr.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80041d6:	e025      	b.n	8004224 <HAL_ADC_Init+0x2f8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041dc:	f023 0312 	bic.w	r3, r3, #18
 80041e0:	f043 0210 	orr.w	r2, r3, #16
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	649a      	str	r2, [r3, #72]	@ 0x48
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ec:	f043 0201 	orr.w	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	64da      	str	r2, [r3, #76]	@ 0x4c

      tmp_hal_status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80041f8:	e014      	b.n	8004224 <HAL_ADC_Init+0x2f8>
 80041fa:	bf00      	nop
 80041fc:	20000014 	.word	0x20000014
 8004200:	053e2d63 	.word	0x053e2d63
 8004204:	40012700 	.word	0x40012700
 8004208:	ffde0219 	.word	0xffde0219
 800420c:	07ffff04 	.word	0x07ffff04
 8004210:	833fffe7 	.word	0x833fffe7
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004218:	f043 0210 	orr.w	r2, r3, #16
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	649a      	str	r2, [r3, #72]	@ 0x48

    tmp_hal_status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004224:	7ffb      	ldrb	r3, [r7, #31]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop

08004230 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_ADC_Stop+0x16>
 8004242:	2302      	movs	r3, #2
 8004244:	e023      	b.n	800428e <HAL_ADC_Stop+0x5e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 800424e:	2101      	movs	r1, #1
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fb07 	bl	8004864 <ADC_ConversionStop>
 8004256:	4603      	mov	r3, r0
 8004258:	73fb      	strb	r3, [r7, #15]
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d111      	bne.n	8004284 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fbbd 	bl	80049e0 <ADC_Disable>
 8004266:	4603      	mov	r3, r0
 8004268:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return tmp_hal_status;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fe2c 	bl	8003f06 <LL_ADC_REG_IsConversionOngoing>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d15a      	bne.n	800436a <HAL_ADC_Start_DMA+0xd2>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_ADC_Start_DMA+0x2a>
 80042be:	2302      	movs	r3, #2
 80042c0:	e056      	b.n	8004370 <HAL_ADC_Start_DMA+0xd8>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fb0a 	bl	80048e4 <ADC_Enable>
 80042d0:	4603      	mov	r3, r0
 80042d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d142      	bne.n	8004360 <HAL_ADC_Start_DMA+0xc8>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	649a      	str	r2, [r3, #72]	@ 0x48
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	64da      	str	r2, [r3, #76]	@ 0x4c
          ADC_CLEAR_ERRORCODE(hadc);
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004378 <HAL_ADC_Start_DMA+0xe0>)
 80042fa:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004300:	4a1e      	ldr	r2, [pc, #120]	@ (800437c <HAL_ADC_Start_DMA+0xe4>)
 8004302:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004308:	4a1d      	ldr	r2, [pc, #116]	@ (8004380 <HAL_ADC_Start_DMA+0xe8>)
 800430a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	221c      	movs	r2, #28
 8004312:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0210 	orr.w	r2, r2, #16
 800432a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	60da      	str	r2, [r3, #12]
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3340      	adds	r3, #64	@ 0x40
 8004346:	4619      	mov	r1, r3
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f000 fe78 	bl	8005040 <HAL_DMA_Start_IT>
 8004350:	4603      	mov	r3, r0
 8004352:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fdac 	bl	8003eb6 <LL_ADC_REG_StartConversion>
 800435e:	e006      	b.n	800436e <HAL_ADC_Start_DMA+0xd6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004368:	e001      	b.n	800436e <HAL_ADC_Start_DMA+0xd6>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800436a:	2302      	movs	r3, #2
 800436c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800436e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	08004a9f 	.word	0x08004a9f
 800437c:	08004b67 	.word	0x08004b67
 8004380:	08004b83 	.word	0x08004b83

08004384 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d017      	beq.n	80043da <HAL_ADC_IRQHandler+0x56>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d012      	beq.n	80043da <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043c4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	649a      	str	r2, [r3, #72]	@ 0x48

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fc06 	bl	8004bde <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2202      	movs	r2, #2
 80043d8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <HAL_ADC_IRQHandler+0x6a>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05d      	beq.n	80044b4 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d058      	beq.n	80044b4 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b00      	cmp	r3, #0
 800440c:	d105      	bne.n	800441a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004412:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fc4c 	bl	8003cbc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d03d      	beq.n	80044a6 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004438:	d035      	beq.n	80044a6 <HAL_ADC_IRQHandler+0x122>
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b08      	cmp	r3, #8
 8004446:	d12e      	bne.n	80044a6 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fd5a 	bl	8003f06 <LL_ADC_REG_IsConversionOngoing>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d11a      	bne.n	800448e <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 020c 	bic.w	r2, r2, #12
 8004466:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800446c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	649a      	str	r2, [r3, #72]	@ 0x48

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004478:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d112      	bne.n	80044a6 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004484:	f043 0201 	orr.w	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	649a      	str	r2, [r3, #72]	@ 0x48
 800448c:	e00b      	b.n	80044a6 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004492:	f043 0210 	orr.w	r2, r3, #16
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	649a      	str	r2, [r3, #72]	@ 0x48

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449e:	f043 0201 	orr.w	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f006 fe0e 	bl	800b0c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	220c      	movs	r2, #12
 80044b2:	601a      	str	r2, [r3, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d011      	beq.n	80044e2 <HAL_ADC_IRQHandler+0x15e>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00c      	beq.n	80044e2 <HAL_ADC_IRQHandler+0x15e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f873 	bl	80045c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2280      	movs	r2, #128	@ 0x80
 80044e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d012      	beq.n	8004512 <HAL_ADC_IRQHandler+0x18e>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00d      	beq.n	8004512 <HAL_ADC_IRQHandler+0x18e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fb57 	bl	8004bb6 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004510:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004518:	2b00      	cmp	r3, #0
 800451a:	d012      	beq.n	8004542 <HAL_ADC_IRQHandler+0x1be>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00d      	beq.n	8004542 <HAL_ADC_IRQHandler+0x1be>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800452a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fb49 	bl	8004bca <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004540:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d02b      	beq.n	80045a4 <HAL_ADC_IRQHandler+0x220>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0310 	and.w	r3, r3, #16
 8004552:	2b00      	cmp	r3, #0
 8004554:	d026      	beq.n	80045a4 <HAL_ADC_IRQHandler+0x220>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <HAL_ADC_IRQHandler+0x1e0>
    {
      overrun_error = 1UL;
 800455e:	2301      	movs	r3, #1
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	e009      	b.n	8004578 <HAL_ADC_IRQHandler+0x1f4>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fc03 	bl	8003d74 <LL_ADC_REG_GetDMATransfer>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_ADC_IRQHandler+0x1f4>
      {
        overrun_error = 1UL;
 8004574:	2301      	movs	r3, #1
 8004576:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10e      	bne.n	800459c <HAL_ADC_IRQHandler+0x218>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004582:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458e:	f043 0202 	orr.w	r2, r3, #2
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	64da      	str	r2, [r3, #76]	@ 0x4c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f81c 	bl	80045d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2210      	movs	r2, #16
 80045a2:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 80045a4:	bf00      	nop
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
#if  defined(ADC_SUPPORT_2_5_MSPS)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(sConfig->SamplingTime));
  
  if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x28>
 800460c:	2302      	movs	r3, #2
 800460e:	e114      	b.n	800483a <HAL_ADC_ConfigChannel+0x252>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fc72 	bl	8003f06 <LL_ADC_REG_IsConversionOngoing>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	f040 80fb 	bne.w	8004820 <HAL_ADC_ConfigChannel+0x238>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b02      	cmp	r3, #2
 8004630:	f000 80b3 	beq.w	800479a <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800463c:	d004      	beq.n	8004648 <HAL_ADC_ConfigChannel+0x60>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004642:	4a80      	ldr	r2, [pc, #512]	@ (8004844 <HAL_ADC_ConfigChannel+0x25c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d108      	bne.n	800465a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f7ff fb67 	bl	8003d26 <LL_ADC_REG_SetSequencerChAdd>
 8004658:	e041      	b.n	80046de <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 031f 	and.w	r3, r3, #31
 8004666:	210f      	movs	r1, #15
 8004668:	fa01 f303 	lsl.w	r3, r1, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	401a      	ands	r2, r3
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004678:	2b00      	cmp	r3, #0
 800467a:	d105      	bne.n	8004688 <HAL_ADC_ConfigChannel+0xa0>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	0e9b      	lsrs	r3, r3, #26
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	e011      	b.n	80046ac <HAL_ADC_ConfigChannel+0xc4>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	fa93 f3a3 	rbit	r3, r3
 8004694:	60fb      	str	r3, [r7, #12]
  return result;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0xbc>
    return 32U;
 80046a0:	2320      	movs	r3, #32
 80046a2:	e003      	b.n	80046ac <HAL_ADC_ConfigChannel+0xc4>
  return __builtin_clz(value);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	fab3 f383 	clz	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	6839      	ldr	r1, [r7, #0]
 80046ae:	6849      	ldr	r1, [r1, #4]
 80046b0:	f001 011f 	and.w	r1, r1, #31
 80046b4:	408b      	lsls	r3, r1
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	651a      	str	r2, [r3, #80]	@ 0x50
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	089b      	lsrs	r3, r3, #2
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d808      	bhi.n	80046de <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	6859      	ldr	r1, [r3, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	f7ff fb02 	bl	8003ce2 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f7ff fb50 	bl	8003d90 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4b54      	ldr	r3, [pc, #336]	@ (8004848 <HAL_ADC_ConfigChannel+0x260>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8099 	beq.w	8004830 <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046fe:	4853      	ldr	r0, [pc, #332]	@ (800484c <HAL_ADC_ConfigChannel+0x264>)
 8004700:	f7ff faaf 	bl	8003c62 <LL_ADC_GetCommonPathInternalCh>
 8004704:	61b8      	str	r0, [r7, #24]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a51      	ldr	r2, [pc, #324]	@ (8004850 <HAL_ADC_ConfigChannel+0x268>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d120      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x16a>
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11b      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x16a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004720:	4619      	mov	r1, r3
 8004722:	484a      	ldr	r0, [pc, #296]	@ (800484c <HAL_ADC_ConfigChannel+0x264>)
 8004724:	f7ff fa8a 	bl	8003c3c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004728:	4b4a      	ldr	r3, [pc, #296]	@ (8004854 <HAL_ADC_ConfigChannel+0x26c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	099b      	lsrs	r3, r3, #6
 800472e:	4a4a      	ldr	r2, [pc, #296]	@ (8004858 <HAL_ADC_ConfigChannel+0x270>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	099b      	lsrs	r3, r3, #6
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	4613      	mov	r3, r2
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 8004742:	e002      	b.n	800474a <HAL_ADC_ConfigChannel+0x162>
          {
            wait_loop_index--;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	3b01      	subs	r3, #1
 8004748:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f9      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x15c>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004750:	e06e      	b.n	8004830 <HAL_ADC_ConfigChannel+0x248>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a41      	ldr	r2, [pc, #260]	@ (800485c <HAL_ADC_ConfigChannel+0x274>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d10c      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x18e>
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d107      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800476c:	4619      	mov	r1, r3
 800476e:	4837      	ldr	r0, [pc, #220]	@ (800484c <HAL_ADC_ConfigChannel+0x264>)
 8004770:	f7ff fa64 	bl	8003c3c <LL_ADC_SetCommonPathInternalCh>
 8004774:	e05c      	b.n	8004830 <HAL_ADC_ConfigChannel+0x248>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a39      	ldr	r2, [pc, #228]	@ (8004860 <HAL_ADC_ConfigChannel+0x278>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d157      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x248>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d152      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004790:	4619      	mov	r1, r3
 8004792:	482e      	ldr	r0, [pc, #184]	@ (800484c <HAL_ADC_ConfigChannel+0x264>)
 8004794:	f7ff fa52 	bl	8003c3c <LL_ADC_SetCommonPathInternalCh>
 8004798:	e04a      	b.n	8004830 <HAL_ADC_ConfigChannel+0x248>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047a2:	d004      	beq.n	80047ae <HAL_ADC_ConfigChannel+0x1c6>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80047a8:	4a26      	ldr	r2, [pc, #152]	@ (8004844 <HAL_ADC_ConfigChannel+0x25c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d107      	bne.n	80047be <HAL_ADC_ConfigChannel+0x1d6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f7ff fac7 	bl	8003d4c <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4b21      	ldr	r3, [pc, #132]	@ (8004848 <HAL_ADC_ConfigChannel+0x260>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d032      	beq.n	8004830 <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047ca:	4820      	ldr	r0, [pc, #128]	@ (800484c <HAL_ADC_ConfigChannel+0x264>)
 80047cc:	f7ff fa49 	bl	8003c62 <LL_ADC_GetCommonPathInternalCh>
 80047d0:	61b8      	str	r0, [r7, #24]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004850 <HAL_ADC_ConfigChannel+0x268>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d107      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x204>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80047e2:	4619      	mov	r1, r3
 80047e4:	4819      	ldr	r0, [pc, #100]	@ (800484c <HAL_ADC_ConfigChannel+0x264>)
 80047e6:	f7ff fa29 	bl	8003c3c <LL_ADC_SetCommonPathInternalCh>
 80047ea:	e021      	b.n	8004830 <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1a      	ldr	r2, [pc, #104]	@ (800485c <HAL_ADC_ConfigChannel+0x274>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d107      	bne.n	8004806 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047fc:	4619      	mov	r1, r3
 80047fe:	4813      	ldr	r0, [pc, #76]	@ (800484c <HAL_ADC_ConfigChannel+0x264>)
 8004800:	f7ff fa1c 	bl	8003c3c <LL_ADC_SetCommonPathInternalCh>
 8004804:	e014      	b.n	8004830 <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a15      	ldr	r2, [pc, #84]	@ (8004860 <HAL_ADC_ConfigChannel+0x278>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d10f      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004816:	4619      	mov	r1, r3
 8004818:	480c      	ldr	r0, [pc, #48]	@ (800484c <HAL_ADC_ConfigChannel+0x264>)
 800481a:	f7ff fa0f 	bl	8003c3c <LL_ADC_SetCommonPathInternalCh>
 800481e:	e007      	b.n	8004830 <HAL_ADC_ConfigChannel+0x248>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004824:	f043 0220 	orr.w	r2, r3, #32
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	649a      	str	r2, [r3, #72]	@ 0x48
    
    tmp_hal_status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8004838:	7ffb      	ldrb	r3, [r7, #31]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	80000004 	.word	0x80000004
 8004848:	80080000 	.word	0x80080000
 800484c:	40012700 	.word	0x40012700
 8004850:	b0001000 	.word	0xb0001000
 8004854:	20000014 	.word	0x20000014
 8004858:	053e2d63 	.word	0x053e2d63
 800485c:	b8004000 	.word	0xb8004000
 8004860:	b4002000 	.word	0xb4002000

08004864 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff fb47 	bl	8003f06 <LL_ADC_REG_IsConversionOngoing>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d02c      	beq.n	80048d8 <ADC_ConversionStop+0x74>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fb04 	bl	8003e90 <LL_ADC_IsDisableOngoing>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d104      	bne.n	8004898 <ADC_ConversionStop+0x34>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fb23 	bl	8003ede <LL_ADC_REG_StopConversion>
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004898:	f7ff f97a 	bl	8003b90 <HAL_GetTick>
 800489c:	60f8      	str	r0, [r7, #12]
    
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800489e:	e014      	b.n	80048ca <ADC_ConversionStop+0x66>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80048a0:	f7ff f976 	bl	8003b90 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d90d      	bls.n	80048ca <ADC_ConversionStop+0x66>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b2:	f043 0210 	orr.w	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	649a      	str	r2, [r3, #72]	@ 0x48
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048be:	f043 0201 	orr.w	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e007      	b.n	80048da <ADC_ConversionStop+0x76>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e3      	bne.n	80048a0 <ADC_ConversionStop+0x3c>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fab8 	bl	8003e6a <LL_ADC_IsEnabled>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d162      	bne.n	80049c6 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	4b32      	ldr	r3, [pc, #200]	@ (80049d0 <ADC_Enable+0xec>)
 8004908:	4013      	ands	r3, r2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00d      	beq.n	800492a <ADC_Enable+0x46>
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004912:	f043 0210 	orr.w	r2, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491e:	f043 0201 	orr.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	64da      	str	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e04e      	b.n	80049c8 <ADC_Enable+0xe4>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff fa73 	bl	8003e1a <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004934:	4827      	ldr	r0, [pc, #156]	@ (80049d4 <ADC_Enable+0xf0>)
 8004936:	f7ff f994 	bl	8003c62 <LL_ADC_GetCommonPathInternalCh>
 800493a:	4603      	mov	r3, r0
 800493c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00f      	beq.n	8004964 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004944:	4b24      	ldr	r3, [pc, #144]	@ (80049d8 <ADC_Enable+0xf4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	099b      	lsrs	r3, r3, #6
 800494a:	4a24      	ldr	r2, [pc, #144]	@ (80049dc <ADC_Enable+0xf8>)
 800494c:	fba2 2303 	umull	r2, r3, r2, r3
 8004950:	099b      	lsrs	r3, r3, #6
 8004952:	3301      	adds	r3, #1
 8004954:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004956:	e002      	b.n	800495e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	3b01      	subs	r3, #1
 800495c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f9      	bne.n	8004958 <ADC_Enable+0x74>
    }

#if defined(ADC_SUPPORT_2_5_MSPS)
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	7e5b      	ldrb	r3, [r3, #25]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d02c      	beq.n	80049c6 <ADC_Enable+0xe2>
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800496c:	f7ff f910 	bl	8003b90 <HAL_GetTick>
 8004970:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004972:	e021      	b.n	80049b8 <ADC_Enable+0xd4>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fa76 	bl	8003e6a <LL_ADC_IsEnabled>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d104      	bne.n	800498e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff fa46 	bl	8003e1a <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800498e:	f7ff f8ff 	bl	8003b90 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d90d      	bls.n	80049b8 <ADC_Enable+0xd4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049a0:	f043 0210 	orr.w	r2, r3, #16
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	649a      	str	r2, [r3, #72]	@ 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ac:	f043 0201 	orr.w	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e007      	b.n	80049c8 <ADC_Enable+0xe4>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d1d6      	bne.n	8004974 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	80000017 	.word	0x80000017
 80049d4:	40012700 	.word	0x40012700
 80049d8:	20000014 	.word	0x20000014
 80049dc:	053e2d63 	.word	0x053e2d63

080049e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fa4f 	bl	8003e90 <LL_ADC_IsDisableOngoing>
 80049f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff fa36 	bl	8003e6a <LL_ADC_IsEnabled>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d047      	beq.n	8004a94 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d144      	bne.n	8004a94 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 0305 	and.w	r3, r3, #5
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d10c      	bne.n	8004a32 <ADC_Disable+0x52>
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fa10 	bl	8003e42 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2203      	movs	r2, #3
 8004a28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a2a:	f7ff f8b1 	bl	8003b90 <HAL_GetTick>
 8004a2e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a30:	e029      	b.n	8004a86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a36:	f043 0210 	orr.w	r2, r3, #16
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	649a      	str	r2, [r3, #72]	@ 0x48
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a42:	f043 0201 	orr.w	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	64da      	str	r2, [r3, #76]	@ 0x4c
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e023      	b.n	8004a96 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a4e:	f7ff f89f 	bl	8003b90 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d914      	bls.n	8004a86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00d      	beq.n	8004a86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a6e:	f043 0210 	orr.w	r2, r3, #16
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7a:	f043 0201 	orr.w	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	64da      	str	r2, [r3, #76]	@ 0x4c

          return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e007      	b.n	8004a96 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1dc      	bne.n	8004a4e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ab0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d143      	bne.n	8004b40 <ADC_DMAConvCplt+0xa2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004abc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff f8f7 	bl	8003cbc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d031      	beq.n	8004b38 <ADC_DMAConvCplt+0x9a>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	7e9b      	ldrb	r3, [r3, #26]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d12d      	bne.n	8004b38 <ADC_DMAConvCplt+0x9a>
      )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d126      	bne.n	8004b38 <ADC_DMAConvCplt+0x9a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff fa09 	bl	8003f06 <LL_ADC_REG_IsConversionOngoing>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d112      	bne.n	8004b20 <ADC_DMAConvCplt+0x82>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 020c 	bic.w	r2, r2, #12
 8004b08:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b12:	f023 0301 	bic.w	r3, r3, #1
 8004b16:	f043 0201 	orr.w	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	649a      	str	r2, [r3, #72]	@ 0x48
 8004b1e:	e00b      	b.n	8004b38 <ADC_DMAConvCplt+0x9a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b24:	f043 0220 	orr.w	r2, r3, #32
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	649a      	str	r2, [r3, #72]	@ 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b30:	f043 0201 	orr.w	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f006 fac5 	bl	800b0c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b3e:	e00e      	b.n	8004b5e <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <ADC_DMAConvCplt+0xb6>
      HAL_ADC_ErrorCallback(hadc);
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f7ff fd41 	bl	80045d4 <HAL_ADC_ErrorCallback>
}
 8004b52:	e004      	b.n	8004b5e <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	4798      	blx	r3
}
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7ff fd19 	bl	80045ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba0:	f043 0204 	orr.w	r2, r3, #4
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f7ff fd13 	bl	80045d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bae:	bf00      	nop
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c04:	4b0c      	ldr	r3, [pc, #48]	@ (8004c38 <__NVIC_SetPriorityGrouping+0x44>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c10:	4013      	ands	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c26:	4a04      	ldr	r2, [pc, #16]	@ (8004c38 <__NVIC_SetPriorityGrouping+0x44>)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	60d3      	str	r3, [r2, #12]
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	e000ed00 	.word	0xe000ed00

08004c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c40:	4b04      	ldr	r3, [pc, #16]	@ (8004c54 <__NVIC_GetPriorityGrouping+0x18>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	0a1b      	lsrs	r3, r3, #8
 8004c46:	f003 0307 	and.w	r3, r3, #7
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	db0b      	blt.n	8004c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	f003 021f 	and.w	r2, r3, #31
 8004c70:	4907      	ldr	r1, [pc, #28]	@ (8004c90 <__NVIC_EnableIRQ+0x38>)
 8004c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	2001      	movs	r0, #1
 8004c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	e000e100 	.word	0xe000e100

08004c94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	db12      	blt.n	8004ccc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	f003 021f 	and.w	r2, r3, #31
 8004cac:	490a      	ldr	r1, [pc, #40]	@ (8004cd8 <__NVIC_DisableIRQ+0x44>)
 8004cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004cba:	3320      	adds	r3, #32
 8004cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004cc0:	f3bf 8f4f 	dsb	sy
}
 8004cc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004cc6:	f3bf 8f6f 	isb	sy
}
 8004cca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	e000e100 	.word	0xe000e100

08004cdc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	db0c      	blt.n	8004d08 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	f003 021f 	and.w	r2, r3, #31
 8004cf4:	4907      	ldr	r1, [pc, #28]	@ (8004d14 <__NVIC_SetPendingIRQ+0x38>)
 8004cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8004d02:	3340      	adds	r3, #64	@ 0x40
 8004d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	e000e100 	.word	0xe000e100

08004d18 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	db0c      	blt.n	8004d44 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	f003 021f 	and.w	r2, r3, #31
 8004d30:	4907      	ldr	r1, [pc, #28]	@ (8004d50 <__NVIC_ClearPendingIRQ+0x38>)
 8004d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	2001      	movs	r0, #1
 8004d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d3e:	3360      	adds	r3, #96	@ 0x60
 8004d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	e000e100 	.word	0xe000e100

08004d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	6039      	str	r1, [r7, #0]
 8004d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	db0a      	blt.n	8004d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	490c      	ldr	r1, [pc, #48]	@ (8004da0 <__NVIC_SetPriority+0x4c>)
 8004d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d72:	0112      	lsls	r2, r2, #4
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	440b      	add	r3, r1
 8004d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d7c:	e00a      	b.n	8004d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	4908      	ldr	r1, [pc, #32]	@ (8004da4 <__NVIC_SetPriority+0x50>)
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	3b04      	subs	r3, #4
 8004d8c:	0112      	lsls	r2, r2, #4
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	440b      	add	r3, r1
 8004d92:	761a      	strb	r2, [r3, #24]
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	e000e100 	.word	0xe000e100
 8004da4:	e000ed00 	.word	0xe000ed00

08004da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b089      	sub	sp, #36	@ 0x24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f1c3 0307 	rsb	r3, r3, #7
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	bf28      	it	cs
 8004dc6:	2304      	movcs	r3, #4
 8004dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	2b06      	cmp	r3, #6
 8004dd0:	d902      	bls.n	8004dd8 <NVIC_EncodePriority+0x30>
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	3b03      	subs	r3, #3
 8004dd6:	e000      	b.n	8004dda <NVIC_EncodePriority+0x32>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	43da      	mvns	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	401a      	ands	r2, r3
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004df0:	f04f 31ff 	mov.w	r1, #4294967295
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfa:	43d9      	mvns	r1, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e00:	4313      	orrs	r3, r2
         );
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3724      	adds	r7, #36	@ 0x24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e20:	d301      	bcc.n	8004e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e22:	2301      	movs	r3, #1
 8004e24:	e00f      	b.n	8004e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e26:	4a0a      	ldr	r2, [pc, #40]	@ (8004e50 <SysTick_Config+0x40>)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e2e:	210f      	movs	r1, #15
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295
 8004e34:	f7ff ff8e 	bl	8004d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e38:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <SysTick_Config+0x40>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e3e:	4b04      	ldr	r3, [pc, #16]	@ (8004e50 <SysTick_Config+0x40>)
 8004e40:	2207      	movs	r2, #7
 8004e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	e000e010 	.word	0xe000e010

08004e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff fec9 	bl	8004bf4 <__NVIC_SetPriorityGrouping>
}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b086      	sub	sp, #24
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	4603      	mov	r3, r0
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
 8004e76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e78:	f7ff fee0 	bl	8004c3c <__NVIC_GetPriorityGrouping>
 8004e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	6978      	ldr	r0, [r7, #20]
 8004e84:	f7ff ff90 	bl	8004da8 <NVIC_EncodePriority>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff ff5f 	bl	8004d54 <__NVIC_SetPriority>
}
 8004e96:	bf00      	nop
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fed3 	bl	8004c58 <__NVIC_EnableIRQ>
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fee3 	bl	8004c94 <__NVIC_DisableIRQ>
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff ff96 	bl	8004e10 <SysTick_Config>
 8004ee4:	4603      	mov	r3, r0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff feed 	bl	8004cdc <__NVIC_SetPendingIRQ>
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	4603      	mov	r3, r0
 8004f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff fefd 	bl	8004d18 <__NVIC_ClearPendingIRQ>
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e078      	b.n	800502c <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4b3c      	ldr	r3, [pc, #240]	@ (8005034 <HAL_DMA_Init+0x10c>)
 8004f42:	4413      	add	r3, r2
 8004f44:	4a3c      	ldr	r2, [pc, #240]	@ (8005038 <HAL_DMA_Init+0x110>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	091b      	lsrs	r3, r3, #4
 8004f4c:	009a      	lsls	r2, r3, #2
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a39      	ldr	r2, [pc, #228]	@ (800503c <HAL_DMA_Init+0x114>)
 8004f56:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa6e 	bl	800548c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fb8:	d102      	bne.n	8004fc0 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004fcc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fd6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d010      	beq.n	8005002 <HAL_DMA_Init+0xda>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d80c      	bhi.n	8005002 <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fa7b 	bl	80054e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ffe:	605a      	str	r2, [r3, #4]
 8005000:	e008      	b.n	8005014 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	bffdfff8 	.word	0xbffdfff8
 8005038:	cccccccd 	.word	0xcccccccd
 800503c:	40020000 	.word	0x40020000

08005040 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_DMA_Start_IT+0x20>
 800505c:	2302      	movs	r3, #2
 800505e:	e066      	b.n	800512e <HAL_DMA_Start_IT+0xee>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d155      	bne.n	8005120 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f9b9 	bl	8005410 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 020e 	orr.w	r2, r2, #14
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e00f      	b.n	80050d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0204 	bic.w	r2, r2, #4
 80050c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 020a 	orr.w	r2, r2, #10
 80050d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d007      	beq.n	800510e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005108:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800510c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0201 	orr.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e005      	b.n	800512c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005128:	2302      	movs	r3, #2
 800512a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800512c:	7dfb      	ldrb	r3, [r7, #23]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e04f      	b.n	80051e8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d008      	beq.n	8005166 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2204      	movs	r2, #4
 8005158:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e040      	b.n	80051e8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 020e 	bic.w	r2, r2, #14
 8005174:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005180:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005184:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519a:	f003 021c 	and.w	r2, r3, #28
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	2101      	movs	r1, #1
 80051a4:	fa01 f202 	lsl.w	r2, r1, r2
 80051a8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051b2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00c      	beq.n	80051d6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051d4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d005      	beq.n	8005218 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2204      	movs	r2, #4
 8005210:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	73fb      	strb	r3, [r7, #15]
 8005216:	e047      	b.n	80052a8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 020e 	bic.w	r2, r2, #14
 8005226:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0201 	bic.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005242:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524c:	f003 021c 	and.w	r2, r3, #28
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	2101      	movs	r1, #1
 8005256:	fa01 f202 	lsl.w	r2, r1, r2
 800525a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005264:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800527c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005286:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	4798      	blx	r3
    }
  }
  return status;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ce:	f003 031c 	and.w	r3, r3, #28
 80052d2:	2204      	movs	r2, #4
 80052d4:	409a      	lsls	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4013      	ands	r3, r2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d026      	beq.n	800532c <HAL_DMA_IRQHandler+0x7a>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d021      	beq.n	800532c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d107      	bne.n	8005306 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0204 	bic.w	r2, r2, #4
 8005304:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	f003 021c 	and.w	r2, r3, #28
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005312:	2104      	movs	r1, #4
 8005314:	fa01 f202 	lsl.w	r2, r1, r2
 8005318:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531e:	2b00      	cmp	r3, #0
 8005320:	d071      	beq.n	8005406 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800532a:	e06c      	b.n	8005406 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005330:	f003 031c 	and.w	r3, r3, #28
 8005334:	2202      	movs	r2, #2
 8005336:	409a      	lsls	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d02e      	beq.n	800539e <HAL_DMA_IRQHandler+0xec>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d029      	beq.n	800539e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10b      	bne.n	8005370 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 020a 	bic.w	r2, r2, #10
 8005366:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005374:	f003 021c 	and.w	r2, r3, #28
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	2102      	movs	r1, #2
 800537e:	fa01 f202 	lsl.w	r2, r1, r2
 8005382:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d038      	beq.n	8005406 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800539c:	e033      	b.n	8005406 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	f003 031c 	and.w	r3, r3, #28
 80053a6:	2208      	movs	r2, #8
 80053a8:	409a      	lsls	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4013      	ands	r3, r2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d02a      	beq.n	8005408 <HAL_DMA_IRQHandler+0x156>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d025      	beq.n	8005408 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 020e 	bic.w	r2, r2, #14
 80053ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d0:	f003 021c 	and.w	r2, r3, #28
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	2101      	movs	r1, #1
 80053da:	fa01 f202 	lsl.w	r2, r1, r2
 80053de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d004      	beq.n	8005408 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005406:	bf00      	nop
 8005408:	bf00      	nop
}
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005426:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005438:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543e:	f003 021c 	and.w	r2, r3, #28
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005446:	2101      	movs	r1, #1
 8005448:	fa01 f202 	lsl.w	r2, r1, r2
 800544c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b10      	cmp	r3, #16
 800545c:	d108      	bne.n	8005470 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800546e:	e007      	b.n	8005480 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	60da      	str	r2, [r3, #12]
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005498:	089b      	lsrs	r3, r3, #2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054a0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6493      	str	r3, [r2, #72]	@ 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	3b08      	subs	r3, #8
 80054b0:	4a0a      	ldr	r2, [pc, #40]	@ (80054dc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	091b      	lsrs	r3, r3, #4
 80054b8:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a08      	ldr	r2, [pc, #32]	@ (80054e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80054be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2201      	movs	r2, #1
 80054c8:	409a      	lsls	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	cccccccd 	.word	0xcccccccd
 80054e0:	40020880 	.word	0x40020880

080054e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054f4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	461a      	mov	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a09      	ldr	r2, [pc, #36]	@ (800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8005508:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3b01      	subs	r3, #1
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2201      	movs	r2, #1
 8005514:	409a      	lsls	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800551a:	bf00      	nop
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	1000823f 	.word	0x1000823f
 800552c:	40020940 	.word	0x40020940

08005530 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800553e:	e146      	b.n	80057ce <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	2101      	movs	r1, #1
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	fa01 f303 	lsl.w	r3, r1, r3
 800554c:	4013      	ands	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 8138 	beq.w	80057c8 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	2b01      	cmp	r3, #1
 8005562:	d005      	beq.n	8005570 <HAL_GPIO_Init+0x40>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d130      	bne.n	80055d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	2203      	movs	r2, #3
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	43db      	mvns	r3, r3
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4013      	ands	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055a6:	2201      	movs	r2, #1
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	43db      	mvns	r3, r3
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4013      	ands	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	091b      	lsrs	r3, r3, #4
 80055bc:	f003 0201 	and.w	r2, r3, #1
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d017      	beq.n	800560e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	2203      	movs	r2, #3
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43db      	mvns	r3, r3
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4013      	ands	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d123      	bne.n	8005662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	08da      	lsrs	r2, r3, #3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3208      	adds	r2, #8
 8005622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	220f      	movs	r2, #15
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4013      	ands	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	08da      	lsrs	r2, r3, #3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3208      	adds	r2, #8
 800565c:	6939      	ldr	r1, [r7, #16]
 800565e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	2203      	movs	r2, #3
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43db      	mvns	r3, r3
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4013      	ands	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f003 0203 	and.w	r2, r3, #3
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8092 	beq.w	80057c8 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80056a4:	4a51      	ldr	r2, [pc, #324]	@ (80057ec <HAL_GPIO_Init+0x2bc>)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	089b      	lsrs	r3, r3, #2
 80056aa:	3302      	adds	r3, #2
 80056ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	220f      	movs	r2, #15
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4013      	ands	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80056ce:	d013      	beq.n	80056f8 <HAL_GPIO_Init+0x1c8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a47      	ldr	r2, [pc, #284]	@ (80057f0 <HAL_GPIO_Init+0x2c0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00d      	beq.n	80056f4 <HAL_GPIO_Init+0x1c4>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a46      	ldr	r2, [pc, #280]	@ (80057f4 <HAL_GPIO_Init+0x2c4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d007      	beq.n	80056f0 <HAL_GPIO_Init+0x1c0>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a45      	ldr	r2, [pc, #276]	@ (80057f8 <HAL_GPIO_Init+0x2c8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d101      	bne.n	80056ec <HAL_GPIO_Init+0x1bc>
 80056e8:	2304      	movs	r3, #4
 80056ea:	e006      	b.n	80056fa <HAL_GPIO_Init+0x1ca>
 80056ec:	2307      	movs	r3, #7
 80056ee:	e004      	b.n	80056fa <HAL_GPIO_Init+0x1ca>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e002      	b.n	80056fa <HAL_GPIO_Init+0x1ca>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <HAL_GPIO_Init+0x1ca>
 80056f8:	2300      	movs	r3, #0
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	f002 0203 	and.w	r2, r2, #3
 8005700:	0092      	lsls	r2, r2, #2
 8005702:	4093      	lsls	r3, r2
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800570a:	4938      	ldr	r1, [pc, #224]	@ (80057ec <HAL_GPIO_Init+0x2bc>)
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	089b      	lsrs	r3, r3, #2
 8005710:	3302      	adds	r3, #2
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005718:	4b38      	ldr	r3, [pc, #224]	@ (80057fc <HAL_GPIO_Init+0x2cc>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	43db      	mvns	r3, r3
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	4013      	ands	r3, r2
 8005726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800573c:	4a2f      	ldr	r2, [pc, #188]	@ (80057fc <HAL_GPIO_Init+0x2cc>)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005742:	4b2e      	ldr	r3, [pc, #184]	@ (80057fc <HAL_GPIO_Init+0x2cc>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	43db      	mvns	r3, r3
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4013      	ands	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005766:	4a25      	ldr	r2, [pc, #148]	@ (80057fc <HAL_GPIO_Init+0x2cc>)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800576c:	4b23      	ldr	r3, [pc, #140]	@ (80057fc <HAL_GPIO_Init+0x2cc>)
 800576e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	43db      	mvns	r3, r3
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4013      	ands	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005792:	4a1a      	ldr	r2, [pc, #104]	@ (80057fc <HAL_GPIO_Init+0x2cc>)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800579a:	4b18      	ldr	r3, [pc, #96]	@ (80057fc <HAL_GPIO_Init+0x2cc>)
 800579c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4013      	ands	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80057c0:	4a0e      	ldr	r2, [pc, #56]	@ (80057fc <HAL_GPIO_Init+0x2cc>)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	3301      	adds	r3, #1
 80057cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f47f aeb1 	bne.w	8005540 <HAL_GPIO_Init+0x10>
  }
}
 80057de:	bf00      	nop
 80057e0:	bf00      	nop
 80057e2:	371c      	adds	r7, #28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	40010000 	.word	0x40010000
 80057f0:	48000400 	.word	0x48000400
 80057f4:	48000800 	.word	0x48000800
 80057f8:	48001000 	.word	0x48001000
 80057fc:	58000800 	.word	0x58000800

08005800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	807b      	strh	r3, [r7, #2]
 800580c:	4613      	mov	r3, r2
 800580e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005810:	787b      	ldrb	r3, [r7, #1]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005816:	887a      	ldrh	r2, [r7, #2]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800581c:	e002      	b.n	8005824 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800581e:	887a      	ldrh	r2, [r7, #2]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005836:	4b0a      	ldr	r3, [pc, #40]	@ (8005860 <HAL_HSEM_IRQHandler+0x30>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800583c:	4b08      	ldr	r3, [pc, #32]	@ (8005860 <HAL_HSEM_IRQHandler+0x30>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	43db      	mvns	r3, r3
 8005844:	4906      	ldr	r1, [pc, #24]	@ (8005860 <HAL_HSEM_IRQHandler+0x30>)
 8005846:	4013      	ands	r3, r2
 8005848:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800584a:	4a05      	ldr	r2, [pc, #20]	@ (8005860 <HAL_HSEM_IRQHandler+0x30>)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f807 	bl	8005864 <HAL_HSEM_FreeCallback>
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	58001500 	.word	0x58001500

08005864 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e08d      	b.n	80059a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fd fbfe 	bl	80030a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2224      	movs	r2, #36	@ 0x24
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80058c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d107      	bne.n	80058f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058ee:	609a      	str	r2, [r3, #8]
 80058f0:	e006      	b.n	8005900 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80058fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d108      	bne.n	800591a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005916:	605a      	str	r2, [r3, #4]
 8005918:	e007      	b.n	800592a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005928:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800594c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691a      	ldr	r2, [r3, #16]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69d9      	ldr	r1, [r3, #28]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1a      	ldr	r2, [r3, #32]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	4608      	mov	r0, r1
 80059ba:	4611      	mov	r1, r2
 80059bc:	461a      	mov	r2, r3
 80059be:	4603      	mov	r3, r0
 80059c0:	817b      	strh	r3, [r7, #10]
 80059c2:	460b      	mov	r3, r1
 80059c4:	813b      	strh	r3, [r7, #8]
 80059c6:	4613      	mov	r3, r2
 80059c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	f040 80f9 	bne.w	8005bca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_I2C_Mem_Write+0x34>
 80059de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d105      	bne.n	80059f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0ed      	b.n	8005bcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_I2C_Mem_Write+0x4e>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e0e6      	b.n	8005bcc <HAL_I2C_Mem_Write+0x21c>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a06:	f7fe f8c3 	bl	8003b90 <HAL_GetTick>
 8005a0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	2319      	movs	r3, #25
 8005a12:	2201      	movs	r2, #1
 8005a14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f955 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0d1      	b.n	8005bcc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2221      	movs	r2, #33	@ 0x21
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2240      	movs	r2, #64	@ 0x40
 8005a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a3a      	ldr	r2, [r7, #32]
 8005a42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a50:	88f8      	ldrh	r0, [r7, #6]
 8005a52:	893a      	ldrh	r2, [r7, #8]
 8005a54:	8979      	ldrh	r1, [r7, #10]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	4603      	mov	r3, r0
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f8b9 	bl	8005bd8 <I2C_RequestMemoryWrite>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e0a9      	b.n	8005bcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2bff      	cmp	r3, #255	@ 0xff
 8005a80:	d90e      	bls.n	8005aa0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	22ff      	movs	r2, #255	@ 0xff
 8005a86:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	8979      	ldrh	r1, [r7, #10]
 8005a90:	2300      	movs	r3, #0
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 fad9 	bl	8006050 <I2C_TransferConfig>
 8005a9e:	e00f      	b.n	8005ac0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	8979      	ldrh	r1, [r7, #10]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 fac8 	bl	8006050 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f958 	bl	8005d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e07b      	b.n	8005bcc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad8:	781a      	ldrb	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d034      	beq.n	8005b78 <HAL_I2C_Mem_Write+0x1c8>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d130      	bne.n	8005b78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2180      	movs	r1, #128	@ 0x80
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f8d1 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e04d      	b.n	8005bcc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2bff      	cmp	r3, #255	@ 0xff
 8005b38:	d90e      	bls.n	8005b58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	22ff      	movs	r2, #255	@ 0xff
 8005b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	8979      	ldrh	r1, [r7, #10]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fa7d 	bl	8006050 <I2C_TransferConfig>
 8005b56:	e00f      	b.n	8005b78 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	8979      	ldrh	r1, [r7, #10]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 fa6c 	bl	8006050 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d19e      	bne.n	8005ac0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f93e 	bl	8005e08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e01a      	b.n	8005bcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6859      	ldr	r1, [r3, #4]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd4 <HAL_I2C_Mem_Write+0x224>)
 8005baa:	400b      	ands	r3, r1
 8005bac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	e000      	b.n	8005bcc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005bca:	2302      	movs	r3, #2
  }
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	fe00e800 	.word	0xfe00e800

08005bd8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	4608      	mov	r0, r1
 8005be2:	4611      	mov	r1, r2
 8005be4:	461a      	mov	r2, r3
 8005be6:	4603      	mov	r3, r0
 8005be8:	817b      	strh	r3, [r7, #10]
 8005bea:	460b      	mov	r3, r1
 8005bec:	813b      	strh	r3, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	8979      	ldrh	r1, [r7, #10]
 8005bf8:	4b20      	ldr	r3, [pc, #128]	@ (8005c7c <I2C_RequestMemoryWrite+0xa4>)
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fa25 	bl	8006050 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	69b9      	ldr	r1, [r7, #24]
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 f8b5 	bl	8005d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e02c      	b.n	8005c74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d105      	bne.n	8005c2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c20:	893b      	ldrh	r3, [r7, #8]
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c2a:	e015      	b.n	8005c58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c2c:	893b      	ldrh	r3, [r7, #8]
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	69b9      	ldr	r1, [r7, #24]
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f89b 	bl	8005d7a <I2C_WaitOnTXISFlagUntilTimeout>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e012      	b.n	8005c74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c4e:	893b      	ldrh	r3, [r7, #8]
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2180      	movs	r1, #128	@ 0x80
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f830 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	80002000 	.word	0x80002000

08005c80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d103      	bne.n	8005c9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d007      	beq.n	8005cbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	619a      	str	r2, [r3, #24]
  }
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cd8:	e03b      	b.n	8005d52 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 f8d6 	bl	8005e90 <I2C_IsErrorOccurred>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e041      	b.n	8005d72 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	d02d      	beq.n	8005d52 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf6:	f7fd ff4b 	bl	8003b90 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d302      	bcc.n	8005d0c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d122      	bne.n	8005d52 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	4013      	ands	r3, r2
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2301      	moveq	r3, #1
 8005d1e:	2300      	movne	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d113      	bne.n	8005d52 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2e:	f043 0220 	orr.w	r2, r3, #32
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e00f      	b.n	8005d72 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699a      	ldr	r2, [r3, #24]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	bf0c      	ite	eq
 8005d62:	2301      	moveq	r3, #1
 8005d64:	2300      	movne	r3, #0
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d0b4      	beq.n	8005cda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d86:	e033      	b.n	8005df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f87f 	bl	8005e90 <I2C_IsErrorOccurred>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e031      	b.n	8005e00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	d025      	beq.n	8005df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da4:	f7fd fef4 	bl	8003b90 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d302      	bcc.n	8005dba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d11a      	bne.n	8005df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d013      	beq.n	8005df0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e007      	b.n	8005e00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d1c4      	bne.n	8005d88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e14:	e02f      	b.n	8005e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f838 	bl	8005e90 <I2C_IsErrorOccurred>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e02d      	b.n	8005e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2a:	f7fd feb1 	bl	8003b90 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d302      	bcc.n	8005e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d11a      	bne.n	8005e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d013      	beq.n	8005e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e52:	f043 0220 	orr.w	r2, r3, #32
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e007      	b.n	8005e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d1c8      	bne.n	8005e16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08a      	sub	sp, #40	@ 0x28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d068      	beq.n	8005f8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2210      	movs	r2, #16
 8005ec2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ec4:	e049      	b.n	8005f5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ecc:	d045      	beq.n	8005f5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ece:	f7fd fe5f 	bl	8003b90 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d302      	bcc.n	8005ee4 <I2C_IsErrorOccurred+0x54>
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d13a      	bne.n	8005f5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ef6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f06:	d121      	bne.n	8005f4c <I2C_IsErrorOccurred+0xbc>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f0e:	d01d      	beq.n	8005f4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f10:	7cfb      	ldrb	r3, [r7, #19]
 8005f12:	2b20      	cmp	r3, #32
 8005f14:	d01a      	beq.n	8005f4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f26:	f7fd fe33 	bl	8003b90 <HAL_GetTick>
 8005f2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f2c:	e00e      	b.n	8005f4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f2e:	f7fd fe2f 	bl	8003b90 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b19      	cmp	r3, #25
 8005f3a:	d907      	bls.n	8005f4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	f043 0320 	orr.w	r3, r3, #32
 8005f42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005f4a:	e006      	b.n	8005f5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d1e9      	bne.n	8005f2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d003      	beq.n	8005f70 <I2C_IsErrorOccurred+0xe0>
 8005f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0aa      	beq.n	8005ec6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d103      	bne.n	8005f80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	f043 0304 	orr.w	r3, r3, #4
 8005f86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	f043 0308 	orr.w	r3, r3, #8
 8005fc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005fd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00b      	beq.n	8005ffc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	f043 0302 	orr.w	r3, r3, #2
 8005fea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ff4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01c      	beq.n	800603e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff fe3b 	bl	8005c80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6859      	ldr	r1, [r3, #4]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	4b0d      	ldr	r3, [pc, #52]	@ (800604c <I2C_IsErrorOccurred+0x1bc>)
 8006016:	400b      	ands	r3, r1
 8006018:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	431a      	orrs	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800603e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006042:	4618      	mov	r0, r3
 8006044:	3728      	adds	r7, #40	@ 0x28
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	fe00e800 	.word	0xfe00e800

08006050 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	607b      	str	r3, [r7, #4]
 800605a:	460b      	mov	r3, r1
 800605c:	817b      	strh	r3, [r7, #10]
 800605e:	4613      	mov	r3, r2
 8006060:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006062:	897b      	ldrh	r3, [r7, #10]
 8006064:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006068:	7a7b      	ldrb	r3, [r7, #9]
 800606a:	041b      	lsls	r3, r3, #16
 800606c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006070:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	4313      	orrs	r3, r2
 800607a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800607e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	0d5b      	lsrs	r3, r3, #21
 800608a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800608e:	4b08      	ldr	r3, [pc, #32]	@ (80060b0 <I2C_TransferConfig+0x60>)
 8006090:	430b      	orrs	r3, r1
 8006092:	43db      	mvns	r3, r3
 8006094:	ea02 0103 	and.w	r1, r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	03ff63ff 	.word	0x03ff63ff

080060b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d138      	bne.n	800613c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e032      	b.n	800613e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2224      	movs	r2, #36	@ 0x24
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0201 	bic.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006106:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6819      	ldr	r1, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0201 	orr.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	e000      	b.n	800613e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800613c:	2302      	movs	r3, #2
  }
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800614a:	b480      	push	{r7}
 800614c:	b085      	sub	sp, #20
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b20      	cmp	r3, #32
 800615e:	d139      	bne.n	80061d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800616a:	2302      	movs	r3, #2
 800616c:	e033      	b.n	80061d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2224      	movs	r2, #36	@ 0x24
 800617a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0201 	bic.w	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800619c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	021b      	lsls	r3, r3, #8
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	e000      	b.n	80061d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061d4:	2302      	movs	r3, #2
  }
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
	...

080061e4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01e      	beq.n	8006234 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80061f6:	4b13      	ldr	r3, [pc, #76]	@ (8006244 <HAL_IPCC_Init+0x60>)
 80061f8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fc ff92 	bl	8003130 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800620c:	68b8      	ldr	r0, [r7, #8]
 800620e:	f000 f85b 	bl	80062c8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f82c 	bl	800627c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8006232:	e001      	b.n	8006238 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	58000c00 	.word	0x58000c00

08006248 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	4613      	mov	r3, r2
 8006254:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	4613      	mov	r3, r2
 800626e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8006284:	2300      	movs	r3, #0
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	e00f      	b.n	80062aa <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	4a0b      	ldr	r2, [pc, #44]	@ (80062c0 <IPCC_SetDefaultCallbacks+0x44>)
 8006294:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3306      	adds	r3, #6
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	4a08      	ldr	r2, [pc, #32]	@ (80062c4 <IPCC_SetDefaultCallbacks+0x48>)
 80062a2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3301      	adds	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b05      	cmp	r3, #5
 80062ae:	d9ec      	bls.n	800628a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	08006249 	.word	0x08006249
 80062c4:	08006263 	.word	0x08006263

080062c8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80062dc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	223f      	movs	r2, #63	@ 0x3f
 80062e2:	609a      	str	r2, [r3, #8]
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062f4:	4b05      	ldr	r3, [pc, #20]	@ (800630c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a04      	ldr	r2, [pc, #16]	@ (800630c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062fe:	6013      	str	r3, [r2, #0]
}
 8006300:	bf00      	nop
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	58000400 	.word	0x58000400

08006310 <LL_PWR_EnableSRAM2Retention>:
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8006314:	4b05      	ldr	r3, [pc, #20]	@ (800632c <LL_PWR_EnableSRAM2Retention+0x1c>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	4a04      	ldr	r2, [pc, #16]	@ (800632c <LL_PWR_EnableSRAM2Retention+0x1c>)
 800631a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800631e:	6093      	str	r3, [r2, #8]
}
 8006320:	bf00      	nop
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	58000400 	.word	0x58000400

08006330 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8006334:	f7ff ffec 	bl	8006310 <LL_PWR_EnableSRAM2Retention>
}
 8006338:	bf00      	nop
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_PWREx_GetWakeupFlag>:
  *            @arg PWR_FLAG_WUF4: A wakeup event was received from PA2.
  *            @arg PWR_FLAG_WUF5: A wakeup event was received from PC5.
  * @retval The Wake-Up pin flag.
  */
uint32_t  HAL_PWREx_GetWakeupFlag(uint32_t WakeUpFlag)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  return (PWR->SR1 & (1UL << ((WakeUpFlag) & 31U)));
 8006344:	4b07      	ldr	r3, [pc, #28]	@ (8006364 <HAL_PWREx_GetWakeupFlag+0x28>)
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	2101      	movs	r1, #1
 8006350:	fa01 f303 	lsl.w	r3, r1, r3
 8006354:	4013      	ands	r3, r2
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	58000400 	.word	0x58000400

08006368 <HAL_PWREx_ClearWakeupFlag>:
  *            @arg PWR_FLAG_WUF4: A wakeup event was received from PA2.
  *            @arg PWR_FLAG_WUF5: A wakeup event was received from PC5.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag(uint32_t WakeUpFlag)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  PWR->SCR = (1UL << ((WakeUpFlag) & 31U));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f003 031f 	and.w	r3, r3, #31
 8006376:	4a0c      	ldr	r2, [pc, #48]	@ (80063a8 <HAL_PWREx_ClearWakeupFlag+0x40>)
 8006378:	2101      	movs	r1, #1
 800637a:	fa01 f303 	lsl.w	r3, r1, r3
 800637e:	6193      	str	r3, [r2, #24]

  if ((PWR->SR1 & (1UL << ((WakeUpFlag) & 31U))) != 0U)
 8006380:	4b09      	ldr	r3, [pc, #36]	@ (80063a8 <HAL_PWREx_ClearWakeupFlag+0x40>)
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f003 031f 	and.w	r3, r3, #31
 800638a:	fa22 f303 	lsr.w	r3, r2, r3
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_PWREx_ClearWakeupFlag+0x32>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <HAL_PWREx_ClearWakeupFlag+0x34>
  }
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	58000400 	.word	0x58000400

080063ac <LL_RCC_HSE_IsEnabledDiv2>:
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80063b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063be:	d101      	bne.n	80063c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e000      	b.n	80063c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <LL_RCC_HSE_Enable>:
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80063d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e2:	6013      	str	r3, [r2, #0]
}
 80063e4:	bf00      	nop
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <LL_RCC_HSE_Disable>:
{
 80063ee:	b480      	push	{r7}
 80063f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80063f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006400:	6013      	str	r3, [r2, #0]
}
 8006402:	bf00      	nop
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <LL_RCC_HSE_IsReady>:
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800641a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800641e:	d101      	bne.n	8006424 <LL_RCC_HSE_IsReady+0x18>
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <LL_RCC_HSE_IsReady+0x1a>
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <LL_RCC_HSI_Enable>:
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800643e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006442:	6013      	str	r3, [r2, #0]
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <LL_RCC_HSI_Disable>:
{
 800644e:	b480      	push	{r7}
 8006450:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800645c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006460:	6013      	str	r3, [r2, #0]
}
 8006462:	bf00      	nop
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <LL_RCC_HSI_IsReady>:
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800647a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800647e:	d101      	bne.n	8006484 <LL_RCC_HSI_IsReady+0x18>
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <LL_RCC_HSI_IsReady+0x1a>
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	061b      	lsls	r3, r3, #24
 80064a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064aa:	4313      	orrs	r3, r2
 80064ac:	604b      	str	r3, [r1, #4]
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <LL_RCC_LSE_Enable>:
{
 80064ba:	b480      	push	{r7}
 80064bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064ca:	f043 0301 	orr.w	r3, r3, #1
 80064ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80064d2:	bf00      	nop
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <LL_RCC_LSE_Disable>:
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80064f4:	bf00      	nop
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <LL_RCC_LSE_EnableBypass>:
{
 80064fe:	b480      	push	{r7}
 8006500:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800650e:	f043 0304 	orr.w	r3, r3, #4
 8006512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006516:	bf00      	nop
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <LL_RCC_LSE_DisableBypass>:
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800652c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006530:	f023 0304 	bic.w	r3, r3, #4
 8006534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006538:	bf00      	nop
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <LL_RCC_LSE_IsReady>:
{
 8006542:	b480      	push	{r7}
 8006544:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b02      	cmp	r3, #2
 8006554:	d101      	bne.n	800655a <LL_RCC_LSE_IsReady+0x18>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <LL_RCC_LSE_IsReady+0x1a>
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <LL_RCC_LSI1_Enable>:
{
 8006566:	b480      	push	{r7}
 8006568:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800656a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800656e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006572:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006576:	f043 0301 	orr.w	r3, r3, #1
 800657a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800657e:	bf00      	nop
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <LL_RCC_LSI1_Disable>:
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800658c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006594:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006598:	f023 0301 	bic.w	r3, r3, #1
 800659c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80065a0:	bf00      	nop
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <LL_RCC_LSI1_IsReady>:
{
 80065aa:	b480      	push	{r7}
 80065ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80065ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d101      	bne.n	80065c2 <LL_RCC_LSI1_IsReady+0x18>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <LL_RCC_LSI1_IsReady+0x1a>
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <LL_RCC_LSI2_Enable>:
{
 80065ce:	b480      	push	{r7}
 80065d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80065d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065de:	f043 0304 	orr.w	r3, r3, #4
 80065e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80065e6:	bf00      	nop
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <LL_RCC_LSI2_Disable>:
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80065f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006600:	f023 0304 	bic.w	r3, r3, #4
 8006604:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006608:	bf00      	nop
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <LL_RCC_LSI2_IsReady>:
{
 8006612:	b480      	push	{r7}
 8006614:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800661a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	2b08      	cmp	r3, #8
 8006624:	d101      	bne.n	800662a <LL_RCC_LSI2_IsReady+0x18>
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <LL_RCC_LSI2_IsReady+0x1a>
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <LL_RCC_LSI2_SetTrimming>:
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800663e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006646:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006652:	4313      	orrs	r3, r2
 8006654:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <LL_RCC_MSI_Enable>:
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006672:	f043 0301 	orr.w	r3, r3, #1
 8006676:	6013      	str	r3, [r2, #0]
}
 8006678:	bf00      	nop
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <LL_RCC_MSI_Disable>:
{
 8006682:	b480      	push	{r7}
 8006684:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006690:	f023 0301 	bic.w	r3, r3, #1
 8006694:	6013      	str	r3, [r2, #0]
}
 8006696:	bf00      	nop
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <LL_RCC_MSI_IsReady>:
{
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80066a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d101      	bne.n	80066b6 <LL_RCC_MSI_IsReady+0x16>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e000      	b.n	80066b8 <LL_RCC_MSI_IsReady+0x18>
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <LL_RCC_MSI_SetRange>:
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80066ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4313      	orrs	r3, r2
 80066dc:	600b      	str	r3, [r1, #0]
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <LL_RCC_MSI_GetRange>:
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80066f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066fa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2bb0      	cmp	r3, #176	@ 0xb0
 8006700:	d901      	bls.n	8006706 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006702:	23b0      	movs	r3, #176	@ 0xb0
 8006704:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006706:	687b      	ldr	r3, [r7, #4]
}
 8006708:	4618      	mov	r0, r3
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800671c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800672e:	4313      	orrs	r3, r2
 8006730:	604b      	str	r3, [r1, #4]
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <LL_RCC_SetSysClkSource>:
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f023 0203 	bic.w	r2, r3, #3
 8006750:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4313      	orrs	r3, r2
 8006758:	608b      	str	r3, [r1, #8]
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <LL_RCC_GetSysClkSource>:
{
 8006766:	b480      	push	{r7}
 8006768:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800676a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 030c 	and.w	r3, r3, #12
}
 8006774:	4618      	mov	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <LL_RCC_SetAHBPrescaler>:
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006790:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4313      	orrs	r3, r2
 8006798:	608b      	str	r3, [r1, #8]
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80067ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80067b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <LL_RCC_SetAHB4Prescaler>:
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80067da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80067e2:	f023 020f 	bic.w	r2, r3, #15
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	091b      	lsrs	r3, r3, #4
 80067ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <LL_RCC_SetAPB1Prescaler>:
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006812:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4313      	orrs	r3, r2
 800681a:	608b      	str	r3, [r1, #8]
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <LL_RCC_SetAPB2Prescaler>:
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800683a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4313      	orrs	r3, r2
 8006842:	608b      	str	r3, [r1, #8]
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <LL_RCC_GetAHBPrescaler>:
{
 8006850:	b480      	push	{r7}
 8006852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800685e:	4618      	mov	r0, r3
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <LL_RCC_GetAHB4Prescaler>:
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800686c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006870:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800687a:	4618      	mov	r0, r3
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <LL_RCC_PLL_Enable>:
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006896:	6013      	str	r3, [r2, #0]
}
 8006898:	bf00      	nop
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <LL_RCC_PLL_Disable>:
{
 80068a2:	b480      	push	{r7}
 80068a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80068a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068b4:	6013      	str	r3, [r2, #0]
}
 80068b6:	bf00      	nop
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <LL_RCC_PLL_IsReady>:
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80068c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068d2:	d101      	bne.n	80068d8 <LL_RCC_PLL_IsReady+0x18>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <LL_RCC_PLL_IsReady+0x1a>
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <LL_RCC_PLL_GetN>:
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80068e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	0a1b      	lsrs	r3, r3, #8
 80068f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <LL_RCC_PLL_GetR>:
{
 80068fe:	b480      	push	{r7}
 8006900:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800690c:	4618      	mov	r0, r3
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <LL_RCC_PLL_GetDivider>:
{
 8006916:	b480      	push	{r7}
 8006918:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800691a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006924:	4618      	mov	r0, r3
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <LL_RCC_PLL_GetMainSource>:
{
 800692e:	b480      	push	{r7}
 8006930:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f003 0303 	and.w	r3, r3, #3
}
 800693c:	4618      	mov	r0, r3
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <LL_RCC_IsActiveFlag_HPRE>:
{
 8006946:	b480      	push	{r7}
 8006948:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800694a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006958:	d101      	bne.n	800695e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800696a:	b480      	push	{r7}
 800696c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800696e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006972:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800697a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800697e:	d101      	bne.n	8006984 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006998:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800699c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069a4:	d101      	bne.n	80069aa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80069b6:	b480      	push	{r7}
 80069b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80069ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069c8:	d101      	bne.n	80069ce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <LL_RCC_IsActiveFlag_PPRE2>:
{
 80069da:	b480      	push	{r7}
 80069dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80069de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069ec:	d101      	bne.n	80069f2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
	...

08006a00 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a00:	b590      	push	{r4, r7, lr}
 8006a02:	b08d      	sub	sp, #52	@ 0x34
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e324      	b.n	800705c <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 808d 	beq.w	8006b3a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a20:	f7ff fea1 	bl	8006766 <LL_RCC_GetSysClkSource>
 8006a24:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a26:	f7ff ff82 	bl	800692e <LL_RCC_PLL_GetMainSource>
 8006a2a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d005      	beq.n	8006a3e <HAL_RCC_OscConfig+0x3e>
 8006a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a34:	2b0c      	cmp	r3, #12
 8006a36:	d147      	bne.n	8006ac8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d144      	bne.n	8006ac8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e308      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006a4e:	f7ff fe4c 	bl	80066ea <LL_RCC_MSI_GetRange>
 8006a52:	4603      	mov	r3, r0
 8006a54:	429c      	cmp	r4, r3
 8006a56:	d914      	bls.n	8006a82 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 fcc5 	bl	80073ec <RCC_SetFlashLatencyFromMSIRange>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e2f7      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff fe26 	bl	80066c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff fe4a 	bl	8006714 <LL_RCC_MSI_SetCalibTrimming>
 8006a80:	e013      	b.n	8006aaa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff fe1b 	bl	80066c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff fe3f 	bl	8006714 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fca6 	bl	80073ec <RCC_SetFlashLatencyFromMSIRange>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e2d8      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006aaa:	f000 fc8b 	bl	80073c4 <HAL_RCC_GetHCLKFreq>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	4aa4      	ldr	r2, [pc, #656]	@ (8006d44 <HAL_RCC_OscConfig+0x344>)
 8006ab2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ab4:	4ba4      	ldr	r3, [pc, #656]	@ (8006d48 <HAL_RCC_OscConfig+0x348>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fd f81b 	bl	8003af4 <HAL_InitTick>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d039      	beq.n	8006b38 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e2c9      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d01e      	beq.n	8006b0e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ad0:	f7ff fdc8 	bl	8006664 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ad4:	f7fd f85c 	bl	8003b90 <HAL_GetTick>
 8006ad8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006adc:	f7fd f858 	bl	8003b90 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e2b6      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006aee:	f7ff fdd7 	bl	80066a0 <LL_RCC_MSI_IsReady>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0f1      	beq.n	8006adc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff fde0 	bl	80066c2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff fe04 	bl	8006714 <LL_RCC_MSI_SetCalibTrimming>
 8006b0c:	e015      	b.n	8006b3a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006b0e:	f7ff fdb8 	bl	8006682 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b12:	f7fd f83d 	bl	8003b90 <HAL_GetTick>
 8006b16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006b18:	e008      	b.n	8006b2c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b1a:	f7fd f839 	bl	8003b90 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e297      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006b2c:	f7ff fdb8 	bl	80066a0 <LL_RCC_MSI_IsReady>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f1      	bne.n	8006b1a <HAL_RCC_OscConfig+0x11a>
 8006b36:	e000      	b.n	8006b3a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006b38:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d047      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b46:	f7ff fe0e 	bl	8006766 <LL_RCC_GetSysClkSource>
 8006b4a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b4c:	f7ff feef 	bl	800692e <LL_RCC_PLL_GetMainSource>
 8006b50:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d005      	beq.n	8006b64 <HAL_RCC_OscConfig+0x164>
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	2b0c      	cmp	r3, #12
 8006b5c:	d108      	bne.n	8006b70 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d105      	bne.n	8006b70 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d134      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e275      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b78:	d102      	bne.n	8006b80 <HAL_RCC_OscConfig+0x180>
 8006b7a:	f7ff fc29 	bl	80063d0 <LL_RCC_HSE_Enable>
 8006b7e:	e001      	b.n	8006b84 <HAL_RCC_OscConfig+0x184>
 8006b80:	f7ff fc35 	bl	80063ee <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d012      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8c:	f7fd f800 	bl	8003b90 <HAL_GetTick>
 8006b90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b94:	f7fc fffc 	bl	8003b90 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b64      	cmp	r3, #100	@ 0x64
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e25a      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006ba6:	f7ff fc31 	bl	800640c <LL_RCC_HSE_IsReady>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0f1      	beq.n	8006b94 <HAL_RCC_OscConfig+0x194>
 8006bb0:	e011      	b.n	8006bd6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb2:	f7fc ffed 	bl	8003b90 <HAL_GetTick>
 8006bb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006bb8:	e008      	b.n	8006bcc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bba:	f7fc ffe9 	bl	8003b90 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b64      	cmp	r3, #100	@ 0x64
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e247      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006bcc:	f7ff fc1e 	bl	800640c <LL_RCC_HSE_IsReady>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f1      	bne.n	8006bba <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d04c      	beq.n	8006c7c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006be2:	f7ff fdc0 	bl	8006766 <LL_RCC_GetSysClkSource>
 8006be6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006be8:	f7ff fea1 	bl	800692e <LL_RCC_PLL_GetMainSource>
 8006bec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d005      	beq.n	8006c00 <HAL_RCC_OscConfig+0x200>
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	2b0c      	cmp	r3, #12
 8006bf8:	d10e      	bne.n	8006c18 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d10b      	bne.n	8006c18 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e227      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff fc3d 	bl	8006490 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006c16:	e031      	b.n	8006c7c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d019      	beq.n	8006c54 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c20:	f7ff fc06 	bl	8006430 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c24:	f7fc ffb4 	bl	8003b90 <HAL_GetTick>
 8006c28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c2c:	f7fc ffb0 	bl	8003b90 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e20e      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006c3e:	f7ff fc15 	bl	800646c <LL_RCC_HSI_IsReady>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0f1      	beq.n	8006c2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fc1f 	bl	8006490 <LL_RCC_HSI_SetCalibTrimming>
 8006c52:	e013      	b.n	8006c7c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c54:	f7ff fbfb 	bl	800644e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c58:	f7fc ff9a 	bl	8003b90 <HAL_GetTick>
 8006c5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c60:	f7fc ff96 	bl	8003b90 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e1f4      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006c72:	f7ff fbfb 	bl	800646c <LL_RCC_HSI_IsReady>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f1      	bne.n	8006c60 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0308 	and.w	r3, r3, #8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d106      	bne.n	8006c96 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80a3 	beq.w	8006ddc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d076      	beq.n	8006d8c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0310 	and.w	r3, r3, #16
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d046      	beq.n	8006d38 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006caa:	f7ff fc7e 	bl	80065aa <LL_RCC_LSI1_IsReady>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d113      	bne.n	8006cdc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006cb4:	f7ff fc57 	bl	8006566 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006cb8:	f7fc ff6a 	bl	8003b90 <HAL_GetTick>
 8006cbc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006cc0:	f7fc ff66 	bl	8003b90 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e1c4      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006cd2:	f7ff fc6a 	bl	80065aa <LL_RCC_LSI1_IsReady>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0f1      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006cdc:	f7ff fc77 	bl	80065ce <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce0:	f7fc ff56 	bl	8003b90 <HAL_GetTick>
 8006ce4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006ce8:	f7fc ff52 	bl	8003b90 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e1b0      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006cfa:	f7ff fc8a 	bl	8006612 <LL_RCC_LSI2_IsReady>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0f1      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff fc94 	bl	8006636 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006d0e:	f7ff fc3b 	bl	8006588 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d12:	f7fc ff3d 	bl	8003b90 <HAL_GetTick>
 8006d16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006d18:	e008      	b.n	8006d2c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006d1a:	f7fc ff39 	bl	8003b90 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e197      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006d2c:	f7ff fc3d 	bl	80065aa <LL_RCC_LSI1_IsReady>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f1      	bne.n	8006d1a <HAL_RCC_OscConfig+0x31a>
 8006d36:	e051      	b.n	8006ddc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006d38:	f7ff fc15 	bl	8006566 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3c:	f7fc ff28 	bl	8003b90 <HAL_GetTick>
 8006d40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006d42:	e00c      	b.n	8006d5e <HAL_RCC_OscConfig+0x35e>
 8006d44:	20000014 	.word	0x20000014
 8006d48:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006d4c:	f7fc ff20 	bl	8003b90 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e17e      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006d5e:	f7ff fc24 	bl	80065aa <LL_RCC_LSI1_IsReady>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0f1      	beq.n	8006d4c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006d68:	f7ff fc42 	bl	80065f0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006d6c:	e008      	b.n	8006d80 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006d6e:	f7fc ff0f 	bl	8003b90 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e16d      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006d80:	f7ff fc47 	bl	8006612 <LL_RCC_LSI2_IsReady>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f1      	bne.n	8006d6e <HAL_RCC_OscConfig+0x36e>
 8006d8a:	e027      	b.n	8006ddc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006d8c:	f7ff fc30 	bl	80065f0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d90:	f7fc fefe 	bl	8003b90 <HAL_GetTick>
 8006d94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006d98:	f7fc fefa 	bl	8003b90 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e158      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006daa:	f7ff fc32 	bl	8006612 <LL_RCC_LSI2_IsReady>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1f1      	bne.n	8006d98 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006db4:	f7ff fbe8 	bl	8006588 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db8:	f7fc feea 	bl	8003b90 <HAL_GetTick>
 8006dbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006dc0:	f7fc fee6 	bl	8003b90 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e144      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006dd2:	f7ff fbea 	bl	80065aa <LL_RCC_LSI1_IsReady>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f1      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d05b      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006de8:	4b9e      	ldr	r3, [pc, #632]	@ (8007064 <HAL_RCC_OscConfig+0x664>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d114      	bne.n	8006e1e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006df4:	f7ff fa7c 	bl	80062f0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006df8:	f7fc feca 	bl	8003b90 <HAL_GetTick>
 8006dfc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dfe:	e008      	b.n	8006e12 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e00:	f7fc fec6 	bl	8003b90 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e124      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e12:	4b94      	ldr	r3, [pc, #592]	@ (8007064 <HAL_RCC_OscConfig+0x664>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0f0      	beq.n	8006e00 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d102      	bne.n	8006e2c <HAL_RCC_OscConfig+0x42c>
 8006e26:	f7ff fb48 	bl	80064ba <LL_RCC_LSE_Enable>
 8006e2a:	e00c      	b.n	8006e46 <HAL_RCC_OscConfig+0x446>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	d104      	bne.n	8006e3e <HAL_RCC_OscConfig+0x43e>
 8006e34:	f7ff fb63 	bl	80064fe <LL_RCC_LSE_EnableBypass>
 8006e38:	f7ff fb3f 	bl	80064ba <LL_RCC_LSE_Enable>
 8006e3c:	e003      	b.n	8006e46 <HAL_RCC_OscConfig+0x446>
 8006e3e:	f7ff fb4d 	bl	80064dc <LL_RCC_LSE_Disable>
 8006e42:	f7ff fb6d 	bl	8006520 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d014      	beq.n	8006e78 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e4e:	f7fc fe9f 	bl	8003b90 <HAL_GetTick>
 8006e52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006e54:	e00a      	b.n	8006e6c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e56:	f7fc fe9b 	bl	8003b90 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e0f7      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006e6c:	f7ff fb69 	bl	8006542 <LL_RCC_LSE_IsReady>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0ef      	beq.n	8006e56 <HAL_RCC_OscConfig+0x456>
 8006e76:	e013      	b.n	8006ea0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e78:	f7fc fe8a 	bl	8003b90 <HAL_GetTick>
 8006e7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006e7e:	e00a      	b.n	8006e96 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e80:	f7fc fe86 	bl	8003b90 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e0e2      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006e96:	f7ff fb54 	bl	8006542 <LL_RCC_LSE_IsReady>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1ef      	bne.n	8006e80 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 80d8 	beq.w	800705a <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eaa:	f7ff fc5c 	bl	8006766 <LL_RCC_GetSysClkSource>
 8006eae:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	f040 80a6 	bne.w	800700e <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f003 0203 	and.w	r2, r3, #3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d123      	bne.n	8006f18 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d11c      	bne.n	8006f18 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	0a1b      	lsrs	r3, r3, #8
 8006ee2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d114      	bne.n	8006f18 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d10d      	bne.n	8006f18 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d106      	bne.n	8006f18 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d054      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b0c      	cmp	r3, #12
 8006f1c:	d04f      	beq.n	8006fbe <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006f1e:	f7ff fcc0 	bl	80068a2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f22:	f7fc fe35 	bl	8003b90 <HAL_GetTick>
 8006f26:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f2a:	f7fc fe31 	bl	8003b90 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e08f      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1ef      	bne.n	8006f2a <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f4e:	68da      	ldr	r2, [r3, #12]
 8006f50:	4b45      	ldr	r3, [pc, #276]	@ (8007068 <HAL_RCC_OscConfig+0x668>)
 8006f52:	4013      	ands	r3, r2
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f5c:	4311      	orrs	r1, r2
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f62:	0212      	lsls	r2, r2, #8
 8006f64:	4311      	orrs	r1, r2
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f6a:	4311      	orrs	r1, r2
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f70:	4311      	orrs	r1, r2
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006f76:	430a      	orrs	r2, r1
 8006f78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006f80:	f7ff fc80 	bl	8006884 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f94:	f7fc fdfc 	bl	8003b90 <HAL_GetTick>
 8006f98:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f9c:	f7fc fdf8 	bl	8003b90 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e056      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0ef      	beq.n	8006f9c <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fbc:	e04d      	b.n	800705a <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e04c      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d144      	bne.n	800705a <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006fd0:	f7ff fc58 	bl	8006884 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fe2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006fe4:	f7fc fdd4 	bl	8003b90 <HAL_GetTick>
 8006fe8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fec:	f7fc fdd0 	bl	8003b90 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e02e      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0ef      	beq.n	8006fec <HAL_RCC_OscConfig+0x5ec>
 800700c:	e025      	b.n	800705a <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b0c      	cmp	r3, #12
 8007012:	d020      	beq.n	8007056 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007014:	f7ff fc45 	bl	80068a2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007018:	f7fc fdba 	bl	8003b90 <HAL_GetTick>
 800701c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800701e:	e008      	b.n	8007032 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007020:	f7fc fdb6 	bl	8003b90 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e014      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1ef      	bne.n	8007020 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8007040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800704a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800704e:	f023 0303 	bic.w	r3, r3, #3
 8007052:	60d3      	str	r3, [r2, #12]
 8007054:	e001      	b.n	800705a <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e000      	b.n	800705c <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3734      	adds	r7, #52	@ 0x34
 8007060:	46bd      	mov	sp, r7
 8007062:	bd90      	pop	{r4, r7, pc}
 8007064:	58000400 	.word	0x58000400
 8007068:	11c1808c 	.word	0x11c1808c

0800706c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e12d      	b.n	80072dc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007080:	4b98      	ldr	r3, [pc, #608]	@ (80072e4 <HAL_RCC_ClockConfig+0x278>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d91b      	bls.n	80070c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800708e:	4b95      	ldr	r3, [pc, #596]	@ (80072e4 <HAL_RCC_ClockConfig+0x278>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f023 0207 	bic.w	r2, r3, #7
 8007096:	4993      	ldr	r1, [pc, #588]	@ (80072e4 <HAL_RCC_ClockConfig+0x278>)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	4313      	orrs	r3, r2
 800709c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800709e:	f7fc fd77 	bl	8003b90 <HAL_GetTick>
 80070a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070a4:	e008      	b.n	80070b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80070a6:	f7fc fd73 	bl	8003b90 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d901      	bls.n	80070b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e111      	b.n	80072dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070b8:	4b8a      	ldr	r3, [pc, #552]	@ (80072e4 <HAL_RCC_ClockConfig+0x278>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d1ef      	bne.n	80070a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d016      	beq.n	8007100 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff fb51 	bl	800677e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80070dc:	f7fc fd58 	bl	8003b90 <HAL_GetTick>
 80070e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80070e4:	f7fc fd54 	bl	8003b90 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e0f2      	b.n	80072dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80070f6:	f7ff fc26 	bl	8006946 <LL_RCC_IsActiveFlag_HPRE>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0f1      	beq.n	80070e4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b00      	cmp	r3, #0
 800710a:	d016      	beq.n	800713a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	4618      	mov	r0, r3
 8007112:	f7ff fb48 	bl	80067a6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007116:	f7fc fd3b 	bl	8003b90 <HAL_GetTick>
 800711a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800711c:	e008      	b.n	8007130 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800711e:	f7fc fd37 	bl	8003b90 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b02      	cmp	r3, #2
 800712a:	d901      	bls.n	8007130 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e0d5      	b.n	80072dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007130:	f7ff fc1b 	bl	800696a <LL_RCC_IsActiveFlag_C2HPRE>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d0f1      	beq.n	800711e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	d016      	beq.n	8007174 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff fb41 	bl	80067d2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007150:	f7fc fd1e 	bl	8003b90 <HAL_GetTick>
 8007154:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007156:	e008      	b.n	800716a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007158:	f7fc fd1a 	bl	8003b90 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	d901      	bls.n	800716a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e0b8      	b.n	80072dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800716a:	f7ff fc11 	bl	8006990 <LL_RCC_IsActiveFlag_SHDHPRE>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0f1      	beq.n	8007158 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d016      	beq.n	80071ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff fb3b 	bl	8006800 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800718a:	f7fc fd01 	bl	8003b90 <HAL_GetTick>
 800718e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007190:	e008      	b.n	80071a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007192:	f7fc fcfd 	bl	8003b90 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e09b      	b.n	80072dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80071a4:	f7ff fc07 	bl	80069b6 <LL_RCC_IsActiveFlag_PPRE1>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0f1      	beq.n	8007192 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d017      	beq.n	80071ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff fb31 	bl	8006828 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80071c6:	f7fc fce3 	bl	8003b90 <HAL_GetTick>
 80071ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80071cc:	e008      	b.n	80071e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80071ce:	f7fc fcdf 	bl	8003b90 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d901      	bls.n	80071e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e07d      	b.n	80072dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80071e0:	f7ff fbfb 	bl	80069da <LL_RCC_IsActiveFlag_PPRE2>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0f1      	beq.n	80071ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d043      	beq.n	800727e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d106      	bne.n	800720c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80071fe:	f7ff f905 	bl	800640c <LL_RCC_HSE_IsReady>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d11e      	bne.n	8007246 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e067      	b.n	80072dc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	2b03      	cmp	r3, #3
 8007212:	d106      	bne.n	8007222 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007214:	f7ff fb54 	bl	80068c0 <LL_RCC_PLL_IsReady>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d113      	bne.n	8007246 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e05c      	b.n	80072dc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d106      	bne.n	8007238 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800722a:	f7ff fa39 	bl	80066a0 <LL_RCC_MSI_IsReady>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d108      	bne.n	8007246 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e051      	b.n	80072dc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007238:	f7ff f918 	bl	800646c <LL_RCC_HSI_IsReady>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e04a      	b.n	80072dc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff fa77 	bl	800673e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007250:	f7fc fc9e 	bl	8003b90 <HAL_GetTick>
 8007254:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007256:	e00a      	b.n	800726e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007258:	f7fc fc9a 	bl	8003b90 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007266:	4293      	cmp	r3, r2
 8007268:	d901      	bls.n	800726e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e036      	b.n	80072dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800726e:	f7ff fa7a 	bl	8006766 <LL_RCC_GetSysClkSource>
 8007272:	4602      	mov	r2, r0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	429a      	cmp	r2, r3
 800727c:	d1ec      	bne.n	8007258 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800727e:	4b19      	ldr	r3, [pc, #100]	@ (80072e4 <HAL_RCC_ClockConfig+0x278>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	429a      	cmp	r2, r3
 800728a:	d21b      	bcs.n	80072c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800728c:	4b15      	ldr	r3, [pc, #84]	@ (80072e4 <HAL_RCC_ClockConfig+0x278>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f023 0207 	bic.w	r2, r3, #7
 8007294:	4913      	ldr	r1, [pc, #76]	@ (80072e4 <HAL_RCC_ClockConfig+0x278>)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	4313      	orrs	r3, r2
 800729a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800729c:	f7fc fc78 	bl	8003b90 <HAL_GetTick>
 80072a0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80072a4:	f7fc fc74 	bl	8003b90 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e012      	b.n	80072dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072b6:	4b0b      	ldr	r3, [pc, #44]	@ (80072e4 <HAL_RCC_ClockConfig+0x278>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0307 	and.w	r3, r3, #7
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d1ef      	bne.n	80072a4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80072c4:	f000 f87e 	bl	80073c4 <HAL_RCC_GetHCLKFreq>
 80072c8:	4603      	mov	r3, r0
 80072ca:	4a07      	ldr	r2, [pc, #28]	@ (80072e8 <HAL_RCC_ClockConfig+0x27c>)
 80072cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80072ce:	f7fc fc6b 	bl	8003ba8 <HAL_GetTickPrio>
 80072d2:	4603      	mov	r3, r0
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fc fc0d 	bl	8003af4 <HAL_InitTick>
 80072da:	4603      	mov	r3, r0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	58004000 	.word	0x58004000
 80072e8:	20000014 	.word	0x20000014

080072ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072ec:	b590      	push	{r4, r7, lr}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072f2:	f7ff fa38 	bl	8006766 <LL_RCC_GetSysClkSource>
 80072f6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80072fe:	f7ff f9f4 	bl	80066ea <LL_RCC_MSI_GetRange>
 8007302:	4603      	mov	r3, r0
 8007304:	091b      	lsrs	r3, r3, #4
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	4a2b      	ldr	r2, [pc, #172]	@ (80073b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800730c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	e04b      	b.n	80073ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b04      	cmp	r3, #4
 8007318:	d102      	bne.n	8007320 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800731a:	4b28      	ldr	r3, [pc, #160]	@ (80073bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	e045      	b.n	80073ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b08      	cmp	r3, #8
 8007324:	d10a      	bne.n	800733c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007326:	f7ff f841 	bl	80063ac <LL_RCC_HSE_IsEnabledDiv2>
 800732a:	4603      	mov	r3, r0
 800732c:	2b01      	cmp	r3, #1
 800732e:	d102      	bne.n	8007336 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007330:	4b22      	ldr	r3, [pc, #136]	@ (80073bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	e03a      	b.n	80073ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007336:	4b22      	ldr	r3, [pc, #136]	@ (80073c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	e037      	b.n	80073ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800733c:	f7ff faf7 	bl	800692e <LL_RCC_PLL_GetMainSource>
 8007340:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b02      	cmp	r3, #2
 8007346:	d003      	beq.n	8007350 <HAL_RCC_GetSysClockFreq+0x64>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b03      	cmp	r3, #3
 800734c:	d003      	beq.n	8007356 <HAL_RCC_GetSysClockFreq+0x6a>
 800734e:	e00d      	b.n	800736c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007350:	4b1a      	ldr	r3, [pc, #104]	@ (80073bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8007352:	60bb      	str	r3, [r7, #8]
        break;
 8007354:	e015      	b.n	8007382 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007356:	f7ff f829 	bl	80063ac <LL_RCC_HSE_IsEnabledDiv2>
 800735a:	4603      	mov	r3, r0
 800735c:	2b01      	cmp	r3, #1
 800735e:	d102      	bne.n	8007366 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007360:	4b16      	ldr	r3, [pc, #88]	@ (80073bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8007362:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007364:	e00d      	b.n	8007382 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007366:	4b16      	ldr	r3, [pc, #88]	@ (80073c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007368:	60bb      	str	r3, [r7, #8]
        break;
 800736a:	e00a      	b.n	8007382 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800736c:	f7ff f9bd 	bl	80066ea <LL_RCC_MSI_GetRange>
 8007370:	4603      	mov	r3, r0
 8007372:	091b      	lsrs	r3, r3, #4
 8007374:	f003 030f 	and.w	r3, r3, #15
 8007378:	4a0f      	ldr	r2, [pc, #60]	@ (80073b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800737a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800737e:	60bb      	str	r3, [r7, #8]
        break;
 8007380:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007382:	f7ff faaf 	bl	80068e4 <LL_RCC_PLL_GetN>
 8007386:	4602      	mov	r2, r0
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	fb03 f402 	mul.w	r4, r3, r2
 800738e:	f7ff fac2 	bl	8006916 <LL_RCC_PLL_GetDivider>
 8007392:	4603      	mov	r3, r0
 8007394:	091b      	lsrs	r3, r3, #4
 8007396:	3301      	adds	r3, #1
 8007398:	fbb4 f4f3 	udiv	r4, r4, r3
 800739c:	f7ff faaf 	bl	80068fe <LL_RCC_PLL_GetR>
 80073a0:	4603      	mov	r3, r0
 80073a2:	0f5b      	lsrs	r3, r3, #29
 80073a4:	3301      	adds	r3, #1
 80073a6:	fbb4 f3f3 	udiv	r3, r4, r3
 80073aa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80073ac:	68fb      	ldr	r3, [r7, #12]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd90      	pop	{r4, r7, pc}
 80073b6:	bf00      	nop
 80073b8:	0800f13c 	.word	0x0800f13c
 80073bc:	00f42400 	.word	0x00f42400
 80073c0:	01e84800 	.word	0x01e84800

080073c4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073c4:	b598      	push	{r3, r4, r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80073c8:	f7ff ff90 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 80073cc:	4604      	mov	r4, r0
 80073ce:	f7ff fa3f 	bl	8006850 <LL_RCC_GetAHBPrescaler>
 80073d2:	4603      	mov	r3, r0
 80073d4:	091b      	lsrs	r3, r3, #4
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	4a03      	ldr	r2, [pc, #12]	@ (80073e8 <HAL_RCC_GetHCLKFreq+0x24>)
 80073dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	bd98      	pop	{r3, r4, r7, pc}
 80073e8:	0800f0fc 	.word	0x0800f0fc

080073ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2bb0      	cmp	r3, #176	@ 0xb0
 80073f8:	d903      	bls.n	8007402 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80073fa:	4b14      	ldr	r3, [pc, #80]	@ (800744c <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80073fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	e007      	b.n	8007412 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	091b      	lsrs	r3, r3, #4
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	4a10      	ldr	r2, [pc, #64]	@ (800744c <RCC_SetFlashLatencyFromMSIRange+0x60>)
 800740c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007410:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007412:	f7ff fa29 	bl	8006868 <LL_RCC_GetAHB4Prescaler>
 8007416:	4603      	mov	r3, r0
 8007418:	091b      	lsrs	r3, r3, #4
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	4a0c      	ldr	r2, [pc, #48]	@ (8007450 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	fbb2 f3f3 	udiv	r3, r2, r3
 800742a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4a09      	ldr	r2, [pc, #36]	@ (8007454 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007430:	fba2 2303 	umull	r2, r3, r2, r3
 8007434:	0c9b      	lsrs	r3, r3, #18
 8007436:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800743a:	4618      	mov	r0, r3
 800743c:	f000 f80c 	bl	8007458 <RCC_SetFlashLatency>
 8007440:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	0800f13c 	.word	0x0800f13c
 8007450:	0800f0fc 	.word	0x0800f0fc
 8007454:	431bde83 	.word	0x431bde83

08007458 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007458:	b590      	push	{r4, r7, lr}
 800745a:	b08f      	sub	sp, #60	@ 0x3c
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007462:	4b24      	ldr	r3, [pc, #144]	@ (80074f4 <RCC_SetFlashLatency+0x9c>)
 8007464:	f107 041c 	add.w	r4, r7, #28
 8007468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800746a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800746e:	4b22      	ldr	r3, [pc, #136]	@ (80074f8 <RCC_SetFlashLatency+0xa0>)
 8007470:	f107 040c 	add.w	r4, r7, #12
 8007474:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800747a:	2300      	movs	r3, #0
 800747c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800747e:	2300      	movs	r3, #0
 8007480:	633b      	str	r3, [r7, #48]	@ 0x30
 8007482:	e013      	b.n	80074ac <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	3338      	adds	r3, #56	@ 0x38
 800748a:	443b      	add	r3, r7
 800748c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	429a      	cmp	r2, r3
 8007494:	d807      	bhi.n	80074a6 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8007496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	3338      	adds	r3, #56	@ 0x38
 800749c:	443b      	add	r3, r7
 800749e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80074a2:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 80074a4:	e005      	b.n	80074b2 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80074a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a8:	3301      	adds	r3, #1
 80074aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d9e8      	bls.n	8007484 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80074b2:	4b12      	ldr	r3, [pc, #72]	@ (80074fc <RCC_SetFlashLatency+0xa4>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f023 0207 	bic.w	r2, r3, #7
 80074ba:	4910      	ldr	r1, [pc, #64]	@ (80074fc <RCC_SetFlashLatency+0xa4>)
 80074bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074be:	4313      	orrs	r3, r2
 80074c0:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074c2:	f7fc fb65 	bl	8003b90 <HAL_GetTick>
 80074c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80074c8:	e008      	b.n	80074dc <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80074ca:	f7fc fb61 	bl	8003b90 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d901      	bls.n	80074dc <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e007      	b.n	80074ec <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80074dc:	4b07      	ldr	r3, [pc, #28]	@ (80074fc <RCC_SetFlashLatency+0xa4>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0307 	and.w	r3, r3, #7
 80074e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d1ef      	bne.n	80074ca <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	373c      	adds	r7, #60	@ 0x3c
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd90      	pop	{r4, r7, pc}
 80074f4:	0800eeec 	.word	0x0800eeec
 80074f8:	0800eefc 	.word	0x0800eefc
 80074fc:	58004000 	.word	0x58004000

08007500 <LL_RCC_LSE_IsEnabled>:
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b01      	cmp	r3, #1
 8007512:	d101      	bne.n	8007518 <LL_RCC_LSE_IsEnabled+0x18>
 8007514:	2301      	movs	r3, #1
 8007516:	e000      	b.n	800751a <LL_RCC_LSE_IsEnabled+0x1a>
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <LL_RCC_LSE_IsReady>:
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800752c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b02      	cmp	r3, #2
 8007536:	d101      	bne.n	800753c <LL_RCC_LSE_IsReady+0x18>
 8007538:	2301      	movs	r3, #1
 800753a:	e000      	b.n	800753e <LL_RCC_LSE_IsReady+0x1a>
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <LL_RCC_SetRFWKPClockSource>:
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007558:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800755c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4313      	orrs	r3, r2
 8007564:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <LL_RCC_SetSMPSClockSource>:
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800757c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007582:	f023 0203 	bic.w	r2, r3, #3
 8007586:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4313      	orrs	r3, r2
 800758e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <LL_RCC_SetSMPSPrescaler>:
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80075a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80075ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <LL_RCC_SetUSARTClockSource>:
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80075cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d4:	f023 0203 	bic.w	r2, r3, #3
 80075d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4313      	orrs	r3, r2
 80075e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <LL_RCC_SetLPUARTClockSource>:
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80075f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007600:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007604:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4313      	orrs	r3, r2
 800760c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <LL_RCC_SetI2CClockSource>:
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007628:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	091b      	lsrs	r3, r3, #4
 8007630:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007634:	43db      	mvns	r3, r3
 8007636:	401a      	ands	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	011b      	lsls	r3, r3, #4
 800763c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007640:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007644:	4313      	orrs	r3, r2
 8007646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <LL_RCC_SetLPTIMClockSource>:
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800765e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007662:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	0c1b      	lsrs	r3, r3, #16
 800766a:	041b      	lsls	r3, r3, #16
 800766c:	43db      	mvns	r3, r3
 800766e:	401a      	ands	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	041b      	lsls	r3, r3, #16
 8007674:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007678:	4313      	orrs	r3, r2
 800767a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <LL_RCC_SetRNGClockSource>:
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800769a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800769e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <LL_RCC_SetCLK48ClockSource>:
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80076be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80076d6:	bf00      	nop
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <LL_RCC_SetADCClockSource>:
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80076ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80076f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <LL_RCC_SetRTCClockSource>:
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800771a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800771e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007722:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <LL_RCC_GetRTCClockSource>:
{
 800773a:	b480      	push	{r7}
 800773c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800773e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800774a:	4618      	mov	r0, r3
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <LL_RCC_ForceBackupDomainReset>:
{
 8007754:	b480      	push	{r7}
 8007756:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800775c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007760:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800776c:	bf00      	nop
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007776:	b480      	push	{r7}
 8007778:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800777a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800777e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007782:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800778a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800778e:	bf00      	nop
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80077a0:	2300      	movs	r3, #0
 80077a2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80077a4:	2300      	movs	r3, #0
 80077a6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d046      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80077b4:	f7ff ffc1 	bl	800773a <LL_RCC_GetRTCClockSource>
 80077b8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d03c      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80077c4:	f7fe fd94 	bl	80062f0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d105      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7ff ff9b 	bl	800770e <LL_RCC_SetRTCClockSource>
 80077d8:	e02e      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80077da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80077e4:	f7ff ffb6 	bl	8007754 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80077e8:	f7ff ffc5 	bl	8007776 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80077fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007804:	f7ff fe7c 	bl	8007500 <LL_RCC_LSE_IsEnabled>
 8007808:	4603      	mov	r3, r0
 800780a:	2b01      	cmp	r3, #1
 800780c:	d114      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800780e:	f7fc f9bf 	bl	8003b90 <HAL_GetTick>
 8007812:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007814:	e00b      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007816:	f7fc f9bb 	bl	8003b90 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007824:	4293      	cmp	r3, r2
 8007826:	d902      	bls.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	77fb      	strb	r3, [r7, #31]
              break;
 800782c:	e004      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 800782e:	f7ff fe79 	bl	8007524 <LL_RCC_LSE_IsReady>
 8007832:	4603      	mov	r3, r0
 8007834:	2b01      	cmp	r3, #1
 8007836:	d1ee      	bne.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007838:	7ffb      	ldrb	r3, [r7, #31]
 800783a:	77bb      	strb	r3, [r7, #30]
 800783c:	e001      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783e:	7ffb      	ldrb	r3, [r7, #31]
 8007840:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff feb6 	bl	80075c4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff fec1 	bl	80075f0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0310 	and.w	r3, r3, #16
 8007876:	2b00      	cmp	r3, #0
 8007878:	d004      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	4618      	mov	r0, r3
 8007880:	f7ff fee9 	bl	8007656 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff fede 	bl	8007656 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d004      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7ff feb6 	bl	800761c <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d02b      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078c4:	d008      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078ce:	d003      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d105      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff fed4 	bl	800768a <LL_RCC_SetRNGClockSource>
 80078e2:	e00a      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x162>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	2000      	movs	r0, #0
 80078f0:	f7ff fecb 	bl	800768a <LL_RCC_SetRNGClockSource>
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f7ff fede 	bl	80076b6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007902:	d107      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800790e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007912:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800791c:	2b00      	cmp	r3, #0
 800791e:	d011      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	4618      	mov	r0, r3
 8007926:	f7ff fedc 	bl	80076e2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007932:	d107      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800793e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007942:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff fdf7 	bl	8007548 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d009      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff fe16 	bl	800759c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fdfd 	bl	8007574 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800797a:	7fbb      	ldrb	r3, [r7, #30]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3720      	adds	r7, #32
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e027      	b.n	80079e6 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	7a5b      	ldrb	r3, [r3, #9]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b00      	cmp	r3, #0
 800799e:	d105      	bne.n	80079ac <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7fb fbe6 	bl	8003178 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f023 0120 	bic.w	r1, r3, #32
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0204 	orr.w	r2, r2, #4
 80079d6:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f003 0320 	and.w	r3, r3, #32
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d005      	beq.n	8007a18 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2210      	movs	r2, #16
 8007a10:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8007a12:	2301      	movs	r3, #1
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	e009      	b.n	8007a2c <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d004      	beq.n	8007a2c <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2208      	movs	r2, #8
 8007a26:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d10b      	bne.n	8007a4a <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2204      	movs	r2, #4
 8007a36:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f837 	bl	8007aac <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8007a46:	605a      	str	r2, [r3, #4]

    return;
 8007a48:	e022      	b.n	8007a90 <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01d      	beq.n	8007a90 <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0208 	bic.w	r2, r2, #8
 8007a62:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689a      	ldr	r2, [r3, #8]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	7a5b      	ldrb	r3, [r3, #9]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	d00b      	beq.n	8007a90 <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f803 	bl	8007a96 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e09f      	b.n	8007c12 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7fb fb78 	bl	80031dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007af4:	4b49      	ldr	r3, [pc, #292]	@ (8007c1c <HAL_RTC_Init+0x15c>)
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f003 0310 	and.w	r3, r3, #16
 8007afc:	2b10      	cmp	r3, #16
 8007afe:	d07e      	beq.n	8007bfe <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	22ca      	movs	r2, #202	@ 0xca
 8007b06:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2253      	movs	r2, #83	@ 0x53
 8007b0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f8ab 	bl	8007c6c <RTC_EnterInitMode>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	22ff      	movs	r2, #255	@ 0xff
 8007b22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2204      	movs	r2, #4
 8007b28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	73fb      	strb	r3, [r7, #15]
 8007b30:	e067      	b.n	8007c02 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6812      	ldr	r2, [r2, #0]
 8007b3c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b44:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6899      	ldr	r1, [r3, #8]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	68d2      	ldr	r2, [r2, #12]
 8007b6c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6919      	ldr	r1, [r3, #16]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	041a      	lsls	r2, r3, #16
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b90:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0202 	bic.w	r2, r2, #2
 8007ba0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	69da      	ldr	r2, [r3, #28]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d113      	bne.n	8007bf0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f829 	bl	8007c20 <HAL_RTC_WaitForSynchro>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00d      	beq.n	8007bf0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	22ff      	movs	r2, #255	@ 0xff
 8007bda:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2204      	movs	r2, #4
 8007be0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e010      	b.n	8007c12 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	22ff      	movs	r2, #255	@ 0xff
 8007bf6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73fb      	strb	r3, [r7, #15]
 8007bfc:	e001      	b.n	8007c02 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d103      	bne.n	8007c10 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	40002800 	.word	0x40002800

08007c20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007c36:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007c38:	f7fb ffaa 	bl	8003b90 <HAL_GetTick>
 8007c3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c3e:	e009      	b.n	8007c54 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c40:	f7fb ffa6 	bl	8003b90 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c4e:	d901      	bls.n	8007c54 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e007      	b.n	8007c64 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0ee      	beq.n	8007c40 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d119      	bne.n	8007cb6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c8c:	f7fb ff80 	bl	8003b90 <HAL_GetTick>
 8007c90:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007c92:	e009      	b.n	8007ca8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007c94:	f7fb ff7c 	bl	8003b90 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ca2:	d901      	bls.n	8007ca8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e007      	b.n	8007cb8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0ee      	beq.n	8007c94 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d101      	bne.n	8007cda <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	e0a8      	b.n	8007e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	22ca      	movs	r2, #202	@ 0xca
 8007cf0:	625a      	str	r2, [r3, #36]	@ 0x24
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2253      	movs	r2, #83	@ 0x53
 8007cf8:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d020      	beq.n	8007d4a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007d08:	f7fb ff42 	bl	8003b90 <HAL_GetTick>
 8007d0c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007d0e:	e015      	b.n	8007d3c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d10:	f7fb ff3e 	bl	8003b90 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d1e:	d90d      	bls.n	8007d3c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	22ff      	movs	r2, #255	@ 0xff
 8007d26:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e077      	b.n	8007e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1e2      	bne.n	8007d10 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d58:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007d6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007d6c:	f7fb ff10 	bl	8003b90 <HAL_GetTick>
 8007d70:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007d72:	e015      	b.n	8007da0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d74:	f7fb ff0c 	bl	8003b90 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d82:	d90d      	bls.n	8007da0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	22ff      	movs	r2, #255	@ 0xff
 8007d8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2203      	movs	r2, #3
 8007d90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e045      	b.n	8007e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f003 0304 	and.w	r3, r3, #4
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0e2      	beq.n	8007d74 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0207 	bic.w	r2, r2, #7
 8007dc4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6899      	ldr	r1, [r3, #8]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007dd6:	4b17      	ldr	r3, [pc, #92]	@ (8007e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ddc:	4a15      	ldr	r2, [pc, #84]	@ (8007e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007dde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007de2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007de6:	4b13      	ldr	r3, [pc, #76]	@ (8007e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a12      	ldr	r2, [pc, #72]	@ (8007e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007dec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007df0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e00:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007e10:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	22ff      	movs	r2, #255	@ 0xff
 8007e18:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	58000800 	.word	0x58000800

08007e38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b0ba      	sub	sp, #232	@ 0xe8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007e62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007e66:	4013      	ands	r3, r2
 8007e68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007e6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d11b      	bne.n	8007eac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d015      	beq.n	8007eac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e84:	f003 0320 	and.w	r3, r3, #32
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d105      	bne.n	8007e98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d009      	beq.n	8007eac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 8300 	beq.w	80084a2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	4798      	blx	r3
      }
      return;
 8007eaa:	e2fa      	b.n	80084a2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007eac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 8123 	beq.w	80080fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007eb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007eba:	4b8d      	ldr	r3, [pc, #564]	@ (80080f0 <HAL_UART_IRQHandler+0x2b8>)
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d106      	bne.n	8007ed0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007ec2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007ec6:	4b8b      	ldr	r3, [pc, #556]	@ (80080f4 <HAL_UART_IRQHandler+0x2bc>)
 8007ec8:	4013      	ands	r3, r2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 8116 	beq.w	80080fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d011      	beq.n	8007f00 <HAL_UART_IRQHandler+0xc8>
 8007edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00b      	beq.n	8007f00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2201      	movs	r2, #1
 8007eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef6:	f043 0201 	orr.w	r2, r3, #1
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f04:	f003 0302 	and.w	r3, r3, #2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d011      	beq.n	8007f30 <HAL_UART_IRQHandler+0xf8>
 8007f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00b      	beq.n	8007f30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f26:	f043 0204 	orr.w	r2, r3, #4
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f34:	f003 0304 	and.w	r3, r3, #4
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d011      	beq.n	8007f60 <HAL_UART_IRQHandler+0x128>
 8007f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00b      	beq.n	8007f60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2204      	movs	r2, #4
 8007f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f56:	f043 0202 	orr.w	r2, r3, #2
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f64:	f003 0308 	and.w	r3, r3, #8
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d017      	beq.n	8007f9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f70:	f003 0320 	and.w	r3, r3, #32
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d105      	bne.n	8007f84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f7c:	4b5c      	ldr	r3, [pc, #368]	@ (80080f0 <HAL_UART_IRQHandler+0x2b8>)
 8007f7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00b      	beq.n	8007f9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2208      	movs	r2, #8
 8007f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f92:	f043 0208 	orr.w	r2, r3, #8
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d012      	beq.n	8007fce <HAL_UART_IRQHandler+0x196>
 8007fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00c      	beq.n	8007fce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fc4:	f043 0220 	orr.w	r2, r3, #32
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 8266 	beq.w	80084a6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fde:	f003 0320 	and.w	r3, r3, #32
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d013      	beq.n	800800e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fea:	f003 0320 	and.w	r3, r3, #32
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d105      	bne.n	8007ffe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d007      	beq.n	800800e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008014:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008022:	2b40      	cmp	r3, #64	@ 0x40
 8008024:	d005      	beq.n	8008032 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800802a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800802e:	2b00      	cmp	r3, #0
 8008030:	d054      	beq.n	80080dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fa58 	bl	80084e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008042:	2b40      	cmp	r3, #64	@ 0x40
 8008044:	d146      	bne.n	80080d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3308      	adds	r3, #8
 800804c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800805c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3308      	adds	r3, #8
 800806e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008072:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008076:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800807e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008082:	e841 2300 	strex	r3, r2, [r1]
 8008086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800808a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1d9      	bne.n	8008046 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008098:	2b00      	cmp	r3, #0
 800809a:	d017      	beq.n	80080cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080a2:	4a15      	ldr	r2, [pc, #84]	@ (80080f8 <HAL_UART_IRQHandler+0x2c0>)
 80080a4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fd f8a1 	bl	80051f4 <HAL_DMA_Abort_IT>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d019      	beq.n	80080ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80080c6:	4610      	mov	r0, r2
 80080c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ca:	e00f      	b.n	80080ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f9f5 	bl	80084bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d2:	e00b      	b.n	80080ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f9f1 	bl	80084bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080da:	e007      	b.n	80080ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f9ed 	bl	80084bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80080ea:	e1dc      	b.n	80084a6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ec:	bf00      	nop
    return;
 80080ee:	e1da      	b.n	80084a6 <HAL_UART_IRQHandler+0x66e>
 80080f0:	10000001 	.word	0x10000001
 80080f4:	04000120 	.word	0x04000120
 80080f8:	080085b5 	.word	0x080085b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008100:	2b01      	cmp	r3, #1
 8008102:	f040 8170 	bne.w	80083e6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800810a:	f003 0310 	and.w	r3, r3, #16
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 8169 	beq.w	80083e6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 8162 	beq.w	80083e6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2210      	movs	r2, #16
 8008128:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008134:	2b40      	cmp	r3, #64	@ 0x40
 8008136:	f040 80d8 	bne.w	80082ea <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008148:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 80af 	beq.w	80082b0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008158:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800815c:	429a      	cmp	r2, r3
 800815e:	f080 80a7 	bcs.w	80082b0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008168:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0320 	and.w	r3, r3, #32
 800817a:	2b00      	cmp	r3, #0
 800817c:	f040 8087 	bne.w	800828e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008194:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800819c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	461a      	mov	r2, r3
 80081a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80081b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80081c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1da      	bne.n	8008180 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3308      	adds	r3, #8
 80081d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80081da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081dc:	f023 0301 	bic.w	r3, r3, #1
 80081e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3308      	adds	r3, #8
 80081ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80081ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80081f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80081f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008200:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1e1      	bne.n	80081ca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3308      	adds	r3, #8
 800820c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800821c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3308      	adds	r3, #8
 8008226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800822a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800822c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008230:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008238:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e3      	bne.n	8008206 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008254:	e853 3f00 	ldrex	r3, [r3]
 8008258:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800825a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800825c:	f023 0310 	bic.w	r3, r3, #16
 8008260:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800826e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008270:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008274:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800827c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e4      	bne.n	800824c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008288:	4618      	mov	r0, r3
 800828a:	f7fc ff54 	bl	8005136 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2202      	movs	r2, #2
 8008292:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f911 	bl	80084d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80082ae:	e0fc      	b.n	80084aa <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082ba:	429a      	cmp	r2, r3
 80082bc:	f040 80f5 	bne.w	80084aa <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	f040 80eb 	bne.w	80084aa <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2202      	movs	r2, #2
 80082d8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f8f4 	bl	80084d0 <HAL_UARTEx_RxEventCallback>
      return;
 80082e8:	e0df      	b.n	80084aa <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008304:	b29b      	uxth	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 80d1 	beq.w	80084ae <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800830c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 80cc 	beq.w	80084ae <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831e:	e853 3f00 	ldrex	r3, [r3]
 8008322:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008326:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800832a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008338:	647b      	str	r3, [r7, #68]	@ 0x44
 800833a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800833e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008340:	e841 2300 	strex	r3, r2, [r1]
 8008344:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e4      	bne.n	8008316 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3308      	adds	r3, #8
 8008352:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	623b      	str	r3, [r7, #32]
   return(result);
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008362:	f023 0301 	bic.w	r3, r3, #1
 8008366:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3308      	adds	r3, #8
 8008370:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008374:	633a      	str	r2, [r7, #48]	@ 0x30
 8008376:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800837a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800837c:	e841 2300 	strex	r3, r2, [r1]
 8008380:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e1      	bne.n	800834c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2220      	movs	r2, #32
 800838c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f023 0310 	bic.w	r3, r3, #16
 80083b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80083be:	61fb      	str	r3, [r7, #28]
 80083c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c2:	69b9      	ldr	r1, [r7, #24]
 80083c4:	69fa      	ldr	r2, [r7, #28]
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	617b      	str	r3, [r7, #20]
   return(result);
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e4      	bne.n	800839c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2202      	movs	r2, #2
 80083d6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f876 	bl	80084d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083e4:	e063      	b.n	80084ae <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00e      	beq.n	8008410 <HAL_UART_IRQHandler+0x5d8>
 80083f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d008      	beq.n	8008410 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008406:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f914 	bl	8008636 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800840e:	e051      	b.n	80084b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008418:	2b00      	cmp	r3, #0
 800841a:	d014      	beq.n	8008446 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800841c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008424:	2b00      	cmp	r3, #0
 8008426:	d105      	bne.n	8008434 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800842c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d008      	beq.n	8008446 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008438:	2b00      	cmp	r3, #0
 800843a:	d03a      	beq.n	80084b2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	4798      	blx	r3
    }
    return;
 8008444:	e035      	b.n	80084b2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800844a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800844e:	2b00      	cmp	r3, #0
 8008450:	d009      	beq.n	8008466 <HAL_UART_IRQHandler+0x62e>
 8008452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f8be 	bl	80085e0 <UART_EndTransmit_IT>
    return;
 8008464:	e026      	b.n	80084b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800846a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d009      	beq.n	8008486 <HAL_UART_IRQHandler+0x64e>
 8008472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008476:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f8ed 	bl	800865e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008484:	e016      	b.n	80084b4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800848a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d010      	beq.n	80084b4 <HAL_UART_IRQHandler+0x67c>
 8008492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008496:	2b00      	cmp	r3, #0
 8008498:	da0c      	bge.n	80084b4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f8d5 	bl	800864a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084a0:	e008      	b.n	80084b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80084a2:	bf00      	nop
 80084a4:	e006      	b.n	80084b4 <HAL_UART_IRQHandler+0x67c>
    return;
 80084a6:	bf00      	nop
 80084a8:	e004      	b.n	80084b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80084aa:	bf00      	nop
 80084ac:	e002      	b.n	80084b4 <HAL_UART_IRQHandler+0x67c>
      return;
 80084ae:	bf00      	nop
 80084b0:	e000      	b.n	80084b4 <HAL_UART_IRQHandler+0x67c>
    return;
 80084b2:	bf00      	nop
  }
}
 80084b4:	37e8      	adds	r7, #232	@ 0xe8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop

080084bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b095      	sub	sp, #84	@ 0x54
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f8:	e853 3f00 	ldrex	r3, [r3]
 80084fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800850e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008510:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008514:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800851c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e6      	bne.n	80084f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3308      	adds	r3, #8
 8008528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	61fb      	str	r3, [r7, #28]
   return(result);
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008538:	f023 0301 	bic.w	r3, r3, #1
 800853c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3308      	adds	r3, #8
 8008544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008546:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008548:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800854c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e3      	bne.n	8008522 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800855e:	2b01      	cmp	r3, #1
 8008560:	d118      	bne.n	8008594 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	e853 3f00 	ldrex	r3, [r3]
 800856e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f023 0310 	bic.w	r3, r3, #16
 8008576:	647b      	str	r3, [r7, #68]	@ 0x44
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008580:	61bb      	str	r3, [r7, #24]
 8008582:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008584:	6979      	ldr	r1, [r7, #20]
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	e841 2300 	strex	r3, r2, [r1]
 800858c:	613b      	str	r3, [r7, #16]
   return(result);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e6      	bne.n	8008562 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2220      	movs	r2, #32
 8008598:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80085a8:	bf00      	nop
 80085aa:	3754      	adds	r7, #84	@ 0x54
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f7ff ff72 	bl	80084bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085d8:	bf00      	nop
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b088      	sub	sp, #32
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085fc:	61fb      	str	r3, [r7, #28]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	461a      	mov	r2, r3
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	61bb      	str	r3, [r7, #24]
 8008608:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6979      	ldr	r1, [r7, #20]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	613b      	str	r3, [r7, #16]
   return(result);
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e6      	bne.n	80085e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2220      	movs	r2, #32
 800861e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7f9 fe51 	bl	80022d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800862e:	bf00      	nop
 8008630:	3720      	adds	r7, #32
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008636:	b480      	push	{r7}
 8008638:	b083      	sub	sp, #12
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800863e:	bf00      	nop
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800864a:	b480      	push	{r7}
 800864c:	b083      	sub	sp, #12
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008652:	bf00      	nop
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr

0800865e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800865e:	b480      	push	{r7}
 8008660:	b083      	sub	sp, #12
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b088      	sub	sp, #32
 8008676:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800867c:	f107 0308 	add.w	r3, r7, #8
 8008680:	2218      	movs	r2, #24
 8008682:	2100      	movs	r1, #0
 8008684:	4618      	mov	r0, r3
 8008686:	f001 f92d 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800868a:	233f      	movs	r3, #63	@ 0x3f
 800868c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800868e:	2381      	movs	r3, #129	@ 0x81
 8008690:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008692:	1dfb      	adds	r3, r7, #7
 8008694:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008696:	2301      	movs	r3, #1
 8008698:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800869a:	f107 0308 	add.w	r3, r7, #8
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f001 fba9 	bl	8009df8 <hci_send_req>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	da01      	bge.n	80086b0 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80086ac:	23ff      	movs	r3, #255	@ 0xff
 80086ae:	e000      	b.n	80086b2 <aci_gap_set_non_discoverable+0x40>
  return status;
 80086b0:	79fb      	ldrb	r3, [r7, #7]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3720      	adds	r7, #32
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80086ba:	b5b0      	push	{r4, r5, r7, lr}
 80086bc:	b0ce      	sub	sp, #312	@ 0x138
 80086be:	af00      	add	r7, sp, #0
 80086c0:	4605      	mov	r5, r0
 80086c2:	460c      	mov	r4, r1
 80086c4:	4610      	mov	r0, r2
 80086c6:	4619      	mov	r1, r3
 80086c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086cc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80086d0:	462a      	mov	r2, r5
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80086dc:	4622      	mov	r2, r4
 80086de:	801a      	strh	r2, [r3, #0]
 80086e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086e4:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80086e8:	4602      	mov	r2, r0
 80086ea:	801a      	strh	r2, [r3, #0]
 80086ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086f0:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80086f4:	460a      	mov	r2, r1
 80086f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80086f8:	f107 0310 	add.w	r3, r7, #16
 80086fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008700:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8008704:	3308      	adds	r3, #8
 8008706:	f107 0210 	add.w	r2, r7, #16
 800870a:	4413      	add	r3, r2
 800870c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008710:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8008714:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8008718:	4413      	add	r3, r2
 800871a:	3309      	adds	r3, #9
 800871c:	f107 0210 	add.w	r2, r7, #16
 8008720:	4413      	add	r3, r2
 8008722:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008726:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800872a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008738:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800873c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008740:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008744:	7812      	ldrb	r2, [r2, #0]
 8008746:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008748:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800874c:	3301      	adds	r3, #1
 800874e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008752:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008756:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800875a:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800875e:	8812      	ldrh	r2, [r2, #0]
 8008760:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008764:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008768:	3302      	adds	r3, #2
 800876a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800876e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008772:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008776:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800877a:	8812      	ldrh	r2, [r2, #0]
 800877c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008780:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008784:	3302      	adds	r3, #2
 8008786:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800878a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800878e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008792:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8008796:	7812      	ldrb	r2, [r2, #0]
 8008798:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800879a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800879e:	3301      	adds	r3, #1
 80087a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80087a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087a8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80087ac:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80087ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80087b2:	3301      	adds	r3, #1
 80087b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80087b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087bc:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80087c0:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80087c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80087c6:	3301      	adds	r3, #1
 80087c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80087cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087d0:	3308      	adds	r3, #8
 80087d2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80087d6:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80087da:	4618      	mov	r0, r3
 80087dc:	f001 f872 	bl	80098c4 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80087e0:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80087e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80087e8:	4413      	add	r3, r2
 80087ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80087ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80087f2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80087f6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80087f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80087fc:	3301      	adds	r3, #1
 80087fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008802:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008806:	3301      	adds	r3, #1
 8008808:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800880c:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8008810:	4618      	mov	r0, r3
 8008812:	f001 f857 	bl	80098c4 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008816:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800881a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800881e:	4413      	add	r3, r2
 8008820:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8008824:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008828:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800882c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800882e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008832:	3302      	adds	r3, #2
 8008834:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8008838:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800883c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8008840:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008842:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008846:	3302      	adds	r3, #2
 8008848:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800884c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008850:	2218      	movs	r2, #24
 8008852:	2100      	movs	r1, #0
 8008854:	4618      	mov	r0, r3
 8008856:	f001 f845 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800885a:	233f      	movs	r3, #63	@ 0x3f
 800885c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8008860:	2383      	movs	r3, #131	@ 0x83
 8008862:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008866:	f107 0310 	add.w	r3, r7, #16
 800886a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800886e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008872:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008876:	f107 030f 	add.w	r3, r7, #15
 800887a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800887e:	2301      	movs	r3, #1
 8008880:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008884:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008888:	2100      	movs	r1, #0
 800888a:	4618      	mov	r0, r3
 800888c:	f001 fab4 	bl	8009df8 <hci_send_req>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	da01      	bge.n	800889a <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008896:	23ff      	movs	r3, #255	@ 0xff
 8008898:	e004      	b.n	80088a4 <aci_gap_set_discoverable+0x1ea>
  return status;
 800889a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800889e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80088a2:	781b      	ldrb	r3, [r3, #0]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bdb0      	pop	{r4, r5, r7, pc}

080088ae <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b0cc      	sub	sp, #304	@ 0x130
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	4602      	mov	r2, r0
 80088b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088ba:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80088be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80088c0:	f107 0310 	add.w	r3, r7, #16
 80088c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80088c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80088cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80088d0:	2200      	movs	r2, #0
 80088d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80088da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80088e2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80088e6:	7812      	ldrb	r2, [r2, #0]
 80088e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80088ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80088ee:	3301      	adds	r3, #1
 80088f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80088f8:	2218      	movs	r2, #24
 80088fa:	2100      	movs	r1, #0
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fff1 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008902:	233f      	movs	r3, #63	@ 0x3f
 8008904:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8008908:	2385      	movs	r3, #133	@ 0x85
 800890a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800890e:	f107 0310 	add.w	r3, r7, #16
 8008912:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008916:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800891a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800891e:	f107 030f 	add.w	r3, r7, #15
 8008922:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008926:	2301      	movs	r3, #1
 8008928:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800892c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008930:	2100      	movs	r1, #0
 8008932:	4618      	mov	r0, r3
 8008934:	f001 fa60 	bl	8009df8 <hci_send_req>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	da01      	bge.n	8008942 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800893e:	23ff      	movs	r3, #255	@ 0xff
 8008940:	e004      	b.n	800894c <aci_gap_set_io_capability+0x9e>
  return status;
 8008942:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008946:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800894a:	781b      	ldrb	r3, [r3, #0]
}
 800894c:	4618      	mov	r0, r3
 800894e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008956:	b5b0      	push	{r4, r5, r7, lr}
 8008958:	b0cc      	sub	sp, #304	@ 0x130
 800895a:	af00      	add	r7, sp, #0
 800895c:	4605      	mov	r5, r0
 800895e:	460c      	mov	r4, r1
 8008960:	4610      	mov	r0, r2
 8008962:	4619      	mov	r1, r3
 8008964:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008968:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800896c:	462a      	mov	r2, r5
 800896e:	701a      	strb	r2, [r3, #0]
 8008970:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008974:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008978:	4622      	mov	r2, r4
 800897a:	701a      	strb	r2, [r3, #0]
 800897c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008980:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008984:	4602      	mov	r2, r0
 8008986:	701a      	strb	r2, [r3, #0]
 8008988:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800898c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008990:	460a      	mov	r2, r1
 8008992:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008994:	f107 0310 	add.w	r3, r7, #16
 8008998:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800899c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80089a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80089a4:	2200      	movs	r2, #0
 80089a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80089ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80089b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80089b6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80089ba:	7812      	ldrb	r2, [r2, #0]
 80089bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80089be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80089c2:	3301      	adds	r3, #1
 80089c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80089c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80089cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80089d0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80089d4:	7812      	ldrb	r2, [r2, #0]
 80089d6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80089d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80089dc:	3301      	adds	r3, #1
 80089de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80089e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80089e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80089ea:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80089ee:	7812      	ldrb	r2, [r2, #0]
 80089f0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80089f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80089f6:	3301      	adds	r3, #1
 80089f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80089fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a00:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008a04:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8008a08:	7812      	ldrb	r2, [r2, #0]
 8008a0a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008a0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a10:	3301      	adds	r3, #1
 8008a12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a1a:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8008a1e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008a20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a24:	3301      	adds	r3, #1
 8008a26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a2e:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8008a32:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008a34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a38:	3301      	adds	r3, #1
 8008a3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a42:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8008a46:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008a48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a56:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008a5a:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a62:	3304      	adds	r3, #4
 8008a64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008a6c:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8008a70:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008a72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008a76:	3301      	adds	r3, #1
 8008a78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a80:	2218      	movs	r2, #24
 8008a82:	2100      	movs	r1, #0
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 ff2d 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a8a:	233f      	movs	r3, #63	@ 0x3f
 8008a8c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8008a90:	2386      	movs	r3, #134	@ 0x86
 8008a92:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008a96:	f107 0310 	add.w	r3, r7, #16
 8008a9a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008a9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008aa2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008aa6:	f107 030f 	add.w	r3, r7, #15
 8008aaa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ab4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f001 f99c 	bl	8009df8 <hci_send_req>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	da01      	bge.n	8008aca <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008ac6:	23ff      	movs	r3, #255	@ 0xff
 8008ac8:	e004      	b.n	8008ad4 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008aca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ace:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008ad2:	781b      	ldrb	r3, [r3, #0]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bdb0      	pop	{r4, r5, r7, pc}

08008ade <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b0cc      	sub	sp, #304	@ 0x130
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008aea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008aee:	6019      	str	r1, [r3, #0]
 8008af0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008af4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008af8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008afa:	f107 0310 	add.w	r3, r7, #16
 8008afe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008b02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b06:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008b1c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008b20:	8812      	ldrh	r2, [r2, #0]
 8008b22:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008b24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b28:	3302      	adds	r3, #2
 8008b2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8008b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008b32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008b36:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8008b3a:	6812      	ldr	r2, [r2, #0]
 8008b3c:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b44:	3304      	adds	r3, #4
 8008b46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b4e:	2218      	movs	r2, #24
 8008b50:	2100      	movs	r1, #0
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 fec6 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b58:	233f      	movs	r3, #63	@ 0x3f
 8008b5a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8008b5e:	2388      	movs	r3, #136	@ 0x88
 8008b60:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008b64:	f107 0310 	add.w	r3, r7, #16
 8008b68:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008b6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008b70:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008b74:	f107 030f 	add.w	r3, r7, #15
 8008b78:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b86:	2100      	movs	r1, #0
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f001 f935 	bl	8009df8 <hci_send_req>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	da01      	bge.n	8008b98 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8008b94:	23ff      	movs	r3, #255	@ 0xff
 8008b96:	e004      	b.n	8008ba2 <aci_gap_pass_key_resp+0xc4>
  return status;
 8008b98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008b9c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008ba0:	781b      	ldrb	r3, [r3, #0]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008bac:	b590      	push	{r4, r7, lr}
 8008bae:	b0cd      	sub	sp, #308	@ 0x134
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008bbc:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8008bc0:	6013      	str	r3, [r2, #0]
 8008bc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008bc6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008bca:	4622      	mov	r2, r4
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008bd2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	701a      	strb	r2, [r3, #0]
 8008bda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008bde:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008be2:	460a      	mov	r2, r1
 8008be4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008be6:	f107 0310 	add.w	r3, r7, #16
 8008bea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008bee:	f107 0308 	add.w	r3, r7, #8
 8008bf2:	2207      	movs	r2, #7
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fe74 	bl	80098e4 <Osal_MemSet>
  int index_input = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8008c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c06:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008c0a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008c0e:	7812      	ldrb	r2, [r2, #0]
 8008c10:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c16:	3301      	adds	r3, #1
 8008c18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c20:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008c24:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008c28:	7812      	ldrb	r2, [r2, #0]
 8008c2a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c30:	3301      	adds	r3, #1
 8008c32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008c3a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008c3e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008c42:	7812      	ldrb	r2, [r2, #0]
 8008c44:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c54:	2218      	movs	r2, #24
 8008c56:	2100      	movs	r1, #0
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 fe43 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c5e:	233f      	movs	r3, #63	@ 0x3f
 8008c60:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8008c64:	238a      	movs	r3, #138	@ 0x8a
 8008c66:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008c6a:	f107 0310 	add.w	r3, r7, #16
 8008c6e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008c76:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8008c7a:	f107 0308 	add.w	r3, r7, #8
 8008c7e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8008c82:	2307      	movs	r3, #7
 8008c84:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 f8b2 	bl	8009df8 <hci_send_req>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	da01      	bge.n	8008c9e <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008c9a:	23ff      	movs	r3, #255	@ 0xff
 8008c9c:	e02e      	b.n	8008cfc <aci_gap_init+0x150>
  if ( resp.Status )
 8008c9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ca2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d005      	beq.n	8008cb8 <aci_gap_init+0x10c>
    return resp.Status;
 8008cac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cb0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	e021      	b.n	8008cfc <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008cb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cbc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008cc0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008cd2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cd6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008cda:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008ce4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008ce6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008cea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8008cee:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008cf8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd90      	pop	{r4, r7, pc}

08008d06 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b0cc      	sub	sp, #304	@ 0x130
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d12:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008d16:	6019      	str	r1, [r3, #0]
 8008d18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d1c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008d20:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008d22:	f107 0310 	add.w	r3, r7, #16
 8008d26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008d2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d2e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008d32:	2200      	movs	r2, #0
 8008d34:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008d44:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8008d48:	7812      	ldrb	r2, [r2, #0]
 8008d4a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008d50:	3301      	adds	r3, #1
 8008d52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008d5a:	1c58      	adds	r0, r3, #1
 8008d5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d60:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008d64:	781a      	ldrb	r2, [r3, #0]
 8008d66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8008d6e:	6819      	ldr	r1, [r3, #0]
 8008d70:	f000 fda8 	bl	80098c4 <Osal_MemCpy>
  index_input += AdvDataLen;
 8008d74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008d78:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8008d82:	4413      	add	r3, r2
 8008d84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d8c:	2218      	movs	r2, #24
 8008d8e:	2100      	movs	r1, #0
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 fda7 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d96:	233f      	movs	r3, #63	@ 0x3f
 8008d98:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8008d9c:	238e      	movs	r3, #142	@ 0x8e
 8008d9e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008da2:	f107 0310 	add.w	r3, r7, #16
 8008da6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008daa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008dae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008db2:	f107 030f 	add.w	r3, r7, #15
 8008db6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008dc0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f001 f816 	bl	8009df8 <hci_send_req>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	da01      	bge.n	8008dd6 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008dd2:	23ff      	movs	r3, #255	@ 0xff
 8008dd4:	e004      	b.n	8008de0 <aci_gap_update_adv_data+0xda>
  return status;
 8008dd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008dda:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008dde:	781b      	ldrb	r3, [r3, #0]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b088      	sub	sp, #32
 8008dee:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008df4:	f107 0308 	add.w	r3, r7, #8
 8008df8:	2218      	movs	r2, #24
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 fd71 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e02:	233f      	movs	r3, #63	@ 0x3f
 8008e04:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008e06:	2392      	movs	r3, #146	@ 0x92
 8008e08:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008e0a:	1dfb      	adds	r3, r7, #7
 8008e0c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e12:	f107 0308 	add.w	r3, r7, #8
 8008e16:	2100      	movs	r1, #0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 ffed 	bl	8009df8 <hci_send_req>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	da01      	bge.n	8008e28 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008e24:	23ff      	movs	r3, #255	@ 0xff
 8008e26:	e000      	b.n	8008e2a <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8008e28:	79fb      	ldrb	r3, [r7, #7]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3720      	adds	r7, #32
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b0cc      	sub	sp, #304	@ 0x130
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	4602      	mov	r2, r0
 8008e3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e3e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8008e42:	801a      	strh	r2, [r3, #0]
 8008e44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e48:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8008e4c:	460a      	mov	r2, r1
 8008e4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008e50:	f107 0310 	add.w	r3, r7, #16
 8008e54:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8008e58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008e5c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008e60:	2200      	movs	r2, #0
 8008e62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e6e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e72:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8008e76:	8812      	ldrh	r2, [r2, #0]
 8008e78:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e7e:	3302      	adds	r3, #2
 8008e80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008e88:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8008e8c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8008e90:	7812      	ldrb	r2, [r2, #0]
 8008e92:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008e94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008e98:	3301      	adds	r3, #1
 8008e9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ea2:	2218      	movs	r2, #24
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fd1c 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008eac:	233f      	movs	r3, #63	@ 0x3f
 8008eae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8008eb2:	23a5      	movs	r3, #165	@ 0xa5
 8008eb4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8008eb8:	f107 0310 	add.w	r3, r7, #16
 8008ebc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8008ec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008ec4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8008ec8:	f107 030f 	add.w	r3, r7, #15
 8008ecc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ed6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008eda:	2100      	movs	r1, #0
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 ff8b 	bl	8009df8 <hci_send_req>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	da01      	bge.n	8008eec <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008ee8:	23ff      	movs	r3, #255	@ 0xff
 8008eea:	e004      	b.n	8008ef6 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008eec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008ef0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8008ef4:	781b      	ldrb	r3, [r3, #0]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b088      	sub	sp, #32
 8008f04:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f0a:	f107 0308 	add.w	r3, r7, #8
 8008f0e:	2218      	movs	r2, #24
 8008f10:	2100      	movs	r1, #0
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 fce6 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f18:	233f      	movs	r3, #63	@ 0x3f
 8008f1a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008f1c:	f240 1301 	movw	r3, #257	@ 0x101
 8008f20:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008f22:	1dfb      	adds	r3, r7, #7
 8008f24:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008f26:	2301      	movs	r3, #1
 8008f28:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f2a:	f107 0308 	add.w	r3, r7, #8
 8008f2e:	2100      	movs	r1, #0
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 ff61 	bl	8009df8 <hci_send_req>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	da01      	bge.n	8008f40 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008f3c:	23ff      	movs	r3, #255	@ 0xff
 8008f3e:	e000      	b.n	8008f42 <aci_gatt_init+0x42>
  return status;
 8008f40:	79fb      	ldrb	r3, [r7, #7]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3720      	adds	r7, #32
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008f4a:	b590      	push	{r4, r7, lr}
 8008f4c:	b0cf      	sub	sp, #316	@ 0x13c
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	4604      	mov	r4, r0
 8008f52:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8008f56:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8008f5a:	6001      	str	r1, [r0, #0]
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	4619      	mov	r1, r3
 8008f60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f64:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008f68:	4622      	mov	r2, r4
 8008f6a:	701a      	strb	r2, [r3, #0]
 8008f6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f70:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8008f74:	4602      	mov	r2, r0
 8008f76:	701a      	strb	r2, [r3, #0]
 8008f78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f7c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8008f80:	460a      	mov	r2, r1
 8008f82:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008f84:	f107 0310 	add.w	r3, r7, #16
 8008f88:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008f8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f90:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d00a      	beq.n	8008fb0 <aci_gatt_add_service+0x66>
 8008f9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008f9e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d101      	bne.n	8008fac <aci_gatt_add_service+0x62>
 8008fa8:	2311      	movs	r3, #17
 8008faa:	e002      	b.n	8008fb2 <aci_gatt_add_service+0x68>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <aci_gatt_add_service+0x68>
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	f107 0210 	add.w	r2, r7, #16
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008fbc:	f107 030c 	add.w	r3, r7, #12
 8008fc0:	2203      	movs	r2, #3
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 fc8d 	bl	80098e4 <Osal_MemSet>
  int index_input = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008fd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008fd4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8008fd8:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8008fdc:	7812      	ldrb	r2, [r2, #0]
 8008fde:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008fe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008fea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008fee:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d002      	beq.n	8008ffe <aci_gatt_add_service+0xb4>
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d004      	beq.n	8009006 <aci_gatt_add_service+0xbc>
 8008ffc:	e007      	b.n	800900e <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008ffe:	2302      	movs	r3, #2
 8009000:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8009004:	e005      	b.n	8009012 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009006:	2310      	movs	r3, #16
 8009008:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800900c:	e001      	b.n	8009012 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800900e:	2397      	movs	r3, #151	@ 0x97
 8009010:	e06c      	b.n	80090ec <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009012:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009016:	1c58      	adds	r0, r3, #1
 8009018:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800901c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009020:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009024:	6819      	ldr	r1, [r3, #0]
 8009026:	f000 fc4d 	bl	80098c4 <Osal_MemCpy>
    index_input += size;
 800902a:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800902e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009032:	4413      	add	r3, r2
 8009034:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8009038:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800903c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009040:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009044:	7812      	ldrb	r2, [r2, #0]
 8009046:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009048:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800904c:	3301      	adds	r3, #1
 800904e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009052:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009056:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800905a:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800905e:	7812      	ldrb	r2, [r2, #0]
 8009060:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009062:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009066:	3301      	adds	r3, #1
 8009068:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800906c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009070:	2218      	movs	r2, #24
 8009072:	2100      	movs	r1, #0
 8009074:	4618      	mov	r0, r3
 8009076:	f000 fc35 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800907a:	233f      	movs	r3, #63	@ 0x3f
 800907c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8009080:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8009084:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009088:	f107 0310 	add.w	r3, r7, #16
 800908c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009090:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009094:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009098:	f107 030c 	add.w	r3, r7, #12
 800909c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80090a0:	2303      	movs	r3, #3
 80090a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80090a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80090aa:	2100      	movs	r1, #0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 fea3 	bl	8009df8 <hci_send_req>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	da01      	bge.n	80090bc <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80090b8:	23ff      	movs	r3, #255	@ 0xff
 80090ba:	e017      	b.n	80090ec <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80090bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80090ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	e00a      	b.n	80090ec <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80090d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80090da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80090de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80090e8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd90      	pop	{r4, r7, pc}

080090f6 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80090f6:	b590      	push	{r4, r7, lr}
 80090f8:	b0d1      	sub	sp, #324	@ 0x144
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	4604      	mov	r4, r0
 80090fe:	4608      	mov	r0, r1
 8009100:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8009104:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8009108:	600a      	str	r2, [r1, #0]
 800910a:	4619      	mov	r1, r3
 800910c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009110:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009114:	4622      	mov	r2, r4
 8009116:	801a      	strh	r2, [r3, #0]
 8009118:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800911c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009120:	4602      	mov	r2, r0
 8009122:	701a      	strb	r2, [r3, #0]
 8009124:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009128:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800912c:	460a      	mov	r2, r1
 800912e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009130:	f107 0318 	add.w	r3, r7, #24
 8009134:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009138:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800913c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d00a      	beq.n	800915c <aci_gatt_add_char+0x66>
 8009146:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800914a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d101      	bne.n	8009158 <aci_gatt_add_char+0x62>
 8009154:	2313      	movs	r3, #19
 8009156:	e002      	b.n	800915e <aci_gatt_add_char+0x68>
 8009158:	2303      	movs	r3, #3
 800915a:	e000      	b.n	800915e <aci_gatt_add_char+0x68>
 800915c:	2305      	movs	r3, #5
 800915e:	f107 0218 	add.w	r2, r7, #24
 8009162:	4413      	add	r3, r2
 8009164:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009168:	f107 0314 	add.w	r3, r7, #20
 800916c:	2203      	movs	r2, #3
 800916e:	2100      	movs	r1, #0
 8009170:	4618      	mov	r0, r3
 8009172:	f000 fbb7 	bl	80098e4 <Osal_MemSet>
  int index_input = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800917c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009180:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009184:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009188:	8812      	ldrh	r2, [r2, #0]
 800918a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800918c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009190:	3302      	adds	r3, #2
 8009192:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009196:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800919a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800919e:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80091a2:	7812      	ldrb	r2, [r2, #0]
 80091a4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80091a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80091aa:	3301      	adds	r3, #1
 80091ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80091b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80091b4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d002      	beq.n	80091c4 <aci_gatt_add_char+0xce>
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d004      	beq.n	80091cc <aci_gatt_add_char+0xd6>
 80091c2:	e007      	b.n	80091d4 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80091c4:	2302      	movs	r3, #2
 80091c6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80091ca:	e005      	b.n	80091d8 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80091cc:	2310      	movs	r3, #16
 80091ce:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80091d2:	e001      	b.n	80091d8 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80091d4:	2397      	movs	r3, #151	@ 0x97
 80091d6:	e091      	b.n	80092fc <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80091d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80091dc:	1cd8      	adds	r0, r3, #3
 80091de:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80091e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80091e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80091ea:	6819      	ldr	r1, [r3, #0]
 80091ec:	f000 fb6a 	bl	80098c4 <Osal_MemCpy>
    index_input += size;
 80091f0:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80091f4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80091f8:	4413      	add	r3, r2
 80091fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80091fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009202:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8009206:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800920a:	8812      	ldrh	r2, [r2, #0]
 800920c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800920e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009212:	3302      	adds	r3, #2
 8009214:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009218:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800921c:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8009220:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009222:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009226:	3301      	adds	r3, #1
 8009228:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800922c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009230:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009234:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009236:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800923a:	3301      	adds	r3, #1
 800923c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009240:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009244:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8009248:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800924a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800924e:	3301      	adds	r3, #1
 8009250:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009254:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009258:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800925c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800925e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009262:	3301      	adds	r3, #1
 8009264:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009268:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800926c:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8009270:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009272:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009276:	3301      	adds	r3, #1
 8009278:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800927c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8009280:	2218      	movs	r2, #24
 8009282:	2100      	movs	r1, #0
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fb2d 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800928a:	233f      	movs	r3, #63	@ 0x3f
 800928c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8009290:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8009294:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8009298:	f107 0318 	add.w	r3, r7, #24
 800929c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80092a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80092a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80092a8:	f107 0314 	add.w	r3, r7, #20
 80092ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80092b0:	2303      	movs	r3, #3
 80092b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80092ba:	2100      	movs	r1, #0
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fd9b 	bl	8009df8 <hci_send_req>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	da01      	bge.n	80092cc <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80092c8:	23ff      	movs	r3, #255	@ 0xff
 80092ca:	e017      	b.n	80092fc <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80092cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d005      	beq.n	80092e6 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80092da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	e00a      	b.n	80092fc <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80092e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80092ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80092f8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8009302:	46bd      	mov	sp, r7
 8009304:	bd90      	pop	{r4, r7, pc}

08009306 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009306:	b5b0      	push	{r4, r5, r7, lr}
 8009308:	b0cc      	sub	sp, #304	@ 0x130
 800930a:	af00      	add	r7, sp, #0
 800930c:	4605      	mov	r5, r0
 800930e:	460c      	mov	r4, r1
 8009310:	4610      	mov	r0, r2
 8009312:	4619      	mov	r1, r3
 8009314:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009318:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800931c:	462a      	mov	r2, r5
 800931e:	801a      	strh	r2, [r3, #0]
 8009320:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009328:	4622      	mov	r2, r4
 800932a:	801a      	strh	r2, [r3, #0]
 800932c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009330:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8009334:	4602      	mov	r2, r0
 8009336:	701a      	strb	r2, [r3, #0]
 8009338:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800933c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8009340:	460a      	mov	r2, r1
 8009342:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009344:	f107 0310 	add.w	r3, r7, #16
 8009348:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800934c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009350:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009354:	2200      	movs	r2, #0
 8009356:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009358:	2300      	movs	r3, #0
 800935a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800935e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009362:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009366:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800936a:	8812      	ldrh	r2, [r2, #0]
 800936c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800936e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009372:	3302      	adds	r3, #2
 8009374:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8009378:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800937c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009380:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009384:	8812      	ldrh	r2, [r2, #0]
 8009386:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009388:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800938c:	3302      	adds	r3, #2
 800938e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8009392:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009396:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800939a:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800939e:	7812      	ldrb	r2, [r2, #0]
 80093a0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80093a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093a6:	3301      	adds	r3, #1
 80093a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80093ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80093b4:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80093b8:	7812      	ldrb	r2, [r2, #0]
 80093ba:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80093bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80093c0:	3301      	adds	r3, #1
 80093c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80093c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80093ca:	1d98      	adds	r0, r3, #6
 80093cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80093d0:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80093dc:	f000 fa72 	bl	80098c4 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80093e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80093e4:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80093ee:	4413      	add	r3, r2
 80093f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80093f8:	2218      	movs	r2, #24
 80093fa:	2100      	movs	r1, #0
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 fa71 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009402:	233f      	movs	r3, #63	@ 0x3f
 8009404:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8009408:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800940c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009410:	f107 0310 	add.w	r3, r7, #16
 8009414:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009418:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800941c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009420:	f107 030f 	add.w	r3, r7, #15
 8009424:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009428:	2301      	movs	r3, #1
 800942a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800942e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009432:	2100      	movs	r1, #0
 8009434:	4618      	mov	r0, r3
 8009436:	f000 fcdf 	bl	8009df8 <hci_send_req>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	da01      	bge.n	8009444 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009440:	23ff      	movs	r3, #255	@ 0xff
 8009442:	e004      	b.n	800944e <aci_gatt_update_char_value+0x148>
  return status;
 8009444:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009448:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800944c:	781b      	ldrb	r3, [r3, #0]
}
 800944e:	4618      	mov	r0, r3
 8009450:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009454:	46bd      	mov	sp, r7
 8009456:	bdb0      	pop	{r4, r5, r7, pc}

08009458 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b0cc      	sub	sp, #304	@ 0x130
 800945c:	af00      	add	r7, sp, #0
 800945e:	4602      	mov	r2, r0
 8009460:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009464:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009468:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800946a:	f107 0310 	add.w	r3, r7, #16
 800946e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009472:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009476:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009484:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009488:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800948c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009490:	8812      	ldrh	r2, [r2, #0]
 8009492:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009494:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009498:	3302      	adds	r3, #2
 800949a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800949e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094a2:	2218      	movs	r2, #24
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fa1c 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80094ac:	233f      	movs	r3, #63	@ 0x3f
 80094ae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80094b2:	f240 1325 	movw	r3, #293	@ 0x125
 80094b6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80094ba:	f107 0310 	add.w	r3, r7, #16
 80094be:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80094c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80094c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80094ca:	f107 030f 	add.w	r3, r7, #15
 80094ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80094d2:	2301      	movs	r3, #1
 80094d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80094dc:	2100      	movs	r1, #0
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 fc8a 	bl	8009df8 <hci_send_req>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	da01      	bge.n	80094ee <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 80094ea:	23ff      	movs	r3, #255	@ 0xff
 80094ec:	e004      	b.n	80094f8 <aci_gatt_confirm_indication+0xa0>
  return status;
 80094ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80094f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80094f6:	781b      	ldrb	r3, [r3, #0]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b0cc      	sub	sp, #304	@ 0x130
 8009506:	af00      	add	r7, sp, #0
 8009508:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800950c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009516:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800951a:	4602      	mov	r2, r0
 800951c:	701a      	strb	r2, [r3, #0]
 800951e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009522:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009526:	460a      	mov	r2, r1
 8009528:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800952a:	f107 0310 	add.w	r3, r7, #16
 800952e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009532:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009536:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800953a:	2200      	movs	r2, #0
 800953c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8009544:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009548:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800954c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009550:	7812      	ldrb	r2, [r2, #0]
 8009552:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009554:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009558:	3301      	adds	r3, #1
 800955a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800955e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009562:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009566:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800956a:	7812      	ldrb	r2, [r2, #0]
 800956c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800956e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009572:	3301      	adds	r3, #1
 8009574:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009578:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800957c:	1c98      	adds	r0, r3, #2
 800957e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009582:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009586:	781a      	ldrb	r2, [r3, #0]
 8009588:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800958c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009590:	6819      	ldr	r1, [r3, #0]
 8009592:	f000 f997 	bl	80098c4 <Osal_MemCpy>
  index_input += Length;
 8009596:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800959a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80095a4:	4413      	add	r3, r2
 80095a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095ae:	2218      	movs	r2, #24
 80095b0:	2100      	movs	r1, #0
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 f996 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80095b8:	233f      	movs	r3, #63	@ 0x3f
 80095ba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80095be:	230c      	movs	r3, #12
 80095c0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80095c4:	f107 0310 	add.w	r3, r7, #16
 80095c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80095cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80095d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80095d4:	f107 030f 	add.w	r3, r7, #15
 80095d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80095dc:	2301      	movs	r3, #1
 80095de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095e6:	2100      	movs	r1, #0
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fc05 	bl	8009df8 <hci_send_req>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	da01      	bge.n	80095f8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80095f4:	23ff      	movs	r3, #255	@ 0xff
 80095f6:	e004      	b.n	8009602 <aci_hal_write_config_data+0x100>
  return status;
 80095f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80095fc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009600:	781b      	ldrb	r3, [r3, #0]
}
 8009602:	4618      	mov	r0, r3
 8009604:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b0cc      	sub	sp, #304	@ 0x130
 8009610:	af00      	add	r7, sp, #0
 8009612:	4602      	mov	r2, r0
 8009614:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009618:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800961c:	701a      	strb	r2, [r3, #0]
 800961e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009622:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009626:	460a      	mov	r2, r1
 8009628:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800962a:	f107 0310 	add.w	r3, r7, #16
 800962e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009632:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009636:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800963a:	2200      	movs	r2, #0
 800963c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8009644:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009648:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800964c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009650:	7812      	ldrb	r2, [r2, #0]
 8009652:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009654:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009658:	3301      	adds	r3, #1
 800965a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800965e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009662:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009666:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800966a:	7812      	ldrb	r2, [r2, #0]
 800966c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800966e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009672:	3301      	adds	r3, #1
 8009674:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009678:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800967c:	2218      	movs	r2, #24
 800967e:	2100      	movs	r1, #0
 8009680:	4618      	mov	r0, r3
 8009682:	f000 f92f 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009686:	233f      	movs	r3, #63	@ 0x3f
 8009688:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800968c:	230f      	movs	r3, #15
 800968e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009692:	f107 0310 	add.w	r3, r7, #16
 8009696:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800969a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800969e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80096a2:	f107 030f 	add.w	r3, r7, #15
 80096a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80096aa:	2301      	movs	r3, #1
 80096ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096b4:	2100      	movs	r1, #0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 fb9e 	bl	8009df8 <hci_send_req>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	da01      	bge.n	80096c6 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80096c2:	23ff      	movs	r3, #255	@ 0xff
 80096c4:	e004      	b.n	80096d0 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80096c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096ca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80096ce:	781b      	ldrb	r3, [r3, #0]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b0cc      	sub	sp, #304	@ 0x130
 80096de:	af00      	add	r7, sp, #0
 80096e0:	4602      	mov	r2, r0
 80096e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096e6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80096ea:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80096ec:	f107 0310 	add.w	r3, r7, #16
 80096f0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80096f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80096f8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80096fc:	2200      	movs	r2, #0
 80096fe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009706:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800970a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800970e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009712:	8812      	ldrh	r2, [r2, #0]
 8009714:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009716:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800971a:	3302      	adds	r3, #2
 800971c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009720:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009724:	2218      	movs	r2, #24
 8009726:	2100      	movs	r1, #0
 8009728:	4618      	mov	r0, r3
 800972a:	f000 f8db 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800972e:	233f      	movs	r3, #63	@ 0x3f
 8009730:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8009734:	2318      	movs	r3, #24
 8009736:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800973a:	f107 0310 	add.w	r3, r7, #16
 800973e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009742:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009746:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800974a:	f107 030f 	add.w	r3, r7, #15
 800974e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009752:	2301      	movs	r3, #1
 8009754:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009758:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800975c:	2100      	movs	r1, #0
 800975e:	4618      	mov	r0, r3
 8009760:	f000 fb4a 	bl	8009df8 <hci_send_req>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	da01      	bge.n	800976e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800976a:	23ff      	movs	r3, #255	@ 0xff
 800976c:	e004      	b.n	8009778 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800976e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009772:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009776:	781b      	ldrb	r3, [r3, #0]
}
 8009778:	4618      	mov	r0, r3
 800977a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b088      	sub	sp, #32
 8009786:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009788:	2300      	movs	r3, #0
 800978a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800978c:	f107 0308 	add.w	r3, r7, #8
 8009790:	2218      	movs	r2, #24
 8009792:	2100      	movs	r1, #0
 8009794:	4618      	mov	r0, r3
 8009796:	f000 f8a5 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x03;
 800979a:	2303      	movs	r3, #3
 800979c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800979e:	2303      	movs	r3, #3
 80097a0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80097a2:	1dfb      	adds	r3, r7, #7
 80097a4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80097a6:	2301      	movs	r3, #1
 80097a8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097aa:	f107 0308 	add.w	r3, r7, #8
 80097ae:	2100      	movs	r1, #0
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 fb21 	bl	8009df8 <hci_send_req>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	da01      	bge.n	80097c0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80097bc:	23ff      	movs	r3, #255	@ 0xff
 80097be:	e000      	b.n	80097c2 <hci_reset+0x40>
  return status;
 80097c0:	79fb      	ldrb	r3, [r7, #7]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3720      	adds	r7, #32
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80097ca:	b590      	push	{r4, r7, lr}
 80097cc:	b0cd      	sub	sp, #308	@ 0x134
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	4604      	mov	r4, r0
 80097d2:	4608      	mov	r0, r1
 80097d4:	4611      	mov	r1, r2
 80097d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097da:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80097de:	4622      	mov	r2, r4
 80097e0:	701a      	strb	r2, [r3, #0]
 80097e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097e6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80097ea:	4602      	mov	r2, r0
 80097ec:	701a      	strb	r2, [r3, #0]
 80097ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80097f2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80097f6:	460a      	mov	r2, r1
 80097f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80097fa:	f107 0310 	add.w	r3, r7, #16
 80097fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009802:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009806:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800980a:	2200      	movs	r2, #0
 800980c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009814:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009818:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800981c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009820:	7812      	ldrb	r2, [r2, #0]
 8009822:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009824:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009828:	3301      	adds	r3, #1
 800982a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800982e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009832:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009836:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800983e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009842:	3301      	adds	r3, #1
 8009844:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009848:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800984c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009850:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009854:	7812      	ldrb	r2, [r2, #0]
 8009856:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009858:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800985c:	3301      	adds	r3, #1
 800985e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009862:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009866:	2218      	movs	r2, #24
 8009868:	2100      	movs	r1, #0
 800986a:	4618      	mov	r0, r3
 800986c:	f000 f83a 	bl	80098e4 <Osal_MemSet>
  rq.ogf = 0x08;
 8009870:	2308      	movs	r3, #8
 8009872:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8009876:	2331      	movs	r3, #49	@ 0x31
 8009878:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800987c:	f107 0310 	add.w	r3, r7, #16
 8009880:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009884:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009888:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800988c:	f107 030f 	add.w	r3, r7, #15
 8009890:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009894:	2301      	movs	r3, #1
 8009896:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800989a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800989e:	2100      	movs	r1, #0
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 faa9 	bl	8009df8 <hci_send_req>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da01      	bge.n	80098b0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80098ac:	23ff      	movs	r3, #255	@ 0xff
 80098ae:	e004      	b.n	80098ba <hci_le_set_default_phy+0xf0>
  return status;
 80098b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80098b4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80098b8:	781b      	ldrb	r3, [r3, #0]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd90      	pop	{r4, r7, pc}

080098c4 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	68b9      	ldr	r1, [r7, #8]
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f003 faa2 	bl	800ce1e <memcpy>
 80098da:	4603      	mov	r3, r0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	68b9      	ldr	r1, [r7, #8]
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f003 fa12 	bl	800cd1e <memset>
 80098fa:	4603      	mov	r3, r0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009904:	b480      	push	{r7}
 8009906:	af00      	add	r7, sp, #0
  return;
 8009908:	bf00      	nop
}
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009912:	b480      	push	{r7}
 8009914:	af00      	add	r7, sp, #0
  return;
 8009916:	bf00      	nop
}
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009920:	b480      	push	{r7}
 8009922:	af00      	add	r7, sp, #0
  return;
 8009924:	bf00      	nop
}
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800992e:	b480      	push	{r7}
 8009930:	af00      	add	r7, sp, #0
  return;
 8009932:	bf00      	nop
}
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800993c:	b480      	push	{r7}
 800993e:	af00      	add	r7, sp, #0
  return;
 8009940:	bf00      	nop
}
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800994a:	b480      	push	{r7}
 800994c:	af00      	add	r7, sp, #0
  return;
 800994e:	bf00      	nop
}
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0
  return;
 800995c:	bf00      	nop
}
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009966:	b480      	push	{r7}
 8009968:	af00      	add	r7, sp, #0
  return;
 800996a:	bf00      	nop
}
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009974:	b480      	push	{r7}
 8009976:	af00      	add	r7, sp, #0
  return;
 8009978:	bf00      	nop
}
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009982:	b480      	push	{r7}
 8009984:	af00      	add	r7, sp, #0
  return;
 8009986:	bf00      	nop
}
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009990:	b480      	push	{r7}
 8009992:	af00      	add	r7, sp, #0
  return;
 8009994:	bf00      	nop
}
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800999e:	b480      	push	{r7}
 80099a0:	af00      	add	r7, sp, #0
  return;
 80099a2:	bf00      	nop
}
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80099ac:	b480      	push	{r7}
 80099ae:	af00      	add	r7, sp, #0
  return;
 80099b0:	bf00      	nop
}
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr

080099ba <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80099ba:	b480      	push	{r7}
 80099bc:	af00      	add	r7, sp, #0
  return;
 80099be:	bf00      	nop
}
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80099c8:	b480      	push	{r7}
 80099ca:	af00      	add	r7, sp, #0
  return;
 80099cc:	bf00      	nop
}
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80099d6:	b480      	push	{r7}
 80099d8:	af00      	add	r7, sp, #0
  return;
 80099da:	bf00      	nop
}
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80099e4:	b480      	push	{r7}
 80099e6:	af00      	add	r7, sp, #0
  return;
 80099e8:	bf00      	nop
}
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
	...

080099f4 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80099f8:	4b04      	ldr	r3, [pc, #16]	@ (8009a0c <SVCCTL_Init+0x18>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80099fe:	4b04      	ldr	r3, [pc, #16]	@ (8009a10 <SVCCTL_Init+0x1c>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009a04:	f000 f806 	bl	8009a14 <SVCCTL_SvcInit>

  return;
 8009a08:	bf00      	nop
}
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20000200 	.word	0x20000200
 8009a10:	20000220 	.word	0x20000220

08009a14 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	af00      	add	r7, sp, #0
  BAS_Init();
 8009a18:	f7ff ff74 	bl	8009904 <BAS_Init>

  BLS_Init();
 8009a1c:	f7ff ff79 	bl	8009912 <BLS_Init>

  CRS_STM_Init();
 8009a20:	f7ff ff7e 	bl	8009920 <CRS_STM_Init>

  DIS_Init();
 8009a24:	f7ff ff83 	bl	800992e <DIS_Init>

  EDS_STM_Init();
 8009a28:	f7ff ff88 	bl	800993c <EDS_STM_Init>

  HIDS_Init();
 8009a2c:	f7ff ff8d 	bl	800994a <HIDS_Init>

  HRS_Init();
 8009a30:	f7ff ff92 	bl	8009958 <HRS_Init>

  HTS_Init();
 8009a34:	f7ff ff97 	bl	8009966 <HTS_Init>

  IAS_Init();
 8009a38:	f7ff ff9c 	bl	8009974 <IAS_Init>

  LLS_Init();
 8009a3c:	f7ff ffa1 	bl	8009982 <LLS_Init>

  TPS_Init();
 8009a40:	f7ff ffa6 	bl	8009990 <TPS_Init>

  MOTENV_STM_Init();
 8009a44:	f7ff ffab 	bl	800999e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009a48:	f7ff ffb0 	bl	80099ac <P2PS_STM_Init>

  ZDD_STM_Init();
 8009a4c:	f7ff ffb5 	bl	80099ba <ZDD_STM_Init>

  OTAS_STM_Init();
 8009a50:	f7ff ffba 	bl	80099c8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009a54:	f7ff ffc6 	bl	80099e4 <BVOPUS_STM_Init>

  MESH_Init();
 8009a58:	f7ff ffbd 	bl	80099d6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009a5c:	f001 fd7e 	bl	800b55c <SVCCTL_InitCustomSvc>
  
  return;
 8009a60:	bf00      	nop
}
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8009a6c:	4b09      	ldr	r3, [pc, #36]	@ (8009a94 <SVCCTL_RegisterSvcHandler+0x30>)
 8009a6e:	7f1b      	ldrb	r3, [r3, #28]
 8009a70:	4619      	mov	r1, r3
 8009a72:	4a08      	ldr	r2, [pc, #32]	@ (8009a94 <SVCCTL_RegisterSvcHandler+0x30>)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8009a7a:	4b06      	ldr	r3, [pc, #24]	@ (8009a94 <SVCCTL_RegisterSvcHandler+0x30>)
 8009a7c:	7f1b      	ldrb	r3, [r3, #28]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	4b04      	ldr	r3, [pc, #16]	@ (8009a94 <SVCCTL_RegisterSvcHandler+0x30>)
 8009a84:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009a86:	bf00      	nop
}
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	20000200 	.word	0x20000200

08009a98 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2bff      	cmp	r3, #255	@ 0xff
 8009ab0:	d125      	bne.n	8009afe <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	3302      	adds	r3, #2
 8009ab6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009ac2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ac6:	d118      	bne.n	8009afa <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009ac8:	2300      	movs	r3, #0
 8009aca:	757b      	strb	r3, [r7, #21]
 8009acc:	e00d      	b.n	8009aea <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009ace:	7d7b      	ldrb	r3, [r7, #21]
 8009ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8009b3c <SVCCTL_UserEvtRx+0xa4>)
 8009ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	4798      	blx	r3
 8009ada:	4603      	mov	r3, r0
 8009adc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009ade:	7dfb      	ldrb	r3, [r7, #23]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d108      	bne.n	8009af6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009ae4:	7d7b      	ldrb	r3, [r7, #21]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	757b      	strb	r3, [r7, #21]
 8009aea:	4b14      	ldr	r3, [pc, #80]	@ (8009b3c <SVCCTL_UserEvtRx+0xa4>)
 8009aec:	7f1b      	ldrb	r3, [r3, #28]
 8009aee:	7d7a      	ldrb	r2, [r7, #21]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d3ec      	bcc.n	8009ace <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009af4:	e002      	b.n	8009afc <SVCCTL_UserEvtRx+0x64>
              break;
 8009af6:	bf00      	nop
          break;
 8009af8:	e000      	b.n	8009afc <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8009afa:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009afc:	e000      	b.n	8009b00 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8009afe:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d00f      	beq.n	8009b26 <SVCCTL_UserEvtRx+0x8e>
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	dc10      	bgt.n	8009b2c <SVCCTL_UserEvtRx+0x94>
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d002      	beq.n	8009b14 <SVCCTL_UserEvtRx+0x7c>
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d006      	beq.n	8009b20 <SVCCTL_UserEvtRx+0x88>
 8009b12:	e00b      	b.n	8009b2c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 ff81 	bl	800aa1c <SVCCTL_App_Notification>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	75bb      	strb	r3, [r7, #22]
      break;
 8009b1e:	e008      	b.n	8009b32 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009b20:	2301      	movs	r3, #1
 8009b22:	75bb      	strb	r3, [r7, #22]
      break;
 8009b24:	e005      	b.n	8009b32 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009b26:	2300      	movs	r3, #0
 8009b28:	75bb      	strb	r3, [r7, #22]
      break;
 8009b2a:	e002      	b.n	8009b32 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	75bb      	strb	r3, [r7, #22]
      break;
 8009b30:	bf00      	nop
  }

  return (return_status);
 8009b32:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20000200 	.word	0x20000200

08009b40 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009b48:	f107 030c 	add.w	r3, r7, #12
 8009b4c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	212e      	movs	r1, #46	@ 0x2e
 8009b58:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8009b5c:	f000 fae8 	bl	800a130 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	330b      	adds	r3, #11
 8009b64:	78db      	ldrb	r3, [r3, #3]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3720      	adds	r7, #32
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b088      	sub	sp, #32
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009b76:	f107 030c 	add.w	r3, r7, #12
 8009b7a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	210f      	movs	r1, #15
 8009b86:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8009b8a:	f000 fad1 	bl	800a130 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	330b      	adds	r3, #11
 8009b92:	78db      	ldrb	r3, [r3, #3]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3720      	adds	r7, #32
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009ba4:	f107 030c 	add.w	r3, r7, #12
 8009ba8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	2110      	movs	r1, #16
 8009bb0:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8009bb4:	f000 fabc 	bl	800a130 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	330b      	adds	r3, #11
 8009bbc:	78db      	ldrb	r3, [r3, #3]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3720      	adds	r7, #32
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b08b      	sub	sp, #44	@ 0x2c
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009be4:	2300      	movs	r3, #0
 8009be6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8009d1c <SHCI_GetWirelessFwInfo+0x154>)
 8009bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009bf8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009c02:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a44      	ldr	r2, [pc, #272]	@ (8009d20 <SHCI_GetWirelessFwInfo+0x158>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d10f      	bne.n	8009c34 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	617b      	str	r3, [r7, #20]
 8009c32:	e01a      	b.n	8009c6a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8009c3c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8009c40:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6c:	0e1b      	lsrs	r3, r3, #24
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c76:	0c1b      	lsrs	r3, r3, #16
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c80:	0a1b      	lsrs	r3, r3, #8
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8a:	091b      	lsrs	r3, r3, #4
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	f003 030f 	and.w	r3, r3, #15
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	0e1b      	lsrs	r3, r3, #24
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	0c1b      	lsrs	r3, r3, #16
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	0a1b      	lsrs	r3, r3, #8
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	0e1b      	lsrs	r3, r3, #24
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	0c1b      	lsrs	r3, r3, #16
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	0a1b      	lsrs	r3, r3, #8
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	0e1b      	lsrs	r3, r3, #24
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	0c1b      	lsrs	r3, r3, #16
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	372c      	adds	r7, #44	@ 0x2c
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	58004000 	.word	0x58004000
 8009d20:	a94656b9 	.word	0xa94656b9

08009d24 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	4a08      	ldr	r2, [pc, #32]	@ (8009d54 <hci_init+0x30>)
 8009d34:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009d36:	4a08      	ldr	r2, [pc, #32]	@ (8009d58 <hci_init+0x34>)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009d3c:	4806      	ldr	r0, [pc, #24]	@ (8009d58 <hci_init+0x34>)
 8009d3e:	f000 f979 	bl	800a034 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 f8da 	bl	8009f00 <TlInit>

  return;
 8009d4c:	bf00      	nop
}
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	20000a20 	.word	0x20000a20
 8009d58:	200009f8 	.word	0x200009f8

08009d5c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009d62:	4822      	ldr	r0, [pc, #136]	@ (8009dec <hci_user_evt_proc+0x90>)
 8009d64:	f000 fd32 	bl	800a7cc <LST_is_empty>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d12b      	bne.n	8009dc6 <hci_user_evt_proc+0x6a>
 8009d6e:	4b20      	ldr	r3, [pc, #128]	@ (8009df0 <hci_user_evt_proc+0x94>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d027      	beq.n	8009dc6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009d76:	f107 030c 	add.w	r3, r7, #12
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	481b      	ldr	r0, [pc, #108]	@ (8009dec <hci_user_evt_proc+0x90>)
 8009d7e:	f000 fdb4 	bl	800a8ea <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009d82:	4b1c      	ldr	r3, [pc, #112]	@ (8009df4 <hci_user_evt_proc+0x98>)
 8009d84:	69db      	ldr	r3, [r3, #28]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00c      	beq.n	8009da4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009d92:	4b18      	ldr	r3, [pc, #96]	@ (8009df4 <hci_user_evt_proc+0x98>)
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	1d3a      	adds	r2, r7, #4
 8009d98:	4610      	mov	r0, r2
 8009d9a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009d9c:	793a      	ldrb	r2, [r7, #4]
 8009d9e:	4b14      	ldr	r3, [pc, #80]	@ (8009df0 <hci_user_evt_proc+0x94>)
 8009da0:	701a      	strb	r2, [r3, #0]
 8009da2:	e002      	b.n	8009daa <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009da4:	4b12      	ldr	r3, [pc, #72]	@ (8009df0 <hci_user_evt_proc+0x94>)
 8009da6:	2201      	movs	r2, #1
 8009da8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009daa:	4b11      	ldr	r3, [pc, #68]	@ (8009df0 <hci_user_evt_proc+0x94>)
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d004      	beq.n	8009dbc <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 fc0d 	bl	800a5d4 <TL_MM_EvtDone>
 8009dba:	e004      	b.n	8009dc6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	480a      	ldr	r0, [pc, #40]	@ (8009dec <hci_user_evt_proc+0x90>)
 8009dc2:	f000 fd25 	bl	800a810 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009dc6:	4809      	ldr	r0, [pc, #36]	@ (8009dec <hci_user_evt_proc+0x90>)
 8009dc8:	f000 fd00 	bl	800a7cc <LST_is_empty>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d107      	bne.n	8009de2 <hci_user_evt_proc+0x86>
 8009dd2:	4b07      	ldr	r3, [pc, #28]	@ (8009df0 <hci_user_evt_proc+0x94>)
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009dda:	4804      	ldr	r0, [pc, #16]	@ (8009dec <hci_user_evt_proc+0x90>)
 8009ddc:	f001 f844 	bl	800ae68 <hci_notify_asynch_evt>
  }


  return;
 8009de0:	bf00      	nop
 8009de2:	bf00      	nop
}
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	20000228 	.word	0x20000228
 8009df0:	20000234 	.word	0x20000234
 8009df4:	200009f8 	.word	0x200009f8

08009df8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b088      	sub	sp, #32
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	460b      	mov	r3, r1
 8009e02:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009e04:	2000      	movs	r0, #0
 8009e06:	f000 f8d1 	bl	8009fac <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	885b      	ldrh	r3, [r3, #2]
 8009e12:	b21b      	sxth	r3, r3
 8009e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e18:	b21a      	sxth	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	029b      	lsls	r3, r3, #10
 8009e20:	b21b      	sxth	r3, r3
 8009e22:	4313      	orrs	r3, r2
 8009e24:	b21b      	sxth	r3, r3
 8009e26:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8009e28:	4b33      	ldr	r3, [pc, #204]	@ (8009ef8 <hci_send_req+0x100>)
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	b2d9      	uxtb	r1, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	689a      	ldr	r2, [r3, #8]
 8009e38:	8bbb      	ldrh	r3, [r7, #28]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 f890 	bl	8009f60 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009e40:	e04e      	b.n	8009ee0 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009e42:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8009e46:	f001 f826 	bl	800ae96 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009e4a:	e043      	b.n	8009ed4 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009e4c:	f107 030c 	add.w	r3, r7, #12
 8009e50:	4619      	mov	r1, r3
 8009e52:	482a      	ldr	r0, [pc, #168]	@ (8009efc <hci_send_req+0x104>)
 8009e54:	f000 fd49 	bl	800a8ea <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	7a5b      	ldrb	r3, [r3, #9]
 8009e5c:	2b0f      	cmp	r3, #15
 8009e5e:	d114      	bne.n	8009e8a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	330b      	adds	r3, #11
 8009e64:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	885b      	ldrh	r3, [r3, #2]
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	8bba      	ldrh	r2, [r7, #28]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d104      	bne.n	8009e7c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	7812      	ldrb	r2, [r2, #0]
 8009e7a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	785b      	ldrb	r3, [r3, #1]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d027      	beq.n	8009ed4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009e84:	2301      	movs	r3, #1
 8009e86:	77fb      	strb	r3, [r7, #31]
 8009e88:	e024      	b.n	8009ed4 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	330b      	adds	r3, #11
 8009e8e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	8bba      	ldrh	r2, [r7, #28]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d114      	bne.n	8009ec8 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	7a9b      	ldrb	r3, [r3, #10]
 8009ea2:	3b03      	subs	r3, #3
 8009ea4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	695a      	ldr	r2, [r3, #20]
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	bfa8      	it	ge
 8009eb0:	461a      	movge	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6918      	ldr	r0, [r3, #16]
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	1cd9      	adds	r1, r3, #3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	f002 ffab 	bl	800ce1e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d001      	beq.n	8009ed4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009ed4:	4809      	ldr	r0, [pc, #36]	@ (8009efc <hci_send_req+0x104>)
 8009ed6:	f000 fc79 	bl	800a7cc <LST_is_empty>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d0b5      	beq.n	8009e4c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009ee0:	7ffb      	ldrb	r3, [r7, #31]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0ad      	beq.n	8009e42 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009ee6:	2001      	movs	r0, #1
 8009ee8:	f000 f860 	bl	8009fac <NotifyCmdStatus>

  return 0;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3720      	adds	r7, #32
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20000a24 	.word	0x20000a24
 8009efc:	20000a18 	.word	0x20000a18

08009f00 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009f08:	480f      	ldr	r0, [pc, #60]	@ (8009f48 <TlInit+0x48>)
 8009f0a:	f000 fc4f 	bl	800a7ac <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8009f4c <TlInit+0x4c>)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009f14:	480e      	ldr	r0, [pc, #56]	@ (8009f50 <TlInit+0x50>)
 8009f16:	f000 fc49 	bl	800a7ac <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f54 <TlInit+0x54>)
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009f20:	4b0d      	ldr	r3, [pc, #52]	@ (8009f58 <TlInit+0x58>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00a      	beq.n	8009f3e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f5c <TlInit+0x5c>)
 8009f2e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009f30:	4b09      	ldr	r3, [pc, #36]	@ (8009f58 <TlInit+0x58>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f107 0208 	add.w	r2, r7, #8
 8009f38:	4610      	mov	r0, r2
 8009f3a:	4798      	blx	r3
  }

  return;
 8009f3c:	bf00      	nop
 8009f3e:	bf00      	nop
}
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	20000a18 	.word	0x20000a18
 8009f4c:	20000230 	.word	0x20000230
 8009f50:	20000228 	.word	0x20000228
 8009f54:	20000234 	.word	0x20000234
 8009f58:	200009f8 	.word	0x200009f8
 8009f5c:	08009fed 	.word	0x08009fed

08009f60 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	4603      	mov	r3, r0
 8009f68:	603a      	str	r2, [r7, #0]
 8009f6a:	80fb      	strh	r3, [r7, #6]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009f70:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa4 <SendCmd+0x44>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	88fa      	ldrh	r2, [r7, #6]
 8009f76:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8009fa4 <SendCmd+0x44>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	797a      	ldrb	r2, [r7, #5]
 8009f80:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009f82:	4b08      	ldr	r3, [pc, #32]	@ (8009fa4 <SendCmd+0x44>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	330c      	adds	r3, #12
 8009f88:	797a      	ldrb	r2, [r7, #5]
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f002 ff46 	bl	800ce1e <memcpy>

  hciContext.io.Send(0,0);
 8009f92:	4b05      	ldr	r3, [pc, #20]	@ (8009fa8 <SendCmd+0x48>)
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	2100      	movs	r1, #0
 8009f98:	2000      	movs	r0, #0
 8009f9a:	4798      	blx	r3

  return;
 8009f9c:	bf00      	nop
}
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	20000230 	.word	0x20000230
 8009fa8:	200009f8 	.word	0x200009f8

08009fac <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d108      	bne.n	8009fce <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe8 <NotifyCmdStatus+0x3c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00d      	beq.n	8009fe0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009fc4:	4b08      	ldr	r3, [pc, #32]	@ (8009fe8 <NotifyCmdStatus+0x3c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2000      	movs	r0, #0
 8009fca:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009fcc:	e008      	b.n	8009fe0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009fce:	4b06      	ldr	r3, [pc, #24]	@ (8009fe8 <NotifyCmdStatus+0x3c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d004      	beq.n	8009fe0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009fd6:	4b04      	ldr	r3, [pc, #16]	@ (8009fe8 <NotifyCmdStatus+0x3c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2001      	movs	r0, #1
 8009fdc:	4798      	blx	r3
  return;
 8009fde:	bf00      	nop
 8009fe0:	bf00      	nop
}
 8009fe2:	3708      	adds	r7, #8
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	20000a20 	.word	0x20000a20

08009fec <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	7a5b      	ldrb	r3, [r3, #9]
 8009ff8:	2b0f      	cmp	r3, #15
 8009ffa:	d003      	beq.n	800a004 <TlEvtReceived+0x18>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	7a5b      	ldrb	r3, [r3, #9]
 800a000:	2b0e      	cmp	r3, #14
 800a002:	d107      	bne.n	800a014 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a004:	6879      	ldr	r1, [r7, #4]
 800a006:	4809      	ldr	r0, [pc, #36]	@ (800a02c <TlEvtReceived+0x40>)
 800a008:	f000 fc28 	bl	800a85c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a00c:	2000      	movs	r0, #0
 800a00e:	f000 ff37 	bl	800ae80 <hci_cmd_resp_release>
 800a012:	e006      	b.n	800a022 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a014:	6879      	ldr	r1, [r7, #4]
 800a016:	4806      	ldr	r0, [pc, #24]	@ (800a030 <TlEvtReceived+0x44>)
 800a018:	f000 fc20 	bl	800a85c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a01c:	4804      	ldr	r0, [pc, #16]	@ (800a030 <TlEvtReceived+0x44>)
 800a01e:	f000 ff23 	bl	800ae68 <hci_notify_asynch_evt>
  }

  return;
 800a022:	bf00      	nop
}
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	20000a18 	.word	0x20000a18
 800a030:	20000228 	.word	0x20000228

0800a034 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a05      	ldr	r2, [pc, #20]	@ (800a054 <hci_register_io_bus+0x20>)
 800a040:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a04      	ldr	r2, [pc, #16]	@ (800a058 <hci_register_io_bus+0x24>)
 800a046:	611a      	str	r2, [r3, #16]

  return;
 800a048:	bf00      	nop
}
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	0800a34d 	.word	0x0800a34d
 800a058:	0800a3b5 	.word	0x0800a3b5

0800a05c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	4a08      	ldr	r2, [pc, #32]	@ (800a08c <shci_init+0x30>)
 800a06c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a06e:	4a08      	ldr	r2, [pc, #32]	@ (800a090 <shci_init+0x34>)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a074:	4806      	ldr	r0, [pc, #24]	@ (800a090 <shci_init+0x34>)
 800a076:	f000 f915 	bl	800a2a4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 f898 	bl	800a1b4 <TlInit>

  return;
 800a084:	bf00      	nop
}
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20000a48 	.word	0x20000a48
 800a090:	20000a28 	.word	0x20000a28

0800a094 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a09a:	4822      	ldr	r0, [pc, #136]	@ (800a124 <shci_user_evt_proc+0x90>)
 800a09c:	f000 fb96 	bl	800a7cc <LST_is_empty>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d12b      	bne.n	800a0fe <shci_user_evt_proc+0x6a>
 800a0a6:	4b20      	ldr	r3, [pc, #128]	@ (800a128 <shci_user_evt_proc+0x94>)
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d027      	beq.n	800a0fe <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a0ae:	f107 030c 	add.w	r3, r7, #12
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	481b      	ldr	r0, [pc, #108]	@ (800a124 <shci_user_evt_proc+0x90>)
 800a0b6:	f000 fc18 	bl	800a8ea <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a0ba:	4b1c      	ldr	r3, [pc, #112]	@ (800a12c <shci_user_evt_proc+0x98>)
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00c      	beq.n	800a0dc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a0ca:	4b18      	ldr	r3, [pc, #96]	@ (800a12c <shci_user_evt_proc+0x98>)
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	1d3a      	adds	r2, r7, #4
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a0d4:	793a      	ldrb	r2, [r7, #4]
 800a0d6:	4b14      	ldr	r3, [pc, #80]	@ (800a128 <shci_user_evt_proc+0x94>)
 800a0d8:	701a      	strb	r2, [r3, #0]
 800a0da:	e002      	b.n	800a0e2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a0dc:	4b12      	ldr	r3, [pc, #72]	@ (800a128 <shci_user_evt_proc+0x94>)
 800a0de:	2201      	movs	r2, #1
 800a0e0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a0e2:	4b11      	ldr	r3, [pc, #68]	@ (800a128 <shci_user_evt_proc+0x94>)
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d004      	beq.n	800a0f4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f000 fa71 	bl	800a5d4 <TL_MM_EvtDone>
 800a0f2:	e004      	b.n	800a0fe <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	480a      	ldr	r0, [pc, #40]	@ (800a124 <shci_user_evt_proc+0x90>)
 800a0fa:	f000 fb89 	bl	800a810 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a0fe:	4809      	ldr	r0, [pc, #36]	@ (800a124 <shci_user_evt_proc+0x90>)
 800a100:	f000 fb64 	bl	800a7cc <LST_is_empty>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d107      	bne.n	800a11a <shci_user_evt_proc+0x86>
 800a10a:	4b07      	ldr	r3, [pc, #28]	@ (800a128 <shci_user_evt_proc+0x94>)
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a112:	4804      	ldr	r0, [pc, #16]	@ (800a124 <shci_user_evt_proc+0x90>)
 800a114:	f7f7 fa39 	bl	800158a <shci_notify_asynch_evt>
  }


  return;
 800a118:	bf00      	nop
 800a11a:	bf00      	nop
}
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	20000238 	.word	0x20000238
 800a128:	20000248 	.word	0x20000248
 800a12c:	20000a28 	.word	0x20000a28

0800a130 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	60ba      	str	r2, [r7, #8]
 800a138:	607b      	str	r3, [r7, #4]
 800a13a:	4603      	mov	r3, r0
 800a13c:	81fb      	strh	r3, [r7, #14]
 800a13e:	460b      	mov	r3, r1
 800a140:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a142:	2000      	movs	r0, #0
 800a144:	f000 f868 	bl	800a218 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a148:	4b17      	ldr	r3, [pc, #92]	@ (800a1a8 <shci_send+0x78>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	89fa      	ldrh	r2, [r7, #14]
 800a14e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a152:	4b15      	ldr	r3, [pc, #84]	@ (800a1a8 <shci_send+0x78>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	7b7a      	ldrb	r2, [r7, #13]
 800a158:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a15a:	4b13      	ldr	r3, [pc, #76]	@ (800a1a8 <shci_send+0x78>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	330c      	adds	r3, #12
 800a160:	7b7a      	ldrb	r2, [r7, #13]
 800a162:	68b9      	ldr	r1, [r7, #8]
 800a164:	4618      	mov	r0, r3
 800a166:	f002 fe5a 	bl	800ce1e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800a16a:	4b10      	ldr	r3, [pc, #64]	@ (800a1ac <shci_send+0x7c>)
 800a16c:	2201      	movs	r2, #1
 800a16e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800a170:	4b0f      	ldr	r3, [pc, #60]	@ (800a1b0 <shci_send+0x80>)
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	2100      	movs	r1, #0
 800a176:	2000      	movs	r0, #0
 800a178:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a17a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800a17e:	f7f7 fa1b 	bl	80015b8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f103 0008 	add.w	r0, r3, #8
 800a188:	4b07      	ldr	r3, [pc, #28]	@ (800a1a8 <shci_send+0x78>)
 800a18a:	6819      	ldr	r1, [r3, #0]
 800a18c:	4b06      	ldr	r3, [pc, #24]	@ (800a1a8 <shci_send+0x78>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	789b      	ldrb	r3, [r3, #2]
 800a192:	3303      	adds	r3, #3
 800a194:	461a      	mov	r2, r3
 800a196:	f002 fe42 	bl	800ce1e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a19a:	2001      	movs	r0, #1
 800a19c:	f000 f83c 	bl	800a218 <Cmd_SetStatus>

  return;
 800a1a0:	bf00      	nop
}
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	20000244 	.word	0x20000244
 800a1ac:	20000a4c 	.word	0x20000a4c
 800a1b0:	20000a28 	.word	0x20000a28

0800a1b4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a1bc:	4a10      	ldr	r2, [pc, #64]	@ (800a200 <TlInit+0x4c>)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a1c2:	4810      	ldr	r0, [pc, #64]	@ (800a204 <TlInit+0x50>)
 800a1c4:	f000 faf2 	bl	800a7ac <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	f000 f825 	bl	800a218 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a1ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a208 <TlInit+0x54>)
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a1d4:	4b0d      	ldr	r3, [pc, #52]	@ (800a20c <TlInit+0x58>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00c      	beq.n	800a1f6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a210 <TlInit+0x5c>)
 800a1e2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <TlInit+0x60>)
 800a1e6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a1e8:	4b08      	ldr	r3, [pc, #32]	@ (800a20c <TlInit+0x58>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f107 020c 	add.w	r2, r7, #12
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	4798      	blx	r3
  }

  return;
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop
}
 800a1f8:	3718      	adds	r7, #24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	20000244 	.word	0x20000244
 800a204:	20000238 	.word	0x20000238
 800a208:	20000248 	.word	0x20000248
 800a20c:	20000a28 	.word	0x20000a28
 800a210:	0800a269 	.word	0x0800a269
 800a214:	0800a281 	.word	0x0800a281

0800a218 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	4603      	mov	r3, r0
 800a220:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a222:	79fb      	ldrb	r3, [r7, #7]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10b      	bne.n	800a240 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a228:	4b0d      	ldr	r3, [pc, #52]	@ (800a260 <Cmd_SetStatus+0x48>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a230:	4b0b      	ldr	r3, [pc, #44]	@ (800a260 <Cmd_SetStatus+0x48>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2000      	movs	r0, #0
 800a236:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a238:	4b0a      	ldr	r3, [pc, #40]	@ (800a264 <Cmd_SetStatus+0x4c>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a23e:	e00b      	b.n	800a258 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a240:	4b08      	ldr	r3, [pc, #32]	@ (800a264 <Cmd_SetStatus+0x4c>)
 800a242:	2201      	movs	r2, #1
 800a244:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a246:	4b06      	ldr	r3, [pc, #24]	@ (800a260 <Cmd_SetStatus+0x48>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d004      	beq.n	800a258 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a24e:	4b04      	ldr	r3, [pc, #16]	@ (800a260 <Cmd_SetStatus+0x48>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2001      	movs	r0, #1
 800a254:	4798      	blx	r3
  return;
 800a256:	bf00      	nop
 800a258:	bf00      	nop
}
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	20000a48 	.word	0x20000a48
 800a264:	20000240 	.word	0x20000240

0800a268 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a270:	2000      	movs	r0, #0
 800a272:	f7f7 f996 	bl	80015a2 <shci_cmd_resp_release>

  return;
 800a276:	bf00      	nop
}
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	4805      	ldr	r0, [pc, #20]	@ (800a2a0 <TlUserEvtReceived+0x20>)
 800a28c:	f000 fae6 	bl	800a85c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a290:	4803      	ldr	r0, [pc, #12]	@ (800a2a0 <TlUserEvtReceived+0x20>)
 800a292:	f7f7 f97a 	bl	800158a <shci_notify_asynch_evt>

  return;
 800a296:	bf00      	nop
}
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000238 	.word	0x20000238

0800a2a4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a05      	ldr	r2, [pc, #20]	@ (800a2c4 <shci_register_io_bus+0x20>)
 800a2b0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a04      	ldr	r2, [pc, #16]	@ (800a2c8 <shci_register_io_bus+0x24>)
 800a2b6:	611a      	str	r2, [r3, #16]

  return;
 800a2b8:	bf00      	nop
}
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	0800a461 	.word	0x0800a461
 800a2c8:	0800a4b5 	.word	0x0800a4b5

0800a2cc <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a2d0:	f001 fbd2 	bl	800ba78 <HW_IPCC_Enable>

  return;
 800a2d4:	bf00      	nop
}
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <TL_Init>:


void TL_Init( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a2dc:	4b10      	ldr	r3, [pc, #64]	@ (800a320 <TL_Init+0x48>)
 800a2de:	4a11      	ldr	r2, [pc, #68]	@ (800a324 <TL_Init+0x4c>)
 800a2e0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a2e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a320 <TL_Init+0x48>)
 800a2e4:	4a10      	ldr	r2, [pc, #64]	@ (800a328 <TL_Init+0x50>)
 800a2e6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a2e8:	4b0d      	ldr	r3, [pc, #52]	@ (800a320 <TL_Init+0x48>)
 800a2ea:	4a10      	ldr	r2, [pc, #64]	@ (800a32c <TL_Init+0x54>)
 800a2ec:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a2ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a320 <TL_Init+0x48>)
 800a2f0:	4a0f      	ldr	r2, [pc, #60]	@ (800a330 <TL_Init+0x58>)
 800a2f2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a2f4:	4b0a      	ldr	r3, [pc, #40]	@ (800a320 <TL_Init+0x48>)
 800a2f6:	4a0f      	ldr	r2, [pc, #60]	@ (800a334 <TL_Init+0x5c>)
 800a2f8:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a2fa:	4b09      	ldr	r3, [pc, #36]	@ (800a320 <TL_Init+0x48>)
 800a2fc:	4a0e      	ldr	r2, [pc, #56]	@ (800a338 <TL_Init+0x60>)
 800a2fe:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a300:	4b07      	ldr	r3, [pc, #28]	@ (800a320 <TL_Init+0x48>)
 800a302:	4a0e      	ldr	r2, [pc, #56]	@ (800a33c <TL_Init+0x64>)
 800a304:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a306:	4b06      	ldr	r3, [pc, #24]	@ (800a320 <TL_Init+0x48>)
 800a308:	4a0d      	ldr	r2, [pc, #52]	@ (800a340 <TL_Init+0x68>)
 800a30a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a30c:	4b04      	ldr	r3, [pc, #16]	@ (800a320 <TL_Init+0x48>)
 800a30e:	4a0d      	ldr	r2, [pc, #52]	@ (800a344 <TL_Init+0x6c>)
 800a310:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a312:	4b03      	ldr	r3, [pc, #12]	@ (800a320 <TL_Init+0x48>)
 800a314:	4a0c      	ldr	r2, [pc, #48]	@ (800a348 <TL_Init+0x70>)
 800a316:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a318:	f001 fbc2 	bl	800baa0 <HW_IPCC_Init>

  return;
 800a31c:	bf00      	nop
}
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20030000 	.word	0x20030000
 800a324:	20030028 	.word	0x20030028
 800a328:	20030048 	.word	0x20030048
 800a32c:	20030058 	.word	0x20030058
 800a330:	20030068 	.word	0x20030068
 800a334:	20030070 	.word	0x20030070
 800a338:	20030078 	.word	0x20030078
 800a33c:	20030080 	.word	0x20030080
 800a340:	2003009c 	.word	0x2003009c
 800a344:	200300a0 	.word	0x200300a0
 800a348:	200300ac 	.word	0x200300ac

0800a34c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a358:	4811      	ldr	r0, [pc, #68]	@ (800a3a0 <TL_BLE_Init+0x54>)
 800a35a:	f000 fa27 	bl	800a7ac <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a35e:	4b11      	ldr	r3, [pc, #68]	@ (800a3a4 <TL_BLE_Init+0x58>)
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	68da      	ldr	r2, [r3, #12]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	4a0c      	ldr	r2, [pc, #48]	@ (800a3a8 <TL_BLE_Init+0x5c>)
 800a378:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	4a08      	ldr	r2, [pc, #32]	@ (800a3a0 <TL_BLE_Init+0x54>)
 800a37e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a380:	f001 fbc2 	bl	800bb08 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a08      	ldr	r2, [pc, #32]	@ (800a3ac <TL_BLE_Init+0x60>)
 800a38a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	4a07      	ldr	r2, [pc, #28]	@ (800a3b0 <TL_BLE_Init+0x64>)
 800a392:	6013      	str	r3, [r2, #0]

  return 0;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	200300c8 	.word	0x200300c8
 800a3a4:	20030000 	.word	0x20030000
 800a3a8:	20030a58 	.word	0x20030a58
 800a3ac:	20000a58 	.word	0x20000a58
 800a3b0:	20000a5c 	.word	0x20000a5c

0800a3b4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a3c0:	4b09      	ldr	r3, [pc, #36]	@ (800a3e8 <TL_BLE_SendCmd+0x34>)
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a3ca:	4b07      	ldr	r3, [pc, #28]	@ (800a3e8 <TL_BLE_SendCmd+0x34>)
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	f000 f96c 	bl	800a6b0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a3d8:	f001 fba0 	bl	800bb1c <HW_IPCC_BLE_SendCmd>

  return 0;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20030000 	.word	0x20030000

0800a3ec <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a3f2:	e01c      	b.n	800a42e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a3f4:	1d3b      	adds	r3, r7, #4
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	4812      	ldr	r0, [pc, #72]	@ (800a444 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a3fa:	f000 fa76 	bl	800a8ea <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	7a5b      	ldrb	r3, [r3, #9]
 800a402:	2b0f      	cmp	r3, #15
 800a404:	d003      	beq.n	800a40e <HW_IPCC_BLE_RxEvtNot+0x22>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	7a5b      	ldrb	r3, [r3, #9]
 800a40a:	2b0e      	cmp	r3, #14
 800a40c:	d105      	bne.n	800a41a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4619      	mov	r1, r3
 800a412:	2002      	movs	r0, #2
 800a414:	f000 f94c 	bl	800a6b0 <OutputDbgTrace>
 800a418:	e004      	b.n	800a424 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4619      	mov	r1, r3
 800a41e:	2003      	movs	r0, #3
 800a420:	f000 f946 	bl	800a6b0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a424:	4b08      	ldr	r3, [pc, #32]	@ (800a448 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	4610      	mov	r0, r2
 800a42c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a42e:	4805      	ldr	r0, [pc, #20]	@ (800a444 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a430:	f000 f9cc 	bl	800a7cc <LST_is_empty>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d0dc      	beq.n	800a3f4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a43a:	bf00      	nop
}
 800a43c:	3708      	adds	r7, #8
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	200300c8 	.word	0x200300c8
 800a448:	20000a58 	.word	0x20000a58

0800a44c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a450:	4b02      	ldr	r3, [pc, #8]	@ (800a45c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4798      	blx	r3

  return;
 800a456:	bf00      	nop
}
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	20000a5c 	.word	0x20000a5c

0800a460 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a46c:	480d      	ldr	r0, [pc, #52]	@ (800a4a4 <TL_SYS_Init+0x44>)
 800a46e:	f000 f99d 	bl	800a7ac <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a472:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a8 <TL_SYS_Init+0x48>)
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	689a      	ldr	r2, [r3, #8]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	4a08      	ldr	r2, [pc, #32]	@ (800a4a4 <TL_SYS_Init+0x44>)
 800a484:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a486:	f001 fb69 	bl	800bb5c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a07      	ldr	r2, [pc, #28]	@ (800a4ac <TL_SYS_Init+0x4c>)
 800a490:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	4a06      	ldr	r2, [pc, #24]	@ (800a4b0 <TL_SYS_Init+0x50>)
 800a498:	6013      	str	r3, [r2, #0]

  return 0;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	200300d0 	.word	0x200300d0
 800a4a8:	20030000 	.word	0x20030000
 800a4ac:	20000a60 	.word	0x20000a60
 800a4b0:	20000a64 	.word	0x20000a64

0800a4b4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a4c0:	4b09      	ldr	r3, [pc, #36]	@ (800a4e8 <TL_SYS_SendCmd+0x34>)
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2210      	movs	r2, #16
 800a4c8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a4ca:	4b07      	ldr	r3, [pc, #28]	@ (800a4e8 <TL_SYS_SendCmd+0x34>)
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	2004      	movs	r0, #4
 800a4d4:	f000 f8ec 	bl	800a6b0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a4d8:	f001 fb4a 	bl	800bb70 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20030000 	.word	0x20030000

0800a4ec <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a4f0:	4b07      	ldr	r3, [pc, #28]	@ (800a510 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	2005      	movs	r0, #5
 800a4fa:	f000 f8d9 	bl	800a6b0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a4fe:	4b05      	ldr	r3, [pc, #20]	@ (800a514 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a03      	ldr	r2, [pc, #12]	@ (800a510 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a504:	68d2      	ldr	r2, [r2, #12]
 800a506:	6812      	ldr	r2, [r2, #0]
 800a508:	4610      	mov	r0, r2
 800a50a:	4798      	blx	r3

  return;
 800a50c:	bf00      	nop
}
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	20030000 	.word	0x20030000
 800a514:	20000a60 	.word	0x20000a60

0800a518 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a51e:	e00e      	b.n	800a53e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a520:	1d3b      	adds	r3, r7, #4
 800a522:	4619      	mov	r1, r3
 800a524:	480b      	ldr	r0, [pc, #44]	@ (800a554 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a526:	f000 f9e0 	bl	800a8ea <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4619      	mov	r1, r3
 800a52e:	2006      	movs	r0, #6
 800a530:	f000 f8be 	bl	800a6b0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a534:	4b08      	ldr	r3, [pc, #32]	@ (800a558 <HW_IPCC_SYS_EvtNot+0x40>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	4610      	mov	r0, r2
 800a53c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a53e:	4805      	ldr	r0, [pc, #20]	@ (800a554 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a540:	f000 f944 	bl	800a7cc <LST_is_empty>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d0ea      	beq.n	800a520 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a54a:	bf00      	nop
}
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	200300d0 	.word	0x200300d0
 800a558:	20000a64 	.word	0x20000a64

0800a55c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a564:	4817      	ldr	r0, [pc, #92]	@ (800a5c4 <TL_MM_Init+0x68>)
 800a566:	f000 f921 	bl	800a7ac <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a56a:	4817      	ldr	r0, [pc, #92]	@ (800a5c8 <TL_MM_Init+0x6c>)
 800a56c:	f000 f91e 	bl	800a7ac <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a570:	4b16      	ldr	r3, [pc, #88]	@ (800a5cc <TL_MM_Init+0x70>)
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	4a16      	ldr	r2, [pc, #88]	@ (800a5d0 <TL_MM_Init+0x74>)
 800a576:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a578:	4b15      	ldr	r3, [pc, #84]	@ (800a5d0 <TL_MM_Init+0x74>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	6892      	ldr	r2, [r2, #8]
 800a580:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a582:	4b13      	ldr	r3, [pc, #76]	@ (800a5d0 <TL_MM_Init+0x74>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	68d2      	ldr	r2, [r2, #12]
 800a58a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a58c:	4b10      	ldr	r3, [pc, #64]	@ (800a5d0 <TL_MM_Init+0x74>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a0c      	ldr	r2, [pc, #48]	@ (800a5c4 <TL_MM_Init+0x68>)
 800a592:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a594:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d0 <TL_MM_Init+0x74>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	6812      	ldr	r2, [r2, #0]
 800a59c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a59e:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d0 <TL_MM_Init+0x74>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	6852      	ldr	r2, [r2, #4]
 800a5a6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a5a8:	4b09      	ldr	r3, [pc, #36]	@ (800a5d0 <TL_MM_Init+0x74>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	6912      	ldr	r2, [r2, #16]
 800a5b0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a5b2:	4b07      	ldr	r3, [pc, #28]	@ (800a5d0 <TL_MM_Init+0x74>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	6952      	ldr	r2, [r2, #20]
 800a5ba:	619a      	str	r2, [r3, #24]

  return;
 800a5bc:	bf00      	nop
}
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	200300b8 	.word	0x200300b8
 800a5c8:	20000a50 	.word	0x20000a50
 800a5cc:	20030000 	.word	0x20030000
 800a5d0:	20000a68 	.word	0x20000a68

0800a5d4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a5dc:	6879      	ldr	r1, [r7, #4]
 800a5de:	4807      	ldr	r0, [pc, #28]	@ (800a5fc <TL_MM_EvtDone+0x28>)
 800a5e0:	f000 f93c 	bl	800a85c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a5e4:	6879      	ldr	r1, [r7, #4]
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	f000 f862 	bl	800a6b0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a5ec:	4804      	ldr	r0, [pc, #16]	@ (800a600 <TL_MM_EvtDone+0x2c>)
 800a5ee:	f001 fae5 	bl	800bbbc <HW_IPCC_MM_SendFreeBuf>

  return;
 800a5f2:	bf00      	nop
}
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20000a50 	.word	0x20000a50
 800a600:	0800a605 	.word	0x0800a605

0800a604 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a60a:	e00c      	b.n	800a626 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a60c:	1d3b      	adds	r3, r7, #4
 800a60e:	4619      	mov	r1, r3
 800a610:	480a      	ldr	r0, [pc, #40]	@ (800a63c <SendFreeBuf+0x38>)
 800a612:	f000 f96a 	bl	800a8ea <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a616:	4b0a      	ldr	r3, [pc, #40]	@ (800a640 <SendFreeBuf+0x3c>)
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	4611      	mov	r1, r2
 800a620:	4618      	mov	r0, r3
 800a622:	f000 f91b 	bl	800a85c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a626:	4805      	ldr	r0, [pc, #20]	@ (800a63c <SendFreeBuf+0x38>)
 800a628:	f000 f8d0 	bl	800a7cc <LST_is_empty>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d0ec      	beq.n	800a60c <SendFreeBuf+0x8>
  }

  return;
 800a632:	bf00      	nop
}
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	20000a50 	.word	0x20000a50
 800a640:	20030000 	.word	0x20030000

0800a644 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a648:	4805      	ldr	r0, [pc, #20]	@ (800a660 <TL_TRACES_Init+0x1c>)
 800a64a:	f000 f8af 	bl	800a7ac <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a64e:	4b05      	ldr	r3, [pc, #20]	@ (800a664 <TL_TRACES_Init+0x20>)
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	4a03      	ldr	r2, [pc, #12]	@ (800a660 <TL_TRACES_Init+0x1c>)
 800a654:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a656:	f001 fae3 	bl	800bc20 <HW_IPCC_TRACES_Init>

  return;
 800a65a:	bf00      	nop
}
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	200300c0 	.word	0x200300c0
 800a664:	20030000 	.word	0x20030000

0800a668 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a66e:	e008      	b.n	800a682 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a670:	1d3b      	adds	r3, r7, #4
 800a672:	4619      	mov	r1, r3
 800a674:	4808      	ldr	r0, [pc, #32]	@ (800a698 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a676:	f000 f938 	bl	800a8ea <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 f80d 	bl	800a69c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a682:	4805      	ldr	r0, [pc, #20]	@ (800a698 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a684:	f000 f8a2 	bl	800a7cc <LST_is_empty>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d0f0      	beq.n	800a670 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a68e:	bf00      	nop
}
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	200300c0 	.word	0x200300c0

0800a69c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	6039      	str	r1, [r7, #0]
 800a6ba:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a6bc:	79fb      	ldrb	r3, [r7, #7]
 800a6be:	2b06      	cmp	r3, #6
 800a6c0:	d845      	bhi.n	800a74e <OutputDbgTrace+0x9e>
 800a6c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c8 <OutputDbgTrace+0x18>)
 800a6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c8:	0800a6e5 	.word	0x0800a6e5
 800a6cc:	0800a709 	.word	0x0800a709
 800a6d0:	0800a70f 	.word	0x0800a70f
 800a6d4:	0800a723 	.word	0x0800a723
 800a6d8:	0800a72f 	.word	0x0800a72f
 800a6dc:	0800a735 	.word	0x0800a735
 800a6e0:	0800a743 	.word	0x0800a743
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	7a5b      	ldrb	r3, [r3, #9]
 800a6ec:	2bff      	cmp	r3, #255	@ 0xff
 800a6ee:	d005      	beq.n	800a6fc <OutputDbgTrace+0x4c>
 800a6f0:	2bff      	cmp	r3, #255	@ 0xff
 800a6f2:	dc05      	bgt.n	800a700 <OutputDbgTrace+0x50>
 800a6f4:	2b0e      	cmp	r3, #14
 800a6f6:	d005      	beq.n	800a704 <OutputDbgTrace+0x54>
 800a6f8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a6fa:	e001      	b.n	800a700 <OutputDbgTrace+0x50>
          break;
 800a6fc:	bf00      	nop
 800a6fe:	e027      	b.n	800a750 <OutputDbgTrace+0xa0>
          break;
 800a700:	bf00      	nop
 800a702:	e025      	b.n	800a750 <OutputDbgTrace+0xa0>
          break;
 800a704:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a706:	e023      	b.n	800a750 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a70c:	e020      	b.n	800a750 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	7a5b      	ldrb	r3, [r3, #9]
 800a716:	2b0e      	cmp	r3, #14
 800a718:	d001      	beq.n	800a71e <OutputDbgTrace+0x6e>
 800a71a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a71c:	e000      	b.n	800a720 <OutputDbgTrace+0x70>
          break;
 800a71e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a720:	e016      	b.n	800a750 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	7a5b      	ldrb	r3, [r3, #9]
 800a72a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a72c:	e010      	b.n	800a750 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a732:	e00d      	b.n	800a750 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	7a5b      	ldrb	r3, [r3, #9]
 800a73c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a73e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a740:	e006      	b.n	800a750 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	7a5b      	ldrb	r3, [r3, #9]
 800a74a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a74c:	e000      	b.n	800a750 <OutputDbgTrace+0xa0>

    default:
      break;
 800a74e:	bf00      	nop
  }

  return;
 800a750:	bf00      	nop
}
 800a752:	3714      	adds	r7, #20
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	4603      	mov	r3, r0
 800a764:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a766:	4b0f      	ldr	r3, [pc, #60]	@ (800a7a4 <OTP_Read+0x48>)
 800a768:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a76a:	e002      	b.n	800a772 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	3b08      	subs	r3, #8
 800a770:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	3307      	adds	r3, #7
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	79fa      	ldrb	r2, [r7, #7]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d003      	beq.n	800a786 <OTP_Read+0x2a>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	4a09      	ldr	r2, [pc, #36]	@ (800a7a8 <OTP_Read+0x4c>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d1f2      	bne.n	800a76c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3307      	adds	r3, #7
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	79fa      	ldrb	r2, [r7, #7]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d001      	beq.n	800a796 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a792:	2300      	movs	r3, #0
 800a794:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a796:	68fb      	ldr	r3, [r7, #12]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	1fff73f8 	.word	0x1fff73f8
 800a7a8:	1fff7000 	.word	0x1fff7000

0800a7ac <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	605a      	str	r2, [r3, #4]
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b087      	sub	sp, #28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a7d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a7dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7de:	b672      	cpsid	i
}
 800a7e0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d102      	bne.n	800a7f2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	75fb      	strb	r3, [r7, #23]
 800a7f0:	e001      	b.n	800a7f6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	75fb      	strb	r3, [r7, #23]
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	f383 8810 	msr	PRIMASK, r3
}
 800a800:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a802:	7dfb      	ldrb	r3, [r7, #23]
}
 800a804:	4618      	mov	r0, r3
 800a806:	371c      	adds	r7, #28
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a810:	b480      	push	{r7}
 800a812:	b087      	sub	sp, #28
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a81a:	f3ef 8310 	mrs	r3, PRIMASK
 800a81e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a820:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a822:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a824:	b672      	cpsid	i
}
 800a826:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	683a      	ldr	r2, [r7, #0]
 800a842:	605a      	str	r2, [r3, #4]
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	f383 8810 	msr	PRIMASK, r3
}
 800a84e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a850:	bf00      	nop
 800a852:	371c      	adds	r7, #28
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a866:	f3ef 8310 	mrs	r3, PRIMASK
 800a86a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a86c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a86e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a870:	b672      	cpsid	i
}
 800a872:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685a      	ldr	r2, [r3, #4]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	683a      	ldr	r2, [r7, #0]
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	f383 8810 	msr	PRIMASK, r3
}
 800a89a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a89c:	bf00      	nop
 800a89e:	371c      	adds	r7, #28
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8b0:	f3ef 8310 	mrs	r3, PRIMASK
 800a8b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a8b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8ba:	b672      	cpsid	i
}
 800a8bc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	6812      	ldr	r2, [r2, #0]
 800a8c6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	6852      	ldr	r2, [r2, #4]
 800a8d0:	605a      	str	r2, [r3, #4]
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f383 8810 	msr	PRIMASK, r3
}
 800a8dc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a8de:	bf00      	nop
 800a8e0:	371c      	adds	r7, #28
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b086      	sub	sp, #24
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a8f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a8fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8fe:	b672      	cpsid	i
}
 800a900:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4618      	mov	r0, r3
 800a910:	f7ff ffca 	bl	800a8a8 <LST_remove_node>
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	f383 8810 	msr	PRIMASK, r3
}
 800a91e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a920:	bf00      	nop
 800a922:	3718      	adds	r7, #24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a928:	b480      	push	{r7}
 800a92a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a92c:	4b03      	ldr	r3, [pc, #12]	@ (800a93c <LL_FLASH_GetUDN+0x14>)
 800a92e:	681b      	ldr	r3, [r3, #0]
}
 800a930:	4618      	mov	r0, r3
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	1fff7580 	.word	0x1fff7580

0800a940 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a940:	b480      	push	{r7}
 800a942:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a944:	4b03      	ldr	r3, [pc, #12]	@ (800a954 <LL_FLASH_GetDeviceID+0x14>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	b2db      	uxtb	r3, r3
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	1fff7584 	.word	0x1fff7584

0800a958 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a958:	b480      	push	{r7}
 800a95a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800a95c:	4b03      	ldr	r3, [pc, #12]	@ (800a96c <LL_FLASH_GetSTCompanyID+0x14>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	0a1b      	lsrs	r3, r3, #8
}
 800a962:	4618      	mov	r0, r3
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	1fff7584 	.word	0x1fff7584

0800a970 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800a970:	b5b0      	push	{r4, r5, r7, lr}
 800a972:	b090      	sub	sp, #64	@ 0x40
 800a974:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a976:	2392      	movs	r3, #146	@ 0x92
 800a978:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a97c:	4b23      	ldr	r3, [pc, #140]	@ (800aa0c <APP_BLE_Init+0x9c>)
 800a97e:	1d3c      	adds	r4, r7, #4
 800a980:	461d      	mov	r5, r3
 800a982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a98a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a98c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a98e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a992:	c403      	stmia	r4!, {r0, r1}
 800a994:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800a996:	f000 f90f 	bl	800abb8 <Ble_Tl_Init>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a99a:	4a1d      	ldr	r2, [pc, #116]	@ (800aa10 <APP_BLE_Init+0xa0>)
 800a99c:	2100      	movs	r1, #0
 800a99e:	2002      	movs	r0, #2
 800a9a0:	f001 fac8 	bl	800bf34 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800a9a4:	1d3b      	adds	r3, r7, #4
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7ff f8ca 	bl	8009b40 <SHCI_C2_BLE_Init>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800a9b2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <APP_BLE_Init+0x4e>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800a9ba:	f7f7 febe 	bl	800273a <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a9be:	f000 f911 	bl	800abe4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a9c2:	f7ff f817 	bl	80099f4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a9c6:	4b13      	ldr	r3, [pc, #76]	@ (800aa14 <APP_BLE_Init+0xa4>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800a9ce:	4b11      	ldr	r3, [pc, #68]	@ (800aa14 <APP_BLE_Init+0xa4>)
 800a9d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a9d4:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800a9d6:	4a10      	ldr	r2, [pc, #64]	@ (800aa18 <APP_BLE_Init+0xa8>)
 800a9d8:	2100      	movs	r1, #0
 800a9da:	2001      	movs	r0, #1
 800a9dc:	f001 faaa 	bl	800bf34 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800a9e0:	2006      	movs	r0, #6
 800a9e2:	f7fe fe7a 	bl	80096da <aci_hal_set_radio_activity_mask>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800a9ec:	f000 fb12 	bl	800b014 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800a9f0:	4b08      	ldr	r3, [pc, #32]	@ (800aa14 <APP_BLE_Init+0xa4>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800a9f6:	4b07      	ldr	r3, [pc, #28]	@ (800aa14 <APP_BLE_Init+0xa4>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800a9fc:	2001      	movs	r0, #1
 800a9fe:	f000 f9a5 	bl	800ad4c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800aa02:	bf00      	nop
}
 800aa04:	3740      	adds	r7, #64	@ 0x40
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bdb0      	pop	{r4, r5, r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	0800ef0c 	.word	0x0800ef0c
 800aa10:	08009d5d 	.word	0x08009d5d
 800aa14:	20000a74 	.word	0x20000a74
 800aa18:	0800ae35 	.word	0x0800ae35

0800aa1c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08a      	sub	sp, #40	@ 0x28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800aa24:	2392      	movs	r3, #146	@ 0x92
 800aa26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800aa30:	6a3b      	ldr	r3, [r7, #32]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	2bff      	cmp	r3, #255	@ 0xff
 800aa36:	d053      	beq.n	800aae0 <SVCCTL_App_Notification+0xc4>
 800aa38:	2bff      	cmp	r3, #255	@ 0xff
 800aa3a:	f300 80af 	bgt.w	800ab9c <SVCCTL_App_Notification+0x180>
 800aa3e:	2b05      	cmp	r3, #5
 800aa40:	d002      	beq.n	800aa48 <SVCCTL_App_Notification+0x2c>
 800aa42:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa44:	d020      	beq.n	800aa88 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800aa46:	e0a9      	b.n	800ab9c <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800aa48:	6a3b      	ldr	r3, [r7, #32]
 800aa4a:	3302      	adds	r3, #2
 800aa4c:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	4b55      	ldr	r3, [pc, #340]	@ (800abac <SVCCTL_App_Notification+0x190>)
 800aa58:	8adb      	ldrh	r3, [r3, #22]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d106      	bne.n	800aa6c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800aa5e:	4b53      	ldr	r3, [pc, #332]	@ (800abac <SVCCTL_App_Notification+0x190>)
 800aa60:	2200      	movs	r2, #0
 800aa62:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800aa64:	4b51      	ldr	r3, [pc, #324]	@ (800abac <SVCCTL_App_Notification+0x190>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800aa6c:	2001      	movs	r0, #1
 800aa6e:	f000 f96d 	bl	800ad4c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800aa72:	4b4f      	ldr	r3, [pc, #316]	@ (800abb0 <SVCCTL_App_Notification+0x194>)
 800aa74:	2201      	movs	r2, #1
 800aa76:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800aa78:	4b4c      	ldr	r3, [pc, #304]	@ (800abac <SVCCTL_App_Notification+0x190>)
 800aa7a:	8ada      	ldrh	r2, [r3, #22]
 800aa7c:	4b4c      	ldr	r3, [pc, #304]	@ (800abb0 <SVCCTL_App_Notification+0x194>)
 800aa7e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800aa80:	484b      	ldr	r0, [pc, #300]	@ (800abb0 <SVCCTL_App_Notification+0x194>)
 800aa82:	f000 fa6d 	bl	800af60 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800aa86:	e08c      	b.n	800aba2 <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800aa88:	6a3b      	ldr	r3, [r7, #32]
 800aa8a:	3302      	adds	r3, #2
 800aa8c:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d001      	beq.n	800aa9a <SVCCTL_App_Notification+0x7e>
 800aa96:	2b03      	cmp	r3, #3
          break;
 800aa98:	e021      	b.n	800aade <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800aaa0:	4b42      	ldr	r3, [pc, #264]	@ (800abac <SVCCTL_App_Notification+0x190>)
 800aaa2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	d104      	bne.n	800aab4 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800aaaa:	4b40      	ldr	r3, [pc, #256]	@ (800abac <SVCCTL_App_Notification+0x190>)
 800aaac:	2206      	movs	r2, #6
 800aaae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800aab2:	e003      	b.n	800aabc <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800aab4:	4b3d      	ldr	r3, [pc, #244]	@ (800abac <SVCCTL_App_Notification+0x190>)
 800aab6:	2205      	movs	r2, #5
 800aab8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	4b39      	ldr	r3, [pc, #228]	@ (800abac <SVCCTL_App_Notification+0x190>)
 800aac6:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800aac8:	4b39      	ldr	r3, [pc, #228]	@ (800abb0 <SVCCTL_App_Notification+0x194>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800aace:	4b37      	ldr	r3, [pc, #220]	@ (800abac <SVCCTL_App_Notification+0x190>)
 800aad0:	8ada      	ldrh	r2, [r3, #22]
 800aad2:	4b37      	ldr	r3, [pc, #220]	@ (800abb0 <SVCCTL_App_Notification+0x194>)
 800aad4:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800aad6:	4836      	ldr	r0, [pc, #216]	@ (800abb0 <SVCCTL_App_Notification+0x194>)
 800aad8:	f000 fa42 	bl	800af60 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800aadc:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800aade:	e060      	b.n	800aba2 <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800aae0:	6a3b      	ldr	r3, [r7, #32]
 800aae2:	3302      	adds	r3, #2
 800aae4:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d047      	beq.n	800ab84 <SVCCTL_App_Notification+0x168>
 800aaf4:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	dc51      	bgt.n	800aba0 <SVCCTL_App_Notification+0x184>
 800aafc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab00:	d046      	beq.n	800ab90 <SVCCTL_App_Notification+0x174>
 800ab02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab06:	dc4b      	bgt.n	800aba0 <SVCCTL_App_Notification+0x184>
 800ab08:	2b04      	cmp	r3, #4
 800ab0a:	d043      	beq.n	800ab94 <SVCCTL_App_Notification+0x178>
 800ab0c:	2b04      	cmp	r3, #4
 800ab0e:	db47      	blt.n	800aba0 <SVCCTL_App_Notification+0x184>
 800ab10:	f240 420a 	movw	r2, #1034	@ 0x40a
 800ab14:	4293      	cmp	r3, r2
 800ab16:	dc43      	bgt.n	800aba0 <SVCCTL_App_Notification+0x184>
 800ab18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab1c:	dd40      	ble.n	800aba0 <SVCCTL_App_Notification+0x184>
 800ab1e:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800ab22:	2b09      	cmp	r3, #9
 800ab24:	d83c      	bhi.n	800aba0 <SVCCTL_App_Notification+0x184>
 800ab26:	a201      	add	r2, pc, #4	@ (adr r2, 800ab2c <SVCCTL_App_Notification+0x110>)
 800ab28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2c:	0800ab7d 	.word	0x0800ab7d
 800ab30:	0800ab55 	.word	0x0800ab55
 800ab34:	0800aba1 	.word	0x0800aba1
 800ab38:	0800aba1 	.word	0x0800aba1
 800ab3c:	0800aba1 	.word	0x0800aba1
 800ab40:	0800aba1 	.word	0x0800aba1
 800ab44:	0800ab99 	.word	0x0800ab99
 800ab48:	0800aba1 	.word	0x0800aba1
 800ab4c:	0800ab69 	.word	0x0800ab69
 800ab50:	0800ab99 	.word	0x0800ab99
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800ab54:	4b15      	ldr	r3, [pc, #84]	@ (800abac <SVCCTL_App_Notification+0x190>)
 800ab56:	8adb      	ldrh	r3, [r3, #22]
 800ab58:	4916      	ldr	r1, [pc, #88]	@ (800abb4 <SVCCTL_App_Notification+0x198>)
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fd ffbf 	bl	8008ade <aci_gap_pass_key_resp>
 800ab60:	4603      	mov	r3, r0
 800ab62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800ab66:	e018      	b.n	800ab9a <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800ab68:	4b10      	ldr	r3, [pc, #64]	@ (800abac <SVCCTL_App_Notification+0x190>)
 800ab6a:	8adb      	ldrh	r3, [r3, #22]
 800ab6c:	2101      	movs	r1, #1
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fe f95f 	bl	8008e32 <aci_gap_numeric_comparison_value_confirm_yesno>
 800ab74:	4603      	mov	r3, r0
 800ab76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 800ab7a:	e00e      	b.n	800ab9a <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	3302      	adds	r3, #2
 800ab80:	61bb      	str	r3, [r7, #24]
          break;
 800ab82:	e00a      	b.n	800ab9a <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800ab84:	4b09      	ldr	r3, [pc, #36]	@ (800abac <SVCCTL_App_Notification+0x190>)
 800ab86:	8adb      	ldrh	r3, [r3, #22]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fe fc65 	bl	8009458 <aci_gatt_confirm_indication>
        break;
 800ab8e:	e004      	b.n	800ab9a <SVCCTL_App_Notification+0x17e>
          break;
 800ab90:	bf00      	nop
 800ab92:	e005      	b.n	800aba0 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800ab94:	bf00      	nop
 800ab96:	e003      	b.n	800aba0 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ab98:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ab9a:	e001      	b.n	800aba0 <SVCCTL_App_Notification+0x184>
      break;
 800ab9c:	bf00      	nop
 800ab9e:	e000      	b.n	800aba2 <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800aba0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800aba2:	2301      	movs	r3, #1
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3728      	adds	r7, #40	@ 0x28
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	20000a74 	.word	0x20000a74
 800abb0:	20000af8 	.word	0x20000af8
 800abb4:	0001b207 	.word	0x0001b207

0800abb8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800abbe:	4b06      	ldr	r3, [pc, #24]	@ (800abd8 <Ble_Tl_Init+0x20>)
 800abc0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800abc2:	4b06      	ldr	r3, [pc, #24]	@ (800abdc <Ble_Tl_Init+0x24>)
 800abc4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800abc6:	463b      	mov	r3, r7
 800abc8:	4619      	mov	r1, r3
 800abca:	4805      	ldr	r0, [pc, #20]	@ (800abe0 <Ble_Tl_Init+0x28>)
 800abcc:	f7ff f8aa 	bl	8009d24 <hci_init>

  return;
 800abd0:	bf00      	nop
}
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	200300d8 	.word	0x200300d8
 800abdc:	0800aee5 	.word	0x0800aee5
 800abe0:	0800aead 	.word	0x0800aead

0800abe4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800abe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abe6:	b08d      	sub	sp, #52	@ 0x34
 800abe8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800abea:	2300      	movs	r3, #0
 800abec:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800abee:	2392      	movs	r3, #146	@ 0x92
 800abf0:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800abf2:	f7fe fdc6 	bl	8009782 <hci_reset>
 800abf6:	4603      	mov	r3, r0
 800abf8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800abfa:	f000 f8d7 	bl	800adac <BleGetBdAddress>
 800abfe:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	2106      	movs	r1, #6
 800ac04:	2000      	movs	r0, #0
 800ac06:	f7fe fc7c 	bl	8009502 <aci_hal_write_config_data>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800ac0e:	4a4a      	ldr	r2, [pc, #296]	@ (800ad38 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800ac10:	2110      	movs	r1, #16
 800ac12:	2018      	movs	r0, #24
 800ac14:	f7fe fc75 	bl	8009502 <aci_hal_write_config_data>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800ac1c:	4a47      	ldr	r2, [pc, #284]	@ (800ad3c <Ble_Hci_Gap_Gatt_Init+0x158>)
 800ac1e:	2110      	movs	r1, #16
 800ac20:	2008      	movs	r0, #8
 800ac22:	f7fe fc6e 	bl	8009502 <aci_hal_write_config_data>
 800ac26:	4603      	mov	r3, r0
 800ac28:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ac2a:	2118      	movs	r1, #24
 800ac2c:	2001      	movs	r0, #1
 800ac2e:	f7fe fced 	bl	800960c <aci_hal_set_tx_power_level>
 800ac32:	4603      	mov	r3, r0
 800ac34:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800ac36:	f7fe f963 	bl	8008f00 <aci_gatt_init>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ac42:	7bfb      	ldrb	r3, [r7, #15]
 800ac44:	f043 0301 	orr.w	r3, r3, #1
 800ac48:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d01f      	beq.n	800ac90 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800ac50:	4b3b      	ldr	r3, [pc, #236]	@ (800ad40 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800ac52:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800ac54:	1dba      	adds	r2, r7, #6
 800ac56:	7bf8      	ldrb	r0, [r7, #15]
 800ac58:	1cbb      	adds	r3, r7, #2
 800ac5a:	9301      	str	r3, [sp, #4]
 800ac5c:	1d3b      	adds	r3, r7, #4
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	4613      	mov	r3, r2
 800ac62:	2209      	movs	r2, #9
 800ac64:	2100      	movs	r1, #0
 800ac66:	f7fd ffa1 	bl	8008bac <aci_gap_init>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800ac6e:	88fc      	ldrh	r4, [r7, #6]
 800ac70:	88bd      	ldrh	r5, [r7, #4]
 800ac72:	68b8      	ldr	r0, [r7, #8]
 800ac74:	f7f5 fad4 	bl	8000220 <strlen>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	4613      	mov	r3, r2
 800ac82:	2200      	movs	r2, #0
 800ac84:	4629      	mov	r1, r5
 800ac86:	4620      	mov	r0, r4
 800ac88:	f7fe fb3d 	bl	8009306 <aci_gatt_update_char_value>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800ac90:	88f8      	ldrh	r0, [r7, #6]
 800ac92:	8879      	ldrh	r1, [r7, #2]
 800ac94:	463b      	mov	r3, r7
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	2302      	movs	r3, #2
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f7fe fb33 	bl	8009306 <aci_gatt_update_char_value>
 800aca0:	4603      	mov	r3, r0
 800aca2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800aca4:	2202      	movs	r2, #2
 800aca6:	2102      	movs	r1, #2
 800aca8:	2000      	movs	r0, #0
 800acaa:	f7fe fd8e 	bl	80097ca <hci_le_set_default_phy>
 800acae:	4603      	mov	r3, r0
 800acb0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800acb2:	4b24      	ldr	r3, [pc, #144]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acb4:	2201      	movs	r2, #1
 800acb6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800acb8:	4b22      	ldr	r3, [pc, #136]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fd fdf6 	bl	80088ae <aci_gap_set_io_capability>
 800acc2:	4603      	mov	r3, r0
 800acc4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800acc6:	4b1f      	ldr	r3, [pc, #124]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acc8:	2201      	movs	r2, #1
 800acca:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800accc:	4b1d      	ldr	r3, [pc, #116]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acce:	2208      	movs	r2, #8
 800acd0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800acd2:	4b1c      	ldr	r3, [pc, #112]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acd4:	2210      	movs	r2, #16
 800acd6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800acd8:	4b1a      	ldr	r3, [pc, #104]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acda:	2200      	movs	r2, #0
 800acdc:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800acde:	4b19      	ldr	r3, [pc, #100]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ace0:	4a19      	ldr	r2, [pc, #100]	@ (800ad48 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800ace2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800ace4:	4b17      	ldr	r3, [pc, #92]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800acea:	4b16      	ldr	r3, [pc, #88]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acec:	789c      	ldrb	r4, [r3, #2]
 800acee:	4b15      	ldr	r3, [pc, #84]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acf0:	785d      	ldrb	r5, [r3, #1]
 800acf2:	4b14      	ldr	r3, [pc, #80]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acf4:	791b      	ldrb	r3, [r3, #4]
 800acf6:	4a13      	ldr	r2, [pc, #76]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acf8:	7952      	ldrb	r2, [r2, #5]
 800acfa:	4912      	ldr	r1, [pc, #72]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800acfc:	78c9      	ldrb	r1, [r1, #3]
 800acfe:	4811      	ldr	r0, [pc, #68]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad00:	6880      	ldr	r0, [r0, #8]
 800ad02:	2600      	movs	r6, #0
 800ad04:	9604      	str	r6, [sp, #16]
 800ad06:	9003      	str	r0, [sp, #12]
 800ad08:	9102      	str	r1, [sp, #8]
 800ad0a:	9201      	str	r2, [sp, #4]
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	2300      	movs	r3, #0
 800ad10:	2201      	movs	r2, #1
 800ad12:	4629      	mov	r1, r5
 800ad14:	4620      	mov	r0, r4
 800ad16:	f7fd fe1e 	bl	8008956 <aci_gap_set_authentication_requirement>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ad1e:	4b09      	ldr	r3, [pc, #36]	@ (800ad44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800ad20:	789b      	ldrb	r3, [r3, #2]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800ad26:	f7fe f860 	bl	8008dea <aci_gap_configure_filter_accept_list>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800ad2e:	bf00      	nop
 800ad30:	371c      	adds	r7, #28
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad36:	bf00      	nop
 800ad38:	0800f8fc 	.word	0x0800f8fc
 800ad3c:	0800f90c 	.word	0x0800f90c
 800ad40:	0800ef48 	.word	0x0800ef48
 800ad44:	20000a74 	.word	0x20000a74
 800ad48:	0001b207 	.word	0x0001b207

0800ad4c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b08c      	sub	sp, #48	@ 0x30
 800ad50:	af08      	add	r7, sp, #32
 800ad52:	4603      	mov	r3, r0
 800ad54:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ad56:	2392      	movs	r3, #146	@ 0x92
 800ad58:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800ad5a:	4a12      	ldr	r2, [pc, #72]	@ (800ada4 <Adv_Request+0x58>)
 800ad5c:	79fb      	ldrb	r3, [r7, #7]
 800ad5e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800ad62:	2300      	movs	r3, #0
 800ad64:	9306      	str	r3, [sp, #24]
 800ad66:	2300      	movs	r3, #0
 800ad68:	9305      	str	r3, [sp, #20]
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	9304      	str	r3, [sp, #16]
 800ad6e:	2300      	movs	r3, #0
 800ad70:	9303      	str	r3, [sp, #12]
 800ad72:	2300      	movs	r3, #0
 800ad74:	9302      	str	r3, [sp, #8]
 800ad76:	2300      	movs	r3, #0
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	2300      	movs	r3, #0
 800ad80:	22a0      	movs	r2, #160	@ 0xa0
 800ad82:	2180      	movs	r1, #128	@ 0x80
 800ad84:	2000      	movs	r0, #0
 800ad86:	f7fd fc98 	bl	80086ba <aci_gap_set_discoverable>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800ad8e:	4906      	ldr	r1, [pc, #24]	@ (800ada8 <Adv_Request+0x5c>)
 800ad90:	200b      	movs	r0, #11
 800ad92:	f7fd ffb8 	bl	8008d06 <aci_gap_update_adv_data>
 800ad96:	4603      	mov	r3, r0
 800ad98:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800ad9a:	bf00      	nop
}
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20000a74 	.word	0x20000a74
 800ada8:	20000020 	.word	0x20000020

0800adac <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800adb2:	f7ff fdb9 	bl	800a928 <LL_FLASH_GetUDN>
 800adb6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adbe:	d023      	beq.n	800ae08 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800adc0:	f7ff fdca 	bl	800a958 <LL_FLASH_GetSTCompanyID>
 800adc4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800adc6:	f7ff fdbb 	bl	800a940 <LL_FLASH_GetDeviceID>
 800adca:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	b2da      	uxtb	r2, r3
 800add0:	4b16      	ldr	r3, [pc, #88]	@ (800ae2c <BleGetBdAddress+0x80>)
 800add2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	0a1b      	lsrs	r3, r3, #8
 800add8:	b2da      	uxtb	r2, r3
 800adda:	4b14      	ldr	r3, [pc, #80]	@ (800ae2c <BleGetBdAddress+0x80>)
 800addc:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	4b12      	ldr	r3, [pc, #72]	@ (800ae2c <BleGetBdAddress+0x80>)
 800ade4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	4b10      	ldr	r3, [pc, #64]	@ (800ae2c <BleGetBdAddress+0x80>)
 800adec:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	0a1b      	lsrs	r3, r3, #8
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	4b0d      	ldr	r3, [pc, #52]	@ (800ae2c <BleGetBdAddress+0x80>)
 800adf6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	0c1b      	lsrs	r3, r3, #16
 800adfc:	b2da      	uxtb	r2, r3
 800adfe:	4b0b      	ldr	r3, [pc, #44]	@ (800ae2c <BleGetBdAddress+0x80>)
 800ae00:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800ae02:	4b0a      	ldr	r3, [pc, #40]	@ (800ae2c <BleGetBdAddress+0x80>)
 800ae04:	617b      	str	r3, [r7, #20]
 800ae06:	e00b      	b.n	800ae20 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800ae08:	2000      	movs	r0, #0
 800ae0a:	f7ff fca7 	bl	800a75c <OTP_Read>
 800ae0e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d002      	beq.n	800ae1c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	617b      	str	r3, [r7, #20]
 800ae1a:	e001      	b.n	800ae20 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800ae1c:	4b04      	ldr	r3, [pc, #16]	@ (800ae30 <BleGetBdAddress+0x84>)
 800ae1e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800ae20:	697b      	ldr	r3, [r7, #20]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	20000a6c 	.word	0x20000a6c
 800ae30:	0800f8f4 	.word	0x0800f8f4

0800ae34 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800ae3a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae64 <Adv_Cancel+0x30>)
 800ae3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ae40:	2b05      	cmp	r3, #5
 800ae42:	d00a      	beq.n	800ae5a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ae44:	2392      	movs	r3, #146	@ 0x92
 800ae46:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800ae48:	f7fd fc13 	bl	8008672 <aci_gap_set_non_discoverable>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ae50:	4b04      	ldr	r3, [pc, #16]	@ (800ae64 <Adv_Cancel+0x30>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800ae58:	bf00      	nop
 800ae5a:	bf00      	nop
}
 800ae5c:	3708      	adds	r7, #8
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	20000a74 	.word	0x20000a74

0800ae68 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800ae70:	2100      	movs	r1, #0
 800ae72:	2002      	movs	r0, #2
 800ae74:	f001 f880 	bl	800bf78 <UTIL_SEQ_SetTask>

  return;
 800ae78:	bf00      	nop
}
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ae88:	2001      	movs	r0, #1
 800ae8a:	f001 f907 	bl	800c09c <UTIL_SEQ_SetEvt>

  return;
 800ae8e:	bf00      	nop
}
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b082      	sub	sp, #8
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ae9e:	2001      	movs	r0, #1
 800aea0:	f001 f91c 	bl	800c0dc <UTIL_SEQ_WaitEvt>

  return;
 800aea4:	bf00      	nop
}
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	3308      	adds	r3, #8
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fe fdea 	bl	8009a98 <SVCCTL_UserEvtRx>
 800aec4:	4603      	mov	r3, r0
 800aec6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800aec8:	7afb      	ldrb	r3, [r7, #11]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d003      	beq.n	800aed6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2201      	movs	r2, #1
 800aed2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800aed4:	e003      	b.n	800aede <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	701a      	strb	r2, [r3, #0]
  return;
 800aedc:	bf00      	nop
}
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	4603      	mov	r3, r0
 800aeec:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800aeee:	79fb      	ldrb	r3, [r7, #7]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d002      	beq.n	800aefa <BLE_StatusNot+0x16>
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d006      	beq.n	800af06 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800aef8:	e00b      	b.n	800af12 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800aefa:	2303      	movs	r3, #3
 800aefc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f001 f866 	bl	800bfd0 <UTIL_SEQ_PauseTask>
      break;
 800af04:	e005      	b.n	800af12 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800af06:	2303      	movs	r3, #3
 800af08:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f001 f8a6 	bl	800c05c <UTIL_SEQ_ResumeTask>
      break;
 800af10:	bf00      	nop
  }

  return;
 800af12:	bf00      	nop
}
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
	...

0800af1c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	2b06      	cmp	r3, #6
 800af2a:	d811      	bhi.n	800af50 <Custom_STM_App_Notification+0x34>
 800af2c:	a201      	add	r2, pc, #4	@ (adr r2, 800af34 <Custom_STM_App_Notification+0x18>)
 800af2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af32:	bf00      	nop
 800af34:	0800af51 	.word	0x0800af51
 800af38:	0800af51 	.word	0x0800af51
 800af3c:	0800af51 	.word	0x0800af51
 800af40:	0800af51 	.word	0x0800af51
 800af44:	0800af51 	.word	0x0800af51
 800af48:	0800af51 	.word	0x0800af51
 800af4c:	0800af51 	.word	0x0800af51

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800af50:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800af52:	bf00      	nop
}
 800af54:	370c      	adds	r7, #12
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop

0800af60 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <Custom_APP_Notification+0x16>
 800af70:	2b01      	cmp	r3, #1
 800af72:	d035      	beq.n	800afe0 <Custom_APP_Notification+0x80>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800af74:	e047      	b.n	800b006 <Custom_APP_Notification+0xa6>
    	if(UTIL_SEQ_IsPauseTask(1<<CFG_TASK_READ_TEMPERATURE))
 800af76:	2008      	movs	r0, #8
 800af78:	f001 f84a 	bl	800c010 <UTIL_SEQ_IsPauseTask>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d007      	beq.n	800af92 <Custom_APP_Notification+0x32>
    		UTIL_SEQ_ResumeTask(1<<CFG_TASK_READ_TEMPERATURE);
 800af82:	2008      	movs	r0, #8
 800af84:	f001 f86a 	bl	800c05c <UTIL_SEQ_ResumeTask>
    		UTIL_SEQ_SetTask(1<<CFG_TASK_READ_TEMPERATURE, CFG_SCH_PRIO_0);
 800af88:	2100      	movs	r1, #0
 800af8a:	2008      	movs	r0, #8
 800af8c:	f000 fff4 	bl	800bf78 <UTIL_SEQ_SetTask>
 800af90:	e003      	b.n	800af9a <Custom_APP_Notification+0x3a>
    		UTIL_SEQ_SetTask(1<<CFG_TASK_READ_TEMPERATURE, CFG_SCH_PRIO_0);
 800af92:	2100      	movs	r1, #0
 800af94:	2008      	movs	r0, #8
 800af96:	f000 ffef 	bl	800bf78 <UTIL_SEQ_SetTask>
    	HW_TS_Start(Custom_App_Context.TMP_TIMER_ID, TMPTIMER_INTERVAL);
 800af9a:	4b1d      	ldr	r3, [pc, #116]	@ (800b010 <Custom_APP_Notification+0xb0>)
 800af9c:	789b      	ldrb	r3, [r3, #2]
 800af9e:	f241 0102 	movw	r1, #4098	@ 0x1002
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7f7 f900 	bl	80021a8 <HW_TS_Start>
    	if(UTIL_SEQ_IsPauseTask(1<<CFG_TASK_READ_BATTERY))
 800afa8:	2010      	movs	r0, #16
 800afaa:	f001 f831 	bl	800c010 <UTIL_SEQ_IsPauseTask>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d007      	beq.n	800afc4 <Custom_APP_Notification+0x64>
    		UTIL_SEQ_ResumeTask(1<<CFG_TASK_READ_BATTERY);
 800afb4:	2010      	movs	r0, #16
 800afb6:	f001 f851 	bl	800c05c <UTIL_SEQ_ResumeTask>
    		UTIL_SEQ_SetTask(1<<CFG_TASK_READ_BATTERY, CFG_SCH_PRIO_0);
 800afba:	2100      	movs	r1, #0
 800afbc:	2010      	movs	r0, #16
 800afbe:	f000 ffdb 	bl	800bf78 <UTIL_SEQ_SetTask>
 800afc2:	e003      	b.n	800afcc <Custom_APP_Notification+0x6c>
    		UTIL_SEQ_SetTask(1<<CFG_TASK_READ_BATTERY, CFG_SCH_PRIO_0);
 800afc4:	2100      	movs	r1, #0
 800afc6:	2010      	movs	r0, #16
 800afc8:	f000 ffd6 	bl	800bf78 <UTIL_SEQ_SetTask>
    	HW_TS_Start(Custom_App_Context.BATT_TIMER_ID, BATTTIMER_INTERVAL);
 800afcc:	4b10      	ldr	r3, [pc, #64]	@ (800b010 <Custom_APP_Notification+0xb0>)
 800afce:	78db      	ldrb	r3, [r3, #3]
 800afd0:	f243 0107 	movw	r1, #12295	@ 0x3007
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7f7 f8e7 	bl	80021a8 <HW_TS_Start>
    	updateConnScreen();
 800afda:	f000 f8a5 	bl	800b128 <updateConnScreen>
      break;
 800afde:	e012      	b.n	800b006 <Custom_APP_Notification+0xa6>
    	UTIL_SEQ_PauseTask(1<<CFG_TASK_READ_TEMPERATURE);
 800afe0:	2008      	movs	r0, #8
 800afe2:	f000 fff5 	bl	800bfd0 <UTIL_SEQ_PauseTask>
    	HW_TS_Stop(Custom_App_Context.TMP_TIMER_ID);
 800afe6:	4b0a      	ldr	r3, [pc, #40]	@ (800b010 <Custom_APP_Notification+0xb0>)
 800afe8:	789b      	ldrb	r3, [r3, #2]
 800afea:	4618      	mov	r0, r3
 800afec:	f7f7 f858 	bl	80020a0 <HW_TS_Stop>
    	UTIL_SEQ_PauseTask(1<<CFG_TASK_READ_BATTERY);
 800aff0:	2010      	movs	r0, #16
 800aff2:	f000 ffed 	bl	800bfd0 <UTIL_SEQ_PauseTask>
    	HW_TS_Stop(Custom_App_Context.BATT_TIMER_ID);
 800aff6:	4b06      	ldr	r3, [pc, #24]	@ (800b010 <Custom_APP_Notification+0xb0>)
 800aff8:	78db      	ldrb	r3, [r3, #3]
 800affa:	4618      	mov	r0, r3
 800affc:	f7f7 f850 	bl	80020a0 <HW_TS_Stop>
    	updateDisConnScreen();
 800b000:	f000 f8be 	bl	800b180 <updateDisConnScreen>
      break;
 800b004:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800b006:	bf00      	nop
}
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	20000afc 	.word	0x20000afc

0800b014 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800b014:	b5b0      	push	{r4, r5, r7, lr}
 800b016:	b08c      	sub	sp, #48	@ 0x30
 800b018:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN CUSTOM_APP_Init */
	char initMSG[] = "Temperature Probe";
 800b01a:	4b22      	ldr	r3, [pc, #136]	@ (800b0a4 <Custom_APP_Init+0x90>)
 800b01c:	f107 0414 	add.w	r4, r7, #20
 800b020:	461d      	mov	r5, r3
 800b022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b026:	682b      	ldr	r3, [r5, #0]
 800b028:	8023      	strh	r3, [r4, #0]
	UTIL_SEQ_RegTask(1<<CFG_TASK_READ_TEMPERATURE, UTIL_SEQ_RFU, readTemperature);
 800b02a:	4a1f      	ldr	r2, [pc, #124]	@ (800b0a8 <Custom_APP_Init+0x94>)
 800b02c:	2100      	movs	r1, #0
 800b02e:	2008      	movs	r0, #8
 800b030:	f000 ff80 	bl	800bf34 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_READ_BATTERY, UTIL_SEQ_RFU, readBattery);
 800b034:	4a1d      	ldr	r2, [pc, #116]	@ (800b0ac <Custom_APP_Init+0x98>)
 800b036:	2100      	movs	r1, #0
 800b038:	2010      	movs	r0, #16
 800b03a:	f000 ff7b 	bl	800bf34 <UTIL_SEQ_RegTask>
	HW_TS_Create(CFG_TIM_TMPSVC_ID_ISR, &(Custom_App_Context.TMP_TIMER_ID), hw_ts_SingleShot, TMP_TIMER_ISR);
 800b03e:	4b1c      	ldr	r3, [pc, #112]	@ (800b0b0 <Custom_APP_Init+0x9c>)
 800b040:	2200      	movs	r2, #0
 800b042:	491c      	ldr	r1, [pc, #112]	@ (800b0b4 <Custom_APP_Init+0xa0>)
 800b044:	2001      	movs	r0, #1
 800b046:	f7f6 ffb1 	bl	8001fac <HW_TS_Create>
	HW_TS_Create(CFG_TIM_BATTSVC_ID_ISR, &(Custom_App_Context.BATT_TIMER_ID), hw_ts_SingleShot, BATT_TIMER_ISR);
 800b04a:	4b1b      	ldr	r3, [pc, #108]	@ (800b0b8 <Custom_APP_Init+0xa4>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	491b      	ldr	r1, [pc, #108]	@ (800b0bc <Custom_APP_Init+0xa8>)
 800b050:	2002      	movs	r0, #2
 800b052:	f7f6 ffab 	bl	8001fac <HW_TS_Create>

	ssd1306_Init();
 800b056:	f7f8 faff 	bl	8003658 <ssd1306_Init>

	ssd1306_SetCursor(5,5);
 800b05a:	2105      	movs	r1, #5
 800b05c:	2005      	movs	r0, #5
 800b05e:	f7f8 fcaf 	bl	80039c0 <ssd1306_SetCursor>
	ssd1306_WriteString(initMSG, Font_7x10, White);
 800b062:	4b17      	ldr	r3, [pc, #92]	@ (800b0c0 <Custom_APP_Init+0xac>)
 800b064:	f107 0014 	add.w	r0, r7, #20
 800b068:	2201      	movs	r2, #1
 800b06a:	9200      	str	r2, [sp, #0]
 800b06c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b06e:	f7f8 fc81 	bl	8003974 <ssd1306_WriteString>
	char connectMSG[] = "Please Connect";
 800b072:	4b14      	ldr	r3, [pc, #80]	@ (800b0c4 <Custom_APP_Init+0xb0>)
 800b074:	1d3c      	adds	r4, r7, #4
 800b076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b078:	c407      	stmia	r4!, {r0, r1, r2}
 800b07a:	8023      	strh	r3, [r4, #0]
 800b07c:	3402      	adds	r4, #2
 800b07e:	0c1b      	lsrs	r3, r3, #16
 800b080:	7023      	strb	r3, [r4, #0]
	ssd1306_SetCursor(5,20);
 800b082:	2114      	movs	r1, #20
 800b084:	2005      	movs	r0, #5
 800b086:	f7f8 fc9b 	bl	80039c0 <ssd1306_SetCursor>
	ssd1306_WriteString(connectMSG, Font_7x10, White);
 800b08a:	4b0d      	ldr	r3, [pc, #52]	@ (800b0c0 <Custom_APP_Init+0xac>)
 800b08c:	1d38      	adds	r0, r7, #4
 800b08e:	2201      	movs	r2, #1
 800b090:	9200      	str	r2, [sp, #0]
 800b092:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b094:	f7f8 fc6e 	bl	8003974 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800b098:	f7f8 fb60 	bl	800375c <ssd1306_UpdateScreen>

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800b09c:	bf00      	nop
}
 800b09e:	3728      	adds	r7, #40	@ 0x28
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bdb0      	pop	{r4, r5, r7, pc}
 800b0a4:	0800ef54 	.word	0x0800ef54
 800b0a8:	0800b1c1 	.word	0x0800b1c1
 800b0ac:	0800b2e9 	.word	0x0800b2e9
 800b0b0:	0800b0e9 	.word	0x0800b0e9
 800b0b4:	20000afe 	.word	0x20000afe
 800b0b8:	0800b109 	.word	0x0800b109
 800b0bc:	20000aff 	.word	0x20000aff
 800b0c0:	0800f8e8 	.word	0x0800f8e8
 800b0c4:	0800ef68 	.word	0x0800ef68

0800b0c8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN FD */

/* System callback Function definitions */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
	Custom_App_Context.ADC_CONV_CPLT = 1;
 800b0d0:	4b04      	ldr	r3, [pc, #16]	@ (800b0e4 <HAL_ADC_ConvCpltCallback+0x1c>)
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	711a      	strb	r2, [r3, #4]
}
 800b0d6:	bf00      	nop
 800b0d8:	370c      	adds	r7, #12
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	20000afc 	.word	0x20000afc

0800b0e8 <TMP_TIMER_ISR>:

/* User ISR Function definitions */
void TMP_TIMER_ISR(void)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	af00      	add	r7, sp, #0
	HW_TS_Stop(Custom_App_Context.TMP_TIMER_ID);
 800b0ec:	4b05      	ldr	r3, [pc, #20]	@ (800b104 <TMP_TIMER_ISR+0x1c>)
 800b0ee:	789b      	ldrb	r3, [r3, #2]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7f6 ffd5 	bl	80020a0 <HW_TS_Stop>
	UTIL_SEQ_SetTask(1<<CFG_TASK_READ_TEMPERATURE, CFG_SCH_PRIO_0);
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	2008      	movs	r0, #8
 800b0fa:	f000 ff3d 	bl	800bf78 <UTIL_SEQ_SetTask>
	return;
 800b0fe:	bf00      	nop
}
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	20000afc 	.word	0x20000afc

0800b108 <BATT_TIMER_ISR>:

void BATT_TIMER_ISR(void)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	af00      	add	r7, sp, #0
	HW_TS_Stop(Custom_App_Context.BATT_TIMER_ID);
 800b10c:	4b05      	ldr	r3, [pc, #20]	@ (800b124 <BATT_TIMER_ISR+0x1c>)
 800b10e:	78db      	ldrb	r3, [r3, #3]
 800b110:	4618      	mov	r0, r3
 800b112:	f7f6 ffc5 	bl	80020a0 <HW_TS_Stop>
	UTIL_SEQ_SetTask(1<<CFG_TASK_READ_BATTERY, CFG_SCH_PRIO_0);
 800b116:	2100      	movs	r1, #0
 800b118:	2010      	movs	r0, #16
 800b11a:	f000 ff2d 	bl	800bf78 <UTIL_SEQ_SetTask>
	return;
 800b11e:	bf00      	nop
}
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	20000afc 	.word	0x20000afc

0800b128 <updateConnScreen>:

/* User Function definitions */
void updateConnScreen(void)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af02      	add	r7, sp, #8
	ssd1306_SetCursor(15, 50);
 800b12e:	2132      	movs	r1, #50	@ 0x32
 800b130:	200f      	movs	r0, #15
 800b132:	f7f8 fc45 	bl	80039c0 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 800b136:	2000      	movs	r0, #0
 800b138:	f7f8 faf8 	bl	800372c <ssd1306_Fill>
	ssd1306_SetCursor(16, 50);
 800b13c:	2132      	movs	r1, #50	@ 0x32
 800b13e:	2010      	movs	r0, #16
 800b140:	f7f8 fc3e 	bl	80039c0 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 800b144:	2000      	movs	r0, #0
 800b146:	f7f8 faf1 	bl	800372c <ssd1306_Fill>
	char CMSG[] = "Connected";
 800b14a:	4a0b      	ldr	r2, [pc, #44]	@ (800b178 <updateConnScreen+0x50>)
 800b14c:	1d3b      	adds	r3, r7, #4
 800b14e:	ca07      	ldmia	r2, {r0, r1, r2}
 800b150:	c303      	stmia	r3!, {r0, r1}
 800b152:	801a      	strh	r2, [r3, #0]
	ssd1306_SetCursor(5, 50);
 800b154:	2132      	movs	r1, #50	@ 0x32
 800b156:	2005      	movs	r0, #5
 800b158:	f7f8 fc32 	bl	80039c0 <ssd1306_SetCursor>
	ssd1306_WriteString(CMSG, Font_7x10, White);
 800b15c:	4b07      	ldr	r3, [pc, #28]	@ (800b17c <updateConnScreen+0x54>)
 800b15e:	1d38      	adds	r0, r7, #4
 800b160:	2201      	movs	r2, #1
 800b162:	9200      	str	r2, [sp, #0]
 800b164:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b166:	f7f8 fc05 	bl	8003974 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800b16a:	f7f8 faf7 	bl	800375c <ssd1306_UpdateScreen>
}
 800b16e:	bf00      	nop
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	0800ef78 	.word	0x0800ef78
 800b17c:	0800f8e8 	.word	0x0800f8e8

0800b180 <updateDisConnScreen>:

void updateDisConnScreen(void)
{
 800b180:	b590      	push	{r4, r7, lr}
 800b182:	b087      	sub	sp, #28
 800b184:	af02      	add	r7, sp, #8
	char DMSG[] = "Disconnected";
 800b186:	4b0b      	ldr	r3, [pc, #44]	@ (800b1b4 <updateDisConnScreen+0x34>)
 800b188:	463c      	mov	r4, r7
 800b18a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b18c:	c407      	stmia	r4!, {r0, r1, r2}
 800b18e:	7023      	strb	r3, [r4, #0]
	ssd1306_SetCursor(5, 50);
 800b190:	2132      	movs	r1, #50	@ 0x32
 800b192:	2005      	movs	r0, #5
 800b194:	f7f8 fc14 	bl	80039c0 <ssd1306_SetCursor>
	ssd1306_WriteString(DMSG, Font_7x10, White);
 800b198:	4b07      	ldr	r3, [pc, #28]	@ (800b1b8 <updateDisConnScreen+0x38>)
 800b19a:	4638      	mov	r0, r7
 800b19c:	2201      	movs	r2, #1
 800b19e:	9200      	str	r2, [sp, #0]
 800b1a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b1a2:	f7f8 fbe7 	bl	8003974 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800b1a6:	f7f8 fad9 	bl	800375c <ssd1306_UpdateScreen>
}
 800b1aa:	bf00      	nop
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd90      	pop	{r4, r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	0800ef84 	.word	0x0800ef84
 800b1b8:	0800f8e8 	.word	0x0800f8e8
 800b1bc:	00000000 	.word	0x00000000

0800b1c0 <readTemperature>:
void readTemperature(void)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b08a      	sub	sp, #40	@ 0x28
 800b1c4:	af02      	add	r7, sp, #8
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) (Custom_App_Context.ADC_BUFF), 2);
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	4941      	ldr	r1, [pc, #260]	@ (800b2d0 <readTemperature+0x110>)
 800b1ca:	4842      	ldr	r0, [pc, #264]	@ (800b2d4 <readTemperature+0x114>)
 800b1cc:	f7f9 f864 	bl	8004298 <HAL_ADC_Start_DMA>
	while(!Custom_App_Context.ADC_CONV_CPLT);
 800b1d0:	bf00      	nop
 800b1d2:	4b41      	ldr	r3, [pc, #260]	@ (800b2d8 <readTemperature+0x118>)
 800b1d4:	791b      	ldrb	r3, [r3, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d0fb      	beq.n	800b1d2 <readTemperature+0x12>
	Custom_App_Context.TMP_ADC_VALUE = (uint16_t) Custom_App_Context.ADC_BUFF[0];
 800b1da:	4b3f      	ldr	r3, [pc, #252]	@ (800b2d8 <readTemperature+0x118>)
 800b1dc:	88da      	ldrh	r2, [r3, #6]
 800b1de:	4b3e      	ldr	r3, [pc, #248]	@ (800b2d8 <readTemperature+0x118>)
 800b1e0:	815a      	strh	r2, [r3, #10]
	UpdateCharData[0] = (uint8_t)((Custom_App_Context.TMP_ADC_VALUE >> 8) & 0x0F);
 800b1e2:	4b3d      	ldr	r3, [pc, #244]	@ (800b2d8 <readTemperature+0x118>)
 800b1e4:	895b      	ldrh	r3, [r3, #10]
 800b1e6:	0a1b      	lsrs	r3, r3, #8
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	f003 030f 	and.w	r3, r3, #15
 800b1f0:	b2da      	uxtb	r2, r3
 800b1f2:	4b3a      	ldr	r3, [pc, #232]	@ (800b2dc <readTemperature+0x11c>)
 800b1f4:	701a      	strb	r2, [r3, #0]
	UpdateCharData[1] = (uint8_t)(Custom_App_Context.TMP_ADC_VALUE & 0xFF);
 800b1f6:	4b38      	ldr	r3, [pc, #224]	@ (800b2d8 <readTemperature+0x118>)
 800b1f8:	895b      	ldrh	r3, [r3, #10]
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	4b37      	ldr	r3, [pc, #220]	@ (800b2dc <readTemperature+0x11c>)
 800b1fe:	705a      	strb	r2, [r3, #1]
	Custom_STM_App_Update_Char(CUSTOM_STM_TMPCHAR, (uint8_t *)UpdateCharData);
 800b200:	4936      	ldr	r1, [pc, #216]	@ (800b2dc <readTemperature+0x11c>)
 800b202:	2000      	movs	r0, #0
 800b204:	f000 fa88 	bl	800b718 <Custom_STM_App_Update_Char>
	APP_DBG_MSG("UpdateCharData[0]: %u", UpdateCharData[0]);
	APP_DBG_MSG("UpdateCharData[1]: %u", UpdateCharData[1]);
	HAL_ADC_Stop(&hadc1);
 800b208:	4832      	ldr	r0, [pc, #200]	@ (800b2d4 <readTemperature+0x114>)
 800b20a:	f7f9 f811 	bl	8004230 <HAL_ADC_Stop>
	Custom_App_Context.ADC_CONV_CPLT = 0;
 800b20e:	4b32      	ldr	r3, [pc, #200]	@ (800b2d8 <readTemperature+0x118>)
 800b210:	2200      	movs	r2, #0
 800b212:	711a      	strb	r2, [r3, #4]
	HW_TS_Start(Custom_App_Context.TMP_TIMER_ID, TMPTIMER_INTERVAL);
 800b214:	4b30      	ldr	r3, [pc, #192]	@ (800b2d8 <readTemperature+0x118>)
 800b216:	789b      	ldrb	r3, [r3, #2]
 800b218:	f241 0102 	movw	r1, #4098	@ 0x1002
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7f6 ffc3 	bl	80021a8 <HW_TS_Start>

	float voltage = (Custom_App_Context.TMP_ADC_VALUE/4095.0) * 3.3;
 800b222:	4b2d      	ldr	r3, [pc, #180]	@ (800b2d8 <readTemperature+0x118>)
 800b224:	895b      	ldrh	r3, [r3, #10]
 800b226:	4618      	mov	r0, r3
 800b228:	f7f5 f954 	bl	80004d4 <__aeabi_i2d>
 800b22c:	a322      	add	r3, pc, #136	@ (adr r3, 800b2b8 <readTemperature+0xf8>)
 800b22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b232:	f7f5 fae3 	bl	80007fc <__aeabi_ddiv>
 800b236:	4602      	mov	r2, r0
 800b238:	460b      	mov	r3, r1
 800b23a:	4610      	mov	r0, r2
 800b23c:	4619      	mov	r1, r3
 800b23e:	a320      	add	r3, pc, #128	@ (adr r3, 800b2c0 <readTemperature+0x100>)
 800b240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b244:	f7f5 f9b0 	bl	80005a8 <__aeabi_dmul>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4610      	mov	r0, r2
 800b24e:	4619      	mov	r1, r3
 800b250:	f7f5 fc82 	bl	8000b58 <__aeabi_d2f>
 800b254:	4603      	mov	r3, r0
 800b256:	61fb      	str	r3, [r7, #28]
	float temperature = voltage / 0.01;
 800b258:	69f8      	ldr	r0, [r7, #28]
 800b25a:	f7f5 f94d 	bl	80004f8 <__aeabi_f2d>
 800b25e:	a31a      	add	r3, pc, #104	@ (adr r3, 800b2c8 <readTemperature+0x108>)
 800b260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b264:	f7f5 faca 	bl	80007fc <__aeabi_ddiv>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	4610      	mov	r0, r2
 800b26e:	4619      	mov	r1, r3
 800b270:	f7f5 fc72 	bl	8000b58 <__aeabi_d2f>
 800b274:	4603      	mov	r3, r0
 800b276:	61bb      	str	r3, [r7, #24]
	ssd1306_SetCursor(5,35);
 800b278:	2123      	movs	r1, #35	@ 0x23
 800b27a:	2005      	movs	r0, #5
 800b27c:	f7f8 fba0 	bl	80039c0 <ssd1306_SetCursor>
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "Temp: %.2f C", temperature);
 800b280:	69b8      	ldr	r0, [r7, #24]
 800b282:	f7f5 f939 	bl	80004f8 <__aeabi_f2d>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	1d38      	adds	r0, r7, #4
 800b28c:	e9cd 2300 	strd	r2, r3, [sp]
 800b290:	4a13      	ldr	r2, [pc, #76]	@ (800b2e0 <readTemperature+0x120>)
 800b292:	2114      	movs	r1, #20
 800b294:	f001 fccc 	bl	800cc30 <sniprintf>
	ssd1306_WriteString(buffer, Font_7x10, White);
 800b298:	4b12      	ldr	r3, [pc, #72]	@ (800b2e4 <readTemperature+0x124>)
 800b29a:	1d38      	adds	r0, r7, #4
 800b29c:	2201      	movs	r2, #1
 800b29e:	9200      	str	r2, [sp, #0]
 800b2a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b2a2:	f7f8 fb67 	bl	8003974 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800b2a6:	f7f8 fa59 	bl	800375c <ssd1306_UpdateScreen>

	return;
 800b2aa:	bf00      	nop
}
 800b2ac:	3720      	adds	r7, #32
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	f3af 8000 	nop.w
 800b2b8:	00000000 	.word	0x00000000
 800b2bc:	40affe00 	.word	0x40affe00
 800b2c0:	66666666 	.word	0x66666666
 800b2c4:	400a6666 	.word	0x400a6666
 800b2c8:	47ae147b 	.word	0x47ae147b
 800b2cc:	3f847ae1 	.word	0x3f847ae1
 800b2d0:	20000b02 	.word	0x20000b02
 800b2d4:	2000030c 	.word	0x2000030c
 800b2d8:	20000afc 	.word	0x20000afc
 800b2dc:	20000b0c 	.word	0x20000b0c
 800b2e0:	0800ef94 	.word	0x0800ef94
 800b2e4:	0800f8e8 	.word	0x0800f8e8

0800b2e8 <readBattery>:

void readBattery(void)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b088      	sub	sp, #32
 800b2ec:	af02      	add	r7, sp, #8
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) (Custom_App_Context.ADC_BUFF), 2);
 800b2ee:	2202      	movs	r2, #2
 800b2f0:	4937      	ldr	r1, [pc, #220]	@ (800b3d0 <readBattery+0xe8>)
 800b2f2:	4838      	ldr	r0, [pc, #224]	@ (800b3d4 <readBattery+0xec>)
 800b2f4:	f7f8 ffd0 	bl	8004298 <HAL_ADC_Start_DMA>
	while(!Custom_App_Context.ADC_CONV_CPLT);
 800b2f8:	bf00      	nop
 800b2fa:	4b37      	ldr	r3, [pc, #220]	@ (800b3d8 <readBattery+0xf0>)
 800b2fc:	791b      	ldrb	r3, [r3, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d0fb      	beq.n	800b2fa <readBattery+0x12>
	Custom_App_Context.BATT_ADC_VALUE = (uint16_t) Custom_App_Context.ADC_BUFF[1];
 800b302:	4b35      	ldr	r3, [pc, #212]	@ (800b3d8 <readBattery+0xf0>)
 800b304:	891a      	ldrh	r2, [r3, #8]
 800b306:	4b34      	ldr	r3, [pc, #208]	@ (800b3d8 <readBattery+0xf0>)
 800b308:	819a      	strh	r2, [r3, #12]
	UpdateCharData[0] = (uint8_t)((Custom_App_Context.BATT_ADC_VALUE >> 8) & 0x0F);
 800b30a:	4b33      	ldr	r3, [pc, #204]	@ (800b3d8 <readBattery+0xf0>)
 800b30c:	899b      	ldrh	r3, [r3, #12]
 800b30e:	0a1b      	lsrs	r3, r3, #8
 800b310:	b29b      	uxth	r3, r3
 800b312:	b2db      	uxtb	r3, r3
 800b314:	f003 030f 	and.w	r3, r3, #15
 800b318:	b2da      	uxtb	r2, r3
 800b31a:	4b30      	ldr	r3, [pc, #192]	@ (800b3dc <readBattery+0xf4>)
 800b31c:	701a      	strb	r2, [r3, #0]
	UpdateCharData[1] = (uint8_t)(Custom_App_Context.BATT_ADC_VALUE & 0xFF);
 800b31e:	4b2e      	ldr	r3, [pc, #184]	@ (800b3d8 <readBattery+0xf0>)
 800b320:	899b      	ldrh	r3, [r3, #12]
 800b322:	b2da      	uxtb	r2, r3
 800b324:	4b2d      	ldr	r3, [pc, #180]	@ (800b3dc <readBattery+0xf4>)
 800b326:	705a      	strb	r2, [r3, #1]
	Custom_STM_App_Update_Char(CUSTOM_STM_BATTCHAR, (uint8_t *)UpdateCharData);
 800b328:	492c      	ldr	r1, [pc, #176]	@ (800b3dc <readBattery+0xf4>)
 800b32a:	2001      	movs	r0, #1
 800b32c:	f000 f9f4 	bl	800b718 <Custom_STM_App_Update_Char>
	HAL_ADC_Stop(&hadc1);
 800b330:	4828      	ldr	r0, [pc, #160]	@ (800b3d4 <readBattery+0xec>)
 800b332:	f7f8 ff7d 	bl	8004230 <HAL_ADC_Stop>
	Custom_App_Context.ADC_CONV_CPLT = 0;
 800b336:	4b28      	ldr	r3, [pc, #160]	@ (800b3d8 <readBattery+0xf0>)
 800b338:	2200      	movs	r2, #0
 800b33a:	711a      	strb	r2, [r3, #4]
	HW_TS_Start(Custom_App_Context.BATT_TIMER_ID, BATTTIMER_INTERVAL);
 800b33c:	4b26      	ldr	r3, [pc, #152]	@ (800b3d8 <readBattery+0xf0>)
 800b33e:	78db      	ldrb	r3, [r3, #3]
 800b340:	f243 0107 	movw	r1, #12295	@ 0x3007
 800b344:	4618      	mov	r0, r3
 800b346:	f7f6 ff2f 	bl	80021a8 <HW_TS_Start>

	float battvoltage = (Custom_App_Context.BATT_ADC_VALUE/4095.0) * 3.3;
 800b34a:	4b23      	ldr	r3, [pc, #140]	@ (800b3d8 <readBattery+0xf0>)
 800b34c:	899b      	ldrh	r3, [r3, #12]
 800b34e:	4618      	mov	r0, r3
 800b350:	f7f5 f8c0 	bl	80004d4 <__aeabi_i2d>
 800b354:	a31a      	add	r3, pc, #104	@ (adr r3, 800b3c0 <readBattery+0xd8>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	f7f5 fa4f 	bl	80007fc <__aeabi_ddiv>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	4610      	mov	r0, r2
 800b364:	4619      	mov	r1, r3
 800b366:	a318      	add	r3, pc, #96	@ (adr r3, 800b3c8 <readBattery+0xe0>)
 800b368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36c:	f7f5 f91c 	bl	80005a8 <__aeabi_dmul>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4610      	mov	r0, r2
 800b376:	4619      	mov	r1, r3
 800b378:	f7f5 fbee 	bl	8000b58 <__aeabi_d2f>
 800b37c:	4603      	mov	r3, r0
 800b37e:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(5,20);
 800b380:	2114      	movs	r1, #20
 800b382:	2005      	movs	r0, #5
 800b384:	f7f8 fb1c 	bl	80039c0 <ssd1306_SetCursor>
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "Battery: %.2f V", battvoltage);
 800b388:	6978      	ldr	r0, [r7, #20]
 800b38a:	f7f5 f8b5 	bl	80004f8 <__aeabi_f2d>
 800b38e:	4602      	mov	r2, r0
 800b390:	460b      	mov	r3, r1
 800b392:	4638      	mov	r0, r7
 800b394:	e9cd 2300 	strd	r2, r3, [sp]
 800b398:	4a11      	ldr	r2, [pc, #68]	@ (800b3e0 <readBattery+0xf8>)
 800b39a:	2114      	movs	r1, #20
 800b39c:	f001 fc48 	bl	800cc30 <sniprintf>
	ssd1306_WriteString(buffer, Font_7x10, White);
 800b3a0:	4b10      	ldr	r3, [pc, #64]	@ (800b3e4 <readBattery+0xfc>)
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	9200      	str	r2, [sp, #0]
 800b3a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3aa:	f7f8 fae3 	bl	8003974 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800b3ae:	f7f8 f9d5 	bl	800375c <ssd1306_UpdateScreen>
	return;
 800b3b2:	bf00      	nop
}
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	f3af 8000 	nop.w
 800b3c0:	00000000 	.word	0x00000000
 800b3c4:	40affe00 	.word	0x40affe00
 800b3c8:	66666666 	.word	0x66666666
 800b3cc:	400a6666 	.word	0x400a6666
 800b3d0:	20000b02 	.word	0x20000b02
 800b3d4:	2000030c 	.word	0x2000030c
 800b3d8:	20000afc 	.word	0x20000afc
 800b3dc:	20000b0c 	.word	0x20000b0c
 800b3e0:	0800efa4 	.word	0x0800efa4
 800b3e4:	0800f8e8 	.word	0x0800f8e8

0800b3e8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08c      	sub	sp, #48	@ 0x30
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800b3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	2bff      	cmp	r3, #255	@ 0xff
 800b402:	f040 80a2 	bne.w	800b54a <Custom_STM_Event_Handler+0x162>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b408:	3302      	adds	r3, #2
 800b40a:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800b40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40e:	881b      	ldrh	r3, [r3, #0]
 800b410:	b29b      	uxth	r3, r3
 800b412:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800b416:	2b1a      	cmp	r3, #26
 800b418:	f200 8093 	bhi.w	800b542 <Custom_STM_Event_Handler+0x15a>
 800b41c:	a201      	add	r2, pc, #4	@ (adr r2, 800b424 <Custom_STM_Event_Handler+0x3c>)
 800b41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b422:	bf00      	nop
 800b424:	0800b491 	.word	0x0800b491
 800b428:	0800b543 	.word	0x0800b543
 800b42c:	0800b543 	.word	0x0800b543
 800b430:	0800b543 	.word	0x0800b543
 800b434:	0800b543 	.word	0x0800b543
 800b438:	0800b543 	.word	0x0800b543
 800b43c:	0800b543 	.word	0x0800b543
 800b440:	0800b543 	.word	0x0800b543
 800b444:	0800b543 	.word	0x0800b543
 800b448:	0800b543 	.word	0x0800b543
 800b44c:	0800b543 	.word	0x0800b543
 800b450:	0800b543 	.word	0x0800b543
 800b454:	0800b543 	.word	0x0800b543
 800b458:	0800b543 	.word	0x0800b543
 800b45c:	0800b543 	.word	0x0800b543
 800b460:	0800b543 	.word	0x0800b543
 800b464:	0800b543 	.word	0x0800b543
 800b468:	0800b543 	.word	0x0800b543
 800b46c:	0800b543 	.word	0x0800b543
 800b470:	0800b543 	.word	0x0800b543
 800b474:	0800b543 	.word	0x0800b543
 800b478:	0800b543 	.word	0x0800b543
 800b47c:	0800b543 	.word	0x0800b543
 800b480:	0800b543 	.word	0x0800b543
 800b484:	0800b543 	.word	0x0800b543
 800b488:	0800b543 	.word	0x0800b543
 800b48c:	0800b525 	.word	0x0800b525
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800b490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b492:	3302      	adds	r3, #2
 800b494:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomTmpcharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	885b      	ldrh	r3, [r3, #2]
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	461a      	mov	r2, r3
 800b49e:	4b2e      	ldr	r3, [pc, #184]	@ (800b558 <Custom_STM_Event_Handler+0x170>)
 800b4a0:	885b      	ldrh	r3, [r3, #2]
 800b4a2:	3302      	adds	r3, #2
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d119      	bne.n	800b4dc <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	7a1b      	ldrb	r3, [r3, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <Custom_STM_Event_Handler+0xd4>
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d008      	beq.n	800b4cc <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 800b4ba:	e032      	b.n	800b522 <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TMPCHAR_NOTIFY_DISABLED_EVT;
 800b4bc:	2302      	movs	r3, #2
 800b4be:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800b4c0:	f107 0308 	add.w	r3, r7, #8
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7ff fd29 	bl	800af1c <Custom_STM_App_Notification>
                break;
 800b4ca:	e02a      	b.n	800b522 <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TMPCHAR_NOTIFY_ENABLED_EVT;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800b4d0:	f107 0308 	add.w	r3, r7, #8
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7ff fd21 	bl	800af1c <Custom_STM_App_Notification>
                break;
 800b4da:	e022      	b.n	800b522 <Custom_STM_Event_Handler+0x13a>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomTmpcharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBattcharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	885b      	ldrh	r3, [r3, #2]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	4b1c      	ldr	r3, [pc, #112]	@ (800b558 <Custom_STM_Event_Handler+0x170>)
 800b4e6:	88db      	ldrh	r3, [r3, #6]
 800b4e8:	3302      	adds	r3, #2
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d12b      	bne.n	800b546 <Custom_STM_Event_Handler+0x15e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_2_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	7a1b      	ldrb	r3, [r3, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d002      	beq.n	800b502 <Custom_STM_Event_Handler+0x11a>
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d008      	beq.n	800b512 <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_2_Char_1_default */
              break;
 800b500:	e00f      	b.n	800b522 <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BATTCHAR_NOTIFY_DISABLED_EVT;
 800b502:	2305      	movs	r3, #5
 800b504:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800b506:	f107 0308 	add.w	r3, r7, #8
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7ff fd06 	bl	800af1c <Custom_STM_App_Notification>
                break;
 800b510:	e007      	b.n	800b522 <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BATTCHAR_NOTIFY_ENABLED_EVT;
 800b512:	2304      	movs	r3, #4
 800b514:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800b516:	f107 0308 	add.w	r3, r7, #8
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7ff fcfe 	bl	800af1c <Custom_STM_App_Notification>
                break;
 800b520:	bf00      	nop
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomBattcharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800b522:	e010      	b.n	800b546 <Custom_STM_Event_Handler+0x15e>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800b524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b526:	3302      	adds	r3, #2
 800b528:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800b52a:	2306      	movs	r3, #6
 800b52c:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800b52e:	6a3b      	ldr	r3, [r7, #32]
 800b530:	881b      	ldrh	r3, [r3, #0]
 800b532:	b29b      	uxth	r3, r3
 800b534:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800b536:	f107 0308 	add.w	r3, r7, #8
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7ff fcee 	bl	800af1c <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800b540:	e002      	b.n	800b548 <Custom_STM_Event_Handler+0x160>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800b542:	bf00      	nop
 800b544:	e002      	b.n	800b54c <Custom_STM_Event_Handler+0x164>
          break;
 800b546:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b548:	e000      	b.n	800b54c <Custom_STM_Event_Handler+0x164>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800b54a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800b54c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800b550:	4618      	mov	r0, r3
 800b552:	3730      	adds	r7, #48	@ 0x30
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	20000d0c 	.word	0x20000d0c

0800b55c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08c      	sub	sp, #48	@ 0x30
 800b560:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b562:	2392      	movs	r3, #146	@ 0x92
 800b564:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800b566:	4865      	ldr	r0, [pc, #404]	@ (800b6fc <SVCCTL_InitCustomSvc+0x1a0>)
 800b568:	f7fe fa7c 	bl	8009a64 <SVCCTL_RegisterSvcHandler>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 800b56c:	2304      	movs	r3, #4
 800b56e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_TMPSVC_UUID(uuid.Char_UUID_128);
 800b570:	238f      	movs	r3, #143	@ 0x8f
 800b572:	713b      	strb	r3, [r7, #4]
 800b574:	23e5      	movs	r3, #229	@ 0xe5
 800b576:	717b      	strb	r3, [r7, #5]
 800b578:	23b3      	movs	r3, #179	@ 0xb3
 800b57a:	71bb      	strb	r3, [r7, #6]
 800b57c:	23d5      	movs	r3, #213	@ 0xd5
 800b57e:	71fb      	strb	r3, [r7, #7]
 800b580:	232e      	movs	r3, #46	@ 0x2e
 800b582:	723b      	strb	r3, [r7, #8]
 800b584:	237f      	movs	r3, #127	@ 0x7f
 800b586:	727b      	strb	r3, [r7, #9]
 800b588:	234a      	movs	r3, #74	@ 0x4a
 800b58a:	72bb      	strb	r3, [r7, #10]
 800b58c:	2398      	movs	r3, #152	@ 0x98
 800b58e:	72fb      	strb	r3, [r7, #11]
 800b590:	232a      	movs	r3, #42	@ 0x2a
 800b592:	733b      	strb	r3, [r7, #12]
 800b594:	2348      	movs	r3, #72	@ 0x48
 800b596:	737b      	strb	r3, [r7, #13]
 800b598:	237a      	movs	r3, #122	@ 0x7a
 800b59a:	73bb      	strb	r3, [r7, #14]
 800b59c:	23cc      	movs	r3, #204	@ 0xcc
 800b59e:	73fb      	strb	r3, [r7, #15]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	743b      	strb	r3, [r7, #16]
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	747b      	strb	r3, [r7, #17]
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	74bb      	strb	r3, [r7, #18]
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800b5b0:	7dbb      	ldrb	r3, [r7, #22]
 800b5b2:	1d39      	adds	r1, r7, #4
 800b5b4:	4a52      	ldr	r2, [pc, #328]	@ (800b700 <SVCCTL_InitCustomSvc+0x1a4>)
 800b5b6:	9200      	str	r2, [sp, #0]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	2002      	movs	r0, #2
 800b5bc:	f7fd fcc5 	bl	8008f4a <aci_gatt_add_service>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  TMPCHAR
   */
  COPY_TMPCHAR_UUID(uuid.Char_UUID_128);
 800b5c4:	2319      	movs	r3, #25
 800b5c6:	713b      	strb	r3, [r7, #4]
 800b5c8:	23ed      	movs	r3, #237	@ 0xed
 800b5ca:	717b      	strb	r3, [r7, #5]
 800b5cc:	2382      	movs	r3, #130	@ 0x82
 800b5ce:	71bb      	strb	r3, [r7, #6]
 800b5d0:	23ae      	movs	r3, #174	@ 0xae
 800b5d2:	71fb      	strb	r3, [r7, #7]
 800b5d4:	23ed      	movs	r3, #237	@ 0xed
 800b5d6:	723b      	strb	r3, [r7, #8]
 800b5d8:	2321      	movs	r3, #33	@ 0x21
 800b5da:	727b      	strb	r3, [r7, #9]
 800b5dc:	234c      	movs	r3, #76	@ 0x4c
 800b5de:	72bb      	strb	r3, [r7, #10]
 800b5e0:	239d      	movs	r3, #157	@ 0x9d
 800b5e2:	72fb      	strb	r3, [r7, #11]
 800b5e4:	2341      	movs	r3, #65	@ 0x41
 800b5e6:	733b      	strb	r3, [r7, #12]
 800b5e8:	2345      	movs	r3, #69	@ 0x45
 800b5ea:	737b      	strb	r3, [r7, #13]
 800b5ec:	2322      	movs	r3, #34	@ 0x22
 800b5ee:	73bb      	strb	r3, [r7, #14]
 800b5f0:	238e      	movs	r3, #142	@ 0x8e
 800b5f2:	73fb      	strb	r3, [r7, #15]
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	743b      	strb	r3, [r7, #16]
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	747b      	strb	r3, [r7, #17]
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	74bb      	strb	r3, [r7, #18]
 800b600:	2300      	movs	r3, #0
 800b602:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTmpsvcHdle,
 800b604:	4b3e      	ldr	r3, [pc, #248]	@ (800b700 <SVCCTL_InitCustomSvc+0x1a4>)
 800b606:	8818      	ldrh	r0, [r3, #0]
 800b608:	4b3e      	ldr	r3, [pc, #248]	@ (800b704 <SVCCTL_InitCustomSvc+0x1a8>)
 800b60a:	881b      	ldrh	r3, [r3, #0]
 800b60c:	1d3a      	adds	r2, r7, #4
 800b60e:	493e      	ldr	r1, [pc, #248]	@ (800b708 <SVCCTL_InitCustomSvc+0x1ac>)
 800b610:	9105      	str	r1, [sp, #20]
 800b612:	2100      	movs	r1, #0
 800b614:	9104      	str	r1, [sp, #16]
 800b616:	2110      	movs	r1, #16
 800b618:	9103      	str	r1, [sp, #12]
 800b61a:	2108      	movs	r1, #8
 800b61c:	9102      	str	r1, [sp, #8]
 800b61e:	2100      	movs	r1, #0
 800b620:	9101      	str	r1, [sp, #4]
 800b622:	2112      	movs	r1, #18
 800b624:	9100      	str	r1, [sp, #0]
 800b626:	2102      	movs	r1, #2
 800b628:	f7fd fd65 	bl	80090f6 <aci_gatt_add_char>
 800b62c:	4603      	mov	r3, r0
 800b62e:	75fb      	strb	r3, [r7, #23]
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 800b630:	2304      	movs	r3, #4
 800b632:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BATTSVC_UUID(uuid.Char_UUID_128);
 800b634:	23fb      	movs	r3, #251	@ 0xfb
 800b636:	713b      	strb	r3, [r7, #4]
 800b638:	2334      	movs	r3, #52	@ 0x34
 800b63a:	717b      	strb	r3, [r7, #5]
 800b63c:	239b      	movs	r3, #155	@ 0x9b
 800b63e:	71bb      	strb	r3, [r7, #6]
 800b640:	235f      	movs	r3, #95	@ 0x5f
 800b642:	71fb      	strb	r3, [r7, #7]
 800b644:	2380      	movs	r3, #128	@ 0x80
 800b646:	723b      	strb	r3, [r7, #8]
 800b648:	2300      	movs	r3, #0
 800b64a:	727b      	strb	r3, [r7, #9]
 800b64c:	2300      	movs	r3, #0
 800b64e:	72bb      	strb	r3, [r7, #10]
 800b650:	2380      	movs	r3, #128	@ 0x80
 800b652:	72fb      	strb	r3, [r7, #11]
 800b654:	2300      	movs	r3, #0
 800b656:	733b      	strb	r3, [r7, #12]
 800b658:	2310      	movs	r3, #16
 800b65a:	737b      	strb	r3, [r7, #13]
 800b65c:	2300      	movs	r3, #0
 800b65e:	73bb      	strb	r3, [r7, #14]
 800b660:	2300      	movs	r3, #0
 800b662:	73fb      	strb	r3, [r7, #15]
 800b664:	230f      	movs	r3, #15
 800b666:	743b      	strb	r3, [r7, #16]
 800b668:	2318      	movs	r3, #24
 800b66a:	747b      	strb	r3, [r7, #17]
 800b66c:	2300      	movs	r3, #0
 800b66e:	74bb      	strb	r3, [r7, #18]
 800b670:	2300      	movs	r3, #0
 800b672:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800b674:	7dbb      	ldrb	r3, [r7, #22]
 800b676:	1d39      	adds	r1, r7, #4
 800b678:	4a24      	ldr	r2, [pc, #144]	@ (800b70c <SVCCTL_InitCustomSvc+0x1b0>)
 800b67a:	9200      	str	r2, [sp, #0]
 800b67c:	2201      	movs	r2, #1
 800b67e:	2002      	movs	r0, #2
 800b680:	f7fd fc63 	bl	8008f4a <aci_gatt_add_service>
 800b684:	4603      	mov	r3, r0
 800b686:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  BATTCHAR
   */
  COPY_BATTCHAR_UUID(uuid.Char_UUID_128);
 800b688:	23fb      	movs	r3, #251	@ 0xfb
 800b68a:	713b      	strb	r3, [r7, #4]
 800b68c:	2334      	movs	r3, #52	@ 0x34
 800b68e:	717b      	strb	r3, [r7, #5]
 800b690:	239b      	movs	r3, #155	@ 0x9b
 800b692:	71bb      	strb	r3, [r7, #6]
 800b694:	235f      	movs	r3, #95	@ 0x5f
 800b696:	71fb      	strb	r3, [r7, #7]
 800b698:	2380      	movs	r3, #128	@ 0x80
 800b69a:	723b      	strb	r3, [r7, #8]
 800b69c:	2300      	movs	r3, #0
 800b69e:	727b      	strb	r3, [r7, #9]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	72bb      	strb	r3, [r7, #10]
 800b6a4:	2380      	movs	r3, #128	@ 0x80
 800b6a6:	72fb      	strb	r3, [r7, #11]
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	733b      	strb	r3, [r7, #12]
 800b6ac:	2310      	movs	r3, #16
 800b6ae:	737b      	strb	r3, [r7, #13]
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	73bb      	strb	r3, [r7, #14]
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	73fb      	strb	r3, [r7, #15]
 800b6b8:	2319      	movs	r3, #25
 800b6ba:	743b      	strb	r3, [r7, #16]
 800b6bc:	232a      	movs	r3, #42	@ 0x2a
 800b6be:	747b      	strb	r3, [r7, #17]
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	74bb      	strb	r3, [r7, #18]
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBattsvcHdle,
 800b6c8:	4b0d      	ldr	r3, [pc, #52]	@ (800b700 <SVCCTL_InitCustomSvc+0x1a4>)
 800b6ca:	8898      	ldrh	r0, [r3, #4]
 800b6cc:	4b10      	ldr	r3, [pc, #64]	@ (800b710 <SVCCTL_InitCustomSvc+0x1b4>)
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	1d3a      	adds	r2, r7, #4
 800b6d2:	4910      	ldr	r1, [pc, #64]	@ (800b714 <SVCCTL_InitCustomSvc+0x1b8>)
 800b6d4:	9105      	str	r1, [sp, #20]
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	9104      	str	r1, [sp, #16]
 800b6da:	2110      	movs	r1, #16
 800b6dc:	9103      	str	r1, [sp, #12]
 800b6de:	2108      	movs	r1, #8
 800b6e0:	9102      	str	r1, [sp, #8]
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	9101      	str	r1, [sp, #4]
 800b6e6:	2112      	movs	r1, #18
 800b6e8:	9100      	str	r1, [sp, #0]
 800b6ea:	2102      	movs	r1, #2
 800b6ec:	f7fd fd03 	bl	80090f6 <aci_gatt_add_char>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800b6f4:	bf00      	nop
}
 800b6f6:	3718      	adds	r7, #24
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	0800b3e9 	.word	0x0800b3e9
 800b700:	20000d0c 	.word	0x20000d0c
 800b704:	2000002c 	.word	0x2000002c
 800b708:	20000d0e 	.word	0x20000d0e
 800b70c:	20000d10 	.word	0x20000d10
 800b710:	2000002e 	.word	0x2000002e
 800b714:	20000d12 	.word	0x20000d12

0800b718 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af02      	add	r7, sp, #8
 800b71e:	4603      	mov	r3, r0
 800b720:	6039      	str	r1, [r7, #0]
 800b722:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b724:	2392      	movs	r3, #146	@ 0x92
 800b726:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800b728:	79fb      	ldrb	r3, [r7, #7]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <Custom_STM_App_Update_Char+0x1c>
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d010      	beq.n	800b754 <Custom_STM_App_Update_Char+0x3c>

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;

    default:
      break;
 800b732:	e01f      	b.n	800b774 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomTmpsvcHdle,
 800b734:	4b12      	ldr	r3, [pc, #72]	@ (800b780 <Custom_STM_App_Update_Char+0x68>)
 800b736:	8818      	ldrh	r0, [r3, #0]
 800b738:	4b11      	ldr	r3, [pc, #68]	@ (800b780 <Custom_STM_App_Update_Char+0x68>)
 800b73a:	8859      	ldrh	r1, [r3, #2]
 800b73c:	4b11      	ldr	r3, [pc, #68]	@ (800b784 <Custom_STM_App_Update_Char+0x6c>)
 800b73e:	881b      	ldrh	r3, [r3, #0]
 800b740:	b2da      	uxtb	r2, r3
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	4613      	mov	r3, r2
 800b748:	2200      	movs	r2, #0
 800b74a:	f7fd fddc 	bl	8009306 <aci_gatt_update_char_value>
 800b74e:	4603      	mov	r3, r0
 800b750:	73fb      	strb	r3, [r7, #15]
      break;
 800b752:	e00f      	b.n	800b774 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomBattsvcHdle,
 800b754:	4b0a      	ldr	r3, [pc, #40]	@ (800b780 <Custom_STM_App_Update_Char+0x68>)
 800b756:	8898      	ldrh	r0, [r3, #4]
 800b758:	4b09      	ldr	r3, [pc, #36]	@ (800b780 <Custom_STM_App_Update_Char+0x68>)
 800b75a:	88d9      	ldrh	r1, [r3, #6]
 800b75c:	4b0a      	ldr	r3, [pc, #40]	@ (800b788 <Custom_STM_App_Update_Char+0x70>)
 800b75e:	881b      	ldrh	r3, [r3, #0]
 800b760:	b2da      	uxtb	r2, r3
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	4613      	mov	r3, r2
 800b768:	2200      	movs	r2, #0
 800b76a:	f7fd fdcc 	bl	8009306 <aci_gatt_update_char_value>
 800b76e:	4603      	mov	r3, r0
 800b770:	73fb      	strb	r3, [r7, #15]
      break;
 800b772:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800b774:	7bfb      	ldrb	r3, [r7, #15]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	20000d0c 	.word	0x20000d0c
 800b784:	2000002c 	.word	0x2000002c
 800b788:	2000002e 	.word	0x2000002e

0800b78c <LL_PWR_EnableBootC2>:
{
 800b78c:	b480      	push	{r7}
 800b78e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b790:	4b05      	ldr	r3, [pc, #20]	@ (800b7a8 <LL_PWR_EnableBootC2+0x1c>)
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	4a04      	ldr	r2, [pc, #16]	@ (800b7a8 <LL_PWR_EnableBootC2+0x1c>)
 800b796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b79a:	60d3      	str	r3, [r2, #12]
}
 800b79c:	bf00      	nop
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	58000400 	.word	0x58000400

0800b7ac <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b7b4:	4b06      	ldr	r3, [pc, #24]	@ (800b7d0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b7b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800b7ba:	4905      	ldr	r1, [pc, #20]	@ (800b7d0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	58000800 	.word	0x58000800

0800b7d4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b7dc:	4b05      	ldr	r3, [pc, #20]	@ (800b7f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b7de:	6a1a      	ldr	r2, [r3, #32]
 800b7e0:	4904      	ldr	r1, [pc, #16]	@ (800b7f4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	620b      	str	r3, [r1, #32]
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	58000800 	.word	0x58000800

0800b7f8 <LL_AHB3_GRP1_EnableClock>:
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b804:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b806:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b814:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4013      	ands	r3, r2
 800b81a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b81c:	68fb      	ldr	r3, [r7, #12]
}
 800b81e:	bf00      	nop
 800b820:	3714      	adds	r7, #20
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b82a:	b480      	push	{r7}
 800b82c:	b085      	sub	sp, #20
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800b832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b836:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800b83a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4313      	orrs	r3, r2
 800b842:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800b846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b84a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4013      	ands	r3, r2
 800b852:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b854:	68fb      	ldr	r3, [r7, #12]
}
 800b856:	bf00      	nop
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <LL_C1_IPCC_EnableIT_TXF>:
{
 800b862:	b480      	push	{r7}
 800b864:	b083      	sub	sp, #12
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	601a      	str	r2, [r3, #0]
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <LL_C1_IPCC_EnableIT_RXO>:
{
 800b882:	b480      	push	{r7}
 800b884:	b083      	sub	sp, #12
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f043 0201 	orr.w	r2, r3, #1
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	601a      	str	r2, [r3, #0]
}
 800b896:	bf00      	nop
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b083      	sub	sp, #12
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
 800b8aa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685a      	ldr	r2, [r3, #4]
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	041b      	lsls	r3, r3, #16
 800b8b4:	43db      	mvns	r3, r3
 800b8b6:	401a      	ands	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	605a      	str	r2, [r3, #4]
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	041b      	lsls	r3, r3, #16
 800b8da:	431a      	orrs	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	605a      	str	r2, [r3, #4]
}
 800b8e0:	bf00      	nop
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <LL_C1_IPCC_EnableReceiveChannel>:
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	43db      	mvns	r3, r3
 800b8fe:	401a      	ands	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	605a      	str	r2, [r3, #4]
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	609a      	str	r2, [r3, #8]
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <LL_C1_IPCC_SetFlag_CHx>:
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	041a      	lsls	r2, r3, #16
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	609a      	str	r2, [r3, #8]
}
 800b93e:	bf00      	nop
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800b94a:	b480      	push	{r7}
 800b94c:	b083      	sub	sp, #12
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	68da      	ldr	r2, [r3, #12]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	4013      	ands	r3, r2
 800b95c:	683a      	ldr	r2, [r7, #0]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d101      	bne.n	800b966 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b962:	2301      	movs	r3, #1
 800b964:	e000      	b.n	800b968 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	69da      	ldr	r2, [r3, #28]
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	4013      	ands	r3, r2
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d101      	bne.n	800b990 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b98c:	2301      	movs	r3, #1
 800b98e:	e000      	b.n	800b992 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
	...

0800b9a0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b9a4:	2102      	movs	r1, #2
 800b9a6:	4818      	ldr	r0, [pc, #96]	@ (800ba08 <HW_IPCC_Rx_Handler+0x68>)
 800b9a8:	f7ff ffe4 	bl	800b974 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d008      	beq.n	800b9c4 <HW_IPCC_Rx_Handler+0x24>
 800b9b2:	4b15      	ldr	r3, [pc, #84]	@ (800ba08 <HW_IPCC_Rx_Handler+0x68>)
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	f003 0302 	and.w	r3, r3, #2
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d102      	bne.n	800b9c4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800b9be:	f000 f8f1 	bl	800bba4 <HW_IPCC_SYS_EvtHandler>
 800b9c2:	e01e      	b.n	800ba02 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	4810      	ldr	r0, [pc, #64]	@ (800ba08 <HW_IPCC_Rx_Handler+0x68>)
 800b9c8:	f7ff ffd4 	bl	800b974 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d008      	beq.n	800b9e4 <HW_IPCC_Rx_Handler+0x44>
 800b9d2:	4b0d      	ldr	r3, [pc, #52]	@ (800ba08 <HW_IPCC_Rx_Handler+0x68>)
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	f003 0301 	and.w	r3, r3, #1
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d102      	bne.n	800b9e4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800b9de:	f000 f8a5 	bl	800bb2c <HW_IPCC_BLE_EvtHandler>
 800b9e2:	e00e      	b.n	800ba02 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b9e4:	2108      	movs	r1, #8
 800b9e6:	4808      	ldr	r0, [pc, #32]	@ (800ba08 <HW_IPCC_Rx_Handler+0x68>)
 800b9e8:	f7ff ffc4 	bl	800b974 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d008      	beq.n	800ba04 <HW_IPCC_Rx_Handler+0x64>
 800b9f2:	4b05      	ldr	r3, [pc, #20]	@ (800ba08 <HW_IPCC_Rx_Handler+0x68>)
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	f003 0308 	and.w	r3, r3, #8
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d102      	bne.n	800ba04 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b9fe:	f000 f919 	bl	800bc34 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800ba02:	bf00      	nop
 800ba04:	bf00      	nop
}
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	58000c00 	.word	0x58000c00

0800ba0c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800ba10:	2102      	movs	r1, #2
 800ba12:	4818      	ldr	r0, [pc, #96]	@ (800ba74 <HW_IPCC_Tx_Handler+0x68>)
 800ba14:	f7ff ff99 	bl	800b94a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d108      	bne.n	800ba30 <HW_IPCC_Tx_Handler+0x24>
 800ba1e:	4b15      	ldr	r3, [pc, #84]	@ (800ba74 <HW_IPCC_Tx_Handler+0x68>)
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d102      	bne.n	800ba30 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800ba2a:	f000 f8af 	bl	800bb8c <HW_IPCC_SYS_CmdEvtHandler>
 800ba2e:	e01e      	b.n	800ba6e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800ba30:	2108      	movs	r1, #8
 800ba32:	4810      	ldr	r0, [pc, #64]	@ (800ba74 <HW_IPCC_Tx_Handler+0x68>)
 800ba34:	f7ff ff89 	bl	800b94a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d108      	bne.n	800ba50 <HW_IPCC_Tx_Handler+0x44>
 800ba3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba74 <HW_IPCC_Tx_Handler+0x68>)
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d102      	bne.n	800ba50 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800ba4a:	f000 f8d7 	bl	800bbfc <HW_IPCC_MM_FreeBufHandler>
 800ba4e:	e00e      	b.n	800ba6e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800ba50:	2120      	movs	r1, #32
 800ba52:	4808      	ldr	r0, [pc, #32]	@ (800ba74 <HW_IPCC_Tx_Handler+0x68>)
 800ba54:	f7ff ff79 	bl	800b94a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d108      	bne.n	800ba70 <HW_IPCC_Tx_Handler+0x64>
 800ba5e:	4b05      	ldr	r3, [pc, #20]	@ (800ba74 <HW_IPCC_Tx_Handler+0x68>)
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d102      	bne.n	800ba70 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800ba6a:	f000 f86b 	bl	800bb44 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800ba6e:	bf00      	nop
 800ba70:	bf00      	nop
}
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	58000c00 	.word	0x58000c00

0800ba78 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800ba7c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ba80:	f7ff fed3 	bl	800b82a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800ba84:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ba88:	f7ff fea4 	bl	800b7d4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800ba8c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ba90:	f7ff fe8c 	bl	800b7ac <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800ba94:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800ba96:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800ba98:	f7ff fe78 	bl	800b78c <LL_PWR_EnableBootC2>

  return;
 800ba9c:	bf00      	nop
}
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800baa4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800baa8:	f7ff fea6 	bl	800b7f8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800baac:	4806      	ldr	r0, [pc, #24]	@ (800bac8 <HW_IPCC_Init+0x28>)
 800baae:	f7ff fee8 	bl	800b882 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800bab2:	4805      	ldr	r0, [pc, #20]	@ (800bac8 <HW_IPCC_Init+0x28>)
 800bab4:	f7ff fed5 	bl	800b862 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800bab8:	202c      	movs	r0, #44	@ 0x2c
 800baba:	f7f9 f9f0 	bl	8004e9e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800babe:	202d      	movs	r0, #45	@ 0x2d
 800bac0:	f7f9 f9ed 	bl	8004e9e <HAL_NVIC_EnableIRQ>

  return;
 800bac4:	bf00      	nop
}
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	58000c00 	.word	0x58000c00

0800bacc <IPCC_Wakeup_CPU2>:

#if(CFG_LPM_STANDBY_SUPPORTED != 0)
static void IPCC_Wakeup_CPU2(void)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800bad0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800bad4:	f7ff fe7e 	bl	800b7d4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800bad8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800badc:	f7ff fe66 	bl	800b7ac <LL_C2_EXTI_EnableEvent_32_63>

  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800bae0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800bae2:	bf20      	wfe

  return;
 800bae4:	bf00      	nop
}
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <HW_IPCC_SetFlagCHx>:

static void HW_IPCC_SetFlagCHx(uint32_t Channel)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  IPCC_Wakeup_CPU2();
 800baf0:	f7ff ffec 	bl	800bacc <IPCC_Wakeup_CPU2>
  LL_C1_IPCC_SetFlag_CHx(IPCC, Channel);
 800baf4:	6879      	ldr	r1, [r7, #4]
 800baf6:	4803      	ldr	r0, [pc, #12]	@ (800bb04 <HW_IPCC_SetFlagCHx+0x1c>)
 800baf8:	f7ff ff18 	bl	800b92c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800bafc:	bf00      	nop
}
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	58000c00 	.word	0x58000c00

0800bb08 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bb0c:	2101      	movs	r1, #1
 800bb0e:	4802      	ldr	r0, [pc, #8]	@ (800bb18 <HW_IPCC_BLE_Init+0x10>)
 800bb10:	f7ff feec 	bl	800b8ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bb14:	bf00      	nop
}
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	58000c00 	.word	0x58000c00

0800bb1c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 800bb20:	2001      	movs	r0, #1
 800bb22:	f7ff ffe1 	bl	800bae8 <HW_IPCC_SetFlagCHx>

  return;
 800bb26:	bf00      	nop
}
 800bb28:	bd80      	pop	{r7, pc}
	...

0800bb2c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800bb30:	f7fe fc5c 	bl	800a3ec <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bb34:	2101      	movs	r1, #1
 800bb36:	4802      	ldr	r0, [pc, #8]	@ (800bb40 <HW_IPCC_BLE_EvtHandler+0x14>)
 800bb38:	f7ff feea 	bl	800b910 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bb3c:	bf00      	nop
}
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	58000c00 	.word	0x58000c00

0800bb44 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800bb48:	2120      	movs	r1, #32
 800bb4a:	4803      	ldr	r0, [pc, #12]	@ (800bb58 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800bb4c:	f7ff febc 	bl	800b8c8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800bb50:	f7fe fc7c 	bl	800a44c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800bb54:	bf00      	nop
}
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	58000c00 	.word	0x58000c00

0800bb5c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bb60:	2102      	movs	r1, #2
 800bb62:	4802      	ldr	r0, [pc, #8]	@ (800bb6c <HW_IPCC_SYS_Init+0x10>)
 800bb64:	f7ff fec2 	bl	800b8ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bb68:	bf00      	nop
}
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	58000c00 	.word	0x58000c00

0800bb70 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bb74:	2002      	movs	r0, #2
 800bb76:	f7ff ffb7 	bl	800bae8 <HW_IPCC_SetFlagCHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bb7a:	2102      	movs	r1, #2
 800bb7c:	4802      	ldr	r0, [pc, #8]	@ (800bb88 <HW_IPCC_SYS_SendCmd+0x18>)
 800bb7e:	f7ff fe90 	bl	800b8a2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800bb82:	bf00      	nop
}
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	58000c00 	.word	0x58000c00

0800bb8c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bb90:	2102      	movs	r1, #2
 800bb92:	4803      	ldr	r0, [pc, #12]	@ (800bba0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800bb94:	f7ff fe98 	bl	800b8c8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800bb98:	f7fe fca8 	bl	800a4ec <HW_IPCC_SYS_CmdEvtNot>

  return;
 800bb9c:	bf00      	nop
}
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	58000c00 	.word	0x58000c00

0800bba4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800bba8:	f7fe fcb6 	bl	800a518 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bbac:	2102      	movs	r1, #2
 800bbae:	4802      	ldr	r0, [pc, #8]	@ (800bbb8 <HW_IPCC_SYS_EvtHandler+0x14>)
 800bbb0:	f7ff feae 	bl	800b910 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bbb4:	bf00      	nop
}
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	58000c00 	.word	0x58000c00

0800bbbc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800bbc4:	2108      	movs	r1, #8
 800bbc6:	480b      	ldr	r0, [pc, #44]	@ (800bbf4 <HW_IPCC_MM_SendFreeBuf+0x38>)
 800bbc8:	f7ff febf 	bl	800b94a <LL_C1_IPCC_IsActiveFlag_CHx>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d007      	beq.n	800bbe2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800bbd2:	4a09      	ldr	r2, [pc, #36]	@ (800bbf8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bbd8:	2108      	movs	r1, #8
 800bbda:	4806      	ldr	r0, [pc, #24]	@ (800bbf4 <HW_IPCC_MM_SendFreeBuf+0x38>)
 800bbdc:	f7ff fe61 	bl	800b8a2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800bbe0:	e005      	b.n	800bbee <HW_IPCC_MM_SendFreeBuf+0x32>
    cb();
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bbe6:	2008      	movs	r0, #8
 800bbe8:	f7ff ff7e 	bl	800bae8 <HW_IPCC_SetFlagCHx>
  return;
 800bbec:	bf00      	nop
}
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	58000c00 	.word	0x58000c00
 800bbf8:	20000d14 	.word	0x20000d14

0800bbfc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bc00:	2108      	movs	r1, #8
 800bc02:	4805      	ldr	r0, [pc, #20]	@ (800bc18 <HW_IPCC_MM_FreeBufHandler+0x1c>)
 800bc04:	f7ff fe60 	bl	800b8c8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800bc08:	4b04      	ldr	r3, [pc, #16]	@ (800bc1c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bc0e:	2008      	movs	r0, #8
 800bc10:	f7ff ff6a 	bl	800bae8 <HW_IPCC_SetFlagCHx>

  return;
 800bc14:	bf00      	nop
}
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	58000c00 	.word	0x58000c00
 800bc1c:	20000d14 	.word	0x20000d14

0800bc20 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800bc24:	2108      	movs	r1, #8
 800bc26:	4802      	ldr	r0, [pc, #8]	@ (800bc30 <HW_IPCC_TRACES_Init+0x10>)
 800bc28:	f7ff fe60 	bl	800b8ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bc2c:	bf00      	nop
}
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	58000c00 	.word	0x58000c00

0800bc34 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800bc38:	f7fe fd16 	bl	800a668 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800bc3c:	2108      	movs	r1, #8
 800bc3e:	4802      	ldr	r0, [pc, #8]	@ (800bc48 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800bc40:	f7ff fe66 	bl	800b910 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bc44:	bf00      	nop
}
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	58000c00 	.word	0x58000c00

0800bc4c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800bc50:	4b05      	ldr	r3, [pc, #20]	@ (800bc68 <UTIL_LPM_Init+0x1c>)
 800bc52:	2200      	movs	r2, #0
 800bc54:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800bc56:	4b05      	ldr	r3, [pc, #20]	@ (800bc6c <UTIL_LPM_Init+0x20>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800bc5c:	bf00      	nop
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	20000d18 	.word	0x20000d18
 800bc6c:	20000d1c 	.word	0x20000d1c

0800bc70 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800bc70:	b480      	push	{r7}
 800bc72:	b087      	sub	sp, #28
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc7c:	f3ef 8310 	mrs	r3, PRIMASK
 800bc80:	613b      	str	r3, [r7, #16]
  return(result);
 800bc82:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800bc84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc86:	b672      	cpsid	i
}
 800bc88:	bf00      	nop
  
  switch(state)
 800bc8a:	78fb      	ldrb	r3, [r7, #3]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d008      	beq.n	800bca2 <UTIL_LPM_SetOffMode+0x32>
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d10e      	bne.n	800bcb2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800bc94:	4b0d      	ldr	r3, [pc, #52]	@ (800bccc <UTIL_LPM_SetOffMode+0x5c>)
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	4a0b      	ldr	r2, [pc, #44]	@ (800bccc <UTIL_LPM_SetOffMode+0x5c>)
 800bc9e:	6013      	str	r3, [r2, #0]
      break;
 800bca0:	e008      	b.n	800bcb4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	43da      	mvns	r2, r3
 800bca6:	4b09      	ldr	r3, [pc, #36]	@ (800bccc <UTIL_LPM_SetOffMode+0x5c>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4013      	ands	r3, r2
 800bcac:	4a07      	ldr	r2, [pc, #28]	@ (800bccc <UTIL_LPM_SetOffMode+0x5c>)
 800bcae:	6013      	str	r3, [r2, #0]
      break;
 800bcb0:	e000      	b.n	800bcb4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800bcb2:	bf00      	nop
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f383 8810 	msr	PRIMASK, r3
}
 800bcbe:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bcc0:	bf00      	nop
 800bcc2:	371c      	adds	r7, #28
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	20000d1c 	.word	0x20000d1c

0800bcd0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcd6:	f3ef 8310 	mrs	r3, PRIMASK
 800bcda:	60bb      	str	r3, [r7, #8]
  return(result);
 800bcdc:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800bcde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800bce0:	b672      	cpsid	i
}
 800bce2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800bce4:	4b12      	ldr	r3, [pc, #72]	@ (800bd30 <UTIL_LPM_EnterLowPower+0x60>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d006      	beq.n	800bcfa <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800bcec:	4b11      	ldr	r3, [pc, #68]	@ (800bd34 <UTIL_LPM_EnterLowPower+0x64>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800bcf2:	4b10      	ldr	r3, [pc, #64]	@ (800bd34 <UTIL_LPM_EnterLowPower+0x64>)
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	4798      	blx	r3
 800bcf8:	e010      	b.n	800bd1c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800bcfa:	4b0f      	ldr	r3, [pc, #60]	@ (800bd38 <UTIL_LPM_EnterLowPower+0x68>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d006      	beq.n	800bd10 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800bd02:	4b0c      	ldr	r3, [pc, #48]	@ (800bd34 <UTIL_LPM_EnterLowPower+0x64>)
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800bd08:	4b0a      	ldr	r3, [pc, #40]	@ (800bd34 <UTIL_LPM_EnterLowPower+0x64>)
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	4798      	blx	r3
 800bd0e:	e005      	b.n	800bd1c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800bd10:	4b08      	ldr	r3, [pc, #32]	@ (800bd34 <UTIL_LPM_EnterLowPower+0x64>)
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800bd16:	4b07      	ldr	r3, [pc, #28]	@ (800bd34 <UTIL_LPM_EnterLowPower+0x64>)
 800bd18:	695b      	ldr	r3, [r3, #20]
 800bd1a:	4798      	blx	r3
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f383 8810 	msr	PRIMASK, r3
}
 800bd26:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800bd28:	bf00      	nop
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20000d18 	.word	0x20000d18
 800bd34:	0800f0e4 	.word	0x0800f0e4
 800bd38:	20000d1c 	.word	0x20000d1c

0800bd3c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b090      	sub	sp, #64	@ 0x40
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800bd44:	4b73      	ldr	r3, [pc, #460]	@ (800bf14 <UTIL_SEQ_Run+0x1d8>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800bd4a:	4b72      	ldr	r3, [pc, #456]	@ (800bf14 <UTIL_SEQ_Run+0x1d8>)
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4013      	ands	r3, r2
 800bd52:	4a70      	ldr	r2, [pc, #448]	@ (800bf14 <UTIL_SEQ_Run+0x1d8>)
 800bd54:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800bd56:	4b70      	ldr	r3, [pc, #448]	@ (800bf18 <UTIL_SEQ_Run+0x1dc>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800bd5c:	4b6f      	ldr	r3, [pc, #444]	@ (800bf1c <UTIL_SEQ_Run+0x1e0>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800bd62:	4b6f      	ldr	r3, [pc, #444]	@ (800bf20 <UTIL_SEQ_Run+0x1e4>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800bd68:	4b6e      	ldr	r3, [pc, #440]	@ (800bf24 <UTIL_SEQ_Run+0x1e8>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bd6e:	e08d      	b.n	800be8c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800bd70:	2300      	movs	r3, #0
 800bd72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bd74:	e002      	b.n	800bd7c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800bd76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd78:	3301      	adds	r3, #1
 800bd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bd7c:	4a6a      	ldr	r2, [pc, #424]	@ (800bf28 <UTIL_SEQ_Run+0x1ec>)
 800bd7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd80:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd86:	401a      	ands	r2, r3
 800bd88:	4b62      	ldr	r3, [pc, #392]	@ (800bf14 <UTIL_SEQ_Run+0x1d8>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d0f1      	beq.n	800bd76 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800bd92:	4a65      	ldr	r2, [pc, #404]	@ (800bf28 <UTIL_SEQ_Run+0x1ec>)
 800bd94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd96:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd9c:	401a      	ands	r2, r3
 800bd9e:	4b5d      	ldr	r3, [pc, #372]	@ (800bf14 <UTIL_SEQ_Run+0x1d8>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4013      	ands	r3, r2
 800bda4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800bda6:	4a60      	ldr	r2, [pc, #384]	@ (800bf28 <UTIL_SEQ_Run+0x1ec>)
 800bda8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdaa:	00db      	lsls	r3, r3, #3
 800bdac:	4413      	add	r3, r2
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb2:	4013      	ands	r3, r2
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d106      	bne.n	800bdc6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800bdb8:	4a5b      	ldr	r2, [pc, #364]	@ (800bf28 <UTIL_SEQ_Run+0x1ec>)
 800bdba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdbc:	00db      	lsls	r3, r3, #3
 800bdbe:	4413      	add	r3, r2
 800bdc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800bdc6:	4a58      	ldr	r2, [pc, #352]	@ (800bf28 <UTIL_SEQ_Run+0x1ec>)
 800bdc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdca:	00db      	lsls	r3, r3, #3
 800bdcc:	4413      	add	r3, r2
 800bdce:	685a      	ldr	r2, [r3, #4]
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd2:	4013      	ands	r3, r2
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f000 f9d9 	bl	800c18c <SEQ_BitPosition>
 800bdda:	4603      	mov	r3, r0
 800bddc:	461a      	mov	r2, r3
 800bdde:	4b53      	ldr	r3, [pc, #332]	@ (800bf2c <UTIL_SEQ_Run+0x1f0>)
 800bde0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800bde2:	4a51      	ldr	r2, [pc, #324]	@ (800bf28 <UTIL_SEQ_Run+0x1ec>)
 800bde4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bde6:	00db      	lsls	r3, r3, #3
 800bde8:	4413      	add	r3, r2
 800bdea:	685a      	ldr	r2, [r3, #4]
 800bdec:	4b4f      	ldr	r3, [pc, #316]	@ (800bf2c <UTIL_SEQ_Run+0x1f0>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	fa01 f303 	lsl.w	r3, r1, r3
 800bdf6:	43db      	mvns	r3, r3
 800bdf8:	401a      	ands	r2, r3
 800bdfa:	494b      	ldr	r1, [pc, #300]	@ (800bf28 <UTIL_SEQ_Run+0x1ec>)
 800bdfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	440b      	add	r3, r1
 800be02:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be04:	f3ef 8310 	mrs	r3, PRIMASK
 800be08:	61bb      	str	r3, [r7, #24]
  return(result);
 800be0a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800be0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800be0e:	b672      	cpsid	i
}
 800be10:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800be12:	4b46      	ldr	r3, [pc, #280]	@ (800bf2c <UTIL_SEQ_Run+0x1f0>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2201      	movs	r2, #1
 800be18:	fa02 f303 	lsl.w	r3, r2, r3
 800be1c:	43da      	mvns	r2, r3
 800be1e:	4b3e      	ldr	r3, [pc, #248]	@ (800bf18 <UTIL_SEQ_Run+0x1dc>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4013      	ands	r3, r2
 800be24:	4a3c      	ldr	r2, [pc, #240]	@ (800bf18 <UTIL_SEQ_Run+0x1dc>)
 800be26:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800be28:	2302      	movs	r3, #2
 800be2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be2c:	e013      	b.n	800be56 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800be2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be30:	3b01      	subs	r3, #1
 800be32:	4a3d      	ldr	r2, [pc, #244]	@ (800bf28 <UTIL_SEQ_Run+0x1ec>)
 800be34:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800be38:	4b3c      	ldr	r3, [pc, #240]	@ (800bf2c <UTIL_SEQ_Run+0x1f0>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2201      	movs	r2, #1
 800be3e:	fa02 f303 	lsl.w	r3, r2, r3
 800be42:	43da      	mvns	r2, r3
 800be44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be46:	3b01      	subs	r3, #1
 800be48:	400a      	ands	r2, r1
 800be4a:	4937      	ldr	r1, [pc, #220]	@ (800bf28 <UTIL_SEQ_Run+0x1ec>)
 800be4c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800be50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be52:	3b01      	subs	r3, #1
 800be54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1e8      	bne.n	800be2e <UTIL_SEQ_Run+0xf2>
 800be5c:	6a3b      	ldr	r3, [r7, #32]
 800be5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	f383 8810 	msr	PRIMASK, r3
}
 800be66:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800be68:	4b30      	ldr	r3, [pc, #192]	@ (800bf2c <UTIL_SEQ_Run+0x1f0>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a30      	ldr	r2, [pc, #192]	@ (800bf30 <UTIL_SEQ_Run+0x1f4>)
 800be6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be72:	4798      	blx	r3

    local_taskset = TaskSet;
 800be74:	4b28      	ldr	r3, [pc, #160]	@ (800bf18 <UTIL_SEQ_Run+0x1dc>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800be7a:	4b28      	ldr	r3, [pc, #160]	@ (800bf1c <UTIL_SEQ_Run+0x1e0>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800be80:	4b27      	ldr	r3, [pc, #156]	@ (800bf20 <UTIL_SEQ_Run+0x1e4>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800be86:	4b27      	ldr	r3, [pc, #156]	@ (800bf24 <UTIL_SEQ_Run+0x1e8>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800be8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be90:	401a      	ands	r2, r3
 800be92:	4b20      	ldr	r3, [pc, #128]	@ (800bf14 <UTIL_SEQ_Run+0x1d8>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4013      	ands	r3, r2
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d005      	beq.n	800bea8 <UTIL_SEQ_Run+0x16c>
 800be9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea0:	4013      	ands	r3, r2
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f43f af64 	beq.w	800bd70 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800bea8:	4b20      	ldr	r3, [pc, #128]	@ (800bf2c <UTIL_SEQ_Run+0x1f0>)
 800beaa:	f04f 32ff 	mov.w	r2, #4294967295
 800beae:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800beb0:	f000 f95e 	bl	800c170 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800beb4:	f3ef 8310 	mrs	r3, PRIMASK
 800beb8:	613b      	str	r3, [r7, #16]
  return(result);
 800beba:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800bebc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bebe:	b672      	cpsid	i
}
 800bec0:	bf00      	nop
  local_taskset = TaskSet;
 800bec2:	4b15      	ldr	r3, [pc, #84]	@ (800bf18 <UTIL_SEQ_Run+0x1dc>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800bec8:	4b14      	ldr	r3, [pc, #80]	@ (800bf1c <UTIL_SEQ_Run+0x1e0>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800bece:	4b14      	ldr	r3, [pc, #80]	@ (800bf20 <UTIL_SEQ_Run+0x1e4>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800bed4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed8:	401a      	ands	r2, r3
 800beda:	4b0e      	ldr	r3, [pc, #56]	@ (800bf14 <UTIL_SEQ_Run+0x1d8>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4013      	ands	r3, r2
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d107      	bne.n	800bef4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800bee4:	4b0f      	ldr	r3, [pc, #60]	@ (800bf24 <UTIL_SEQ_Run+0x1e8>)
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beea:	4013      	ands	r3, r2
 800beec:	2b00      	cmp	r3, #0
 800beee:	d101      	bne.n	800bef4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800bef0:	f7f5 fb38 	bl	8001564 <UTIL_SEQ_Idle>
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f383 8810 	msr	PRIMASK, r3
}
 800befe:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800bf00:	f000 f93d 	bl	800c17e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800bf04:	4a03      	ldr	r2, [pc, #12]	@ (800bf14 <UTIL_SEQ_Run+0x1d8>)
 800bf06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf08:	6013      	str	r3, [r2, #0]

  return;
 800bf0a:	bf00      	nop
}
 800bf0c:	3740      	adds	r7, #64	@ 0x40
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	20000034 	.word	0x20000034
 800bf18:	20000d20 	.word	0x20000d20
 800bf1c:	20000d24 	.word	0x20000d24
 800bf20:	20000030 	.word	0x20000030
 800bf24:	20000d28 	.word	0x20000d28
 800bf28:	20000db0 	.word	0x20000db0
 800bf2c:	20000d2c 	.word	0x20000d2c
 800bf30:	20000d30 	.word	0x20000d30

0800bf34 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf40:	f3ef 8310 	mrs	r3, PRIMASK
 800bf44:	617b      	str	r3, [r7, #20]
  return(result);
 800bf46:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800bf48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf4a:	b672      	cpsid	i
}
 800bf4c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f000 f91c 	bl	800c18c <SEQ_BitPosition>
 800bf54:	4603      	mov	r3, r0
 800bf56:	4619      	mov	r1, r3
 800bf58:	4a06      	ldr	r2, [pc, #24]	@ (800bf74 <UTIL_SEQ_RegTask+0x40>)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	f383 8810 	msr	PRIMASK, r3
}
 800bf6a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800bf6c:	bf00      	nop
}
 800bf6e:	3720      	adds	r7, #32
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	20000d30 	.word	0x20000d30

0800bf78 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b087      	sub	sp, #28
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf82:	f3ef 8310 	mrs	r3, PRIMASK
 800bf86:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf88:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bf8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf8c:	b672      	cpsid	i
}
 800bf8e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800bf90:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc8 <UTIL_SEQ_SetTask+0x50>)
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4313      	orrs	r3, r2
 800bf98:	4a0b      	ldr	r2, [pc, #44]	@ (800bfc8 <UTIL_SEQ_SetTask+0x50>)
 800bf9a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800bf9c:	4a0b      	ldr	r2, [pc, #44]	@ (800bfcc <UTIL_SEQ_SetTask+0x54>)
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	431a      	orrs	r2, r3
 800bfa8:	4908      	ldr	r1, [pc, #32]	@ (800bfcc <UTIL_SEQ_SetTask+0x54>)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	f383 8810 	msr	PRIMASK, r3
}
 800bfba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bfbc:	bf00      	nop
}
 800bfbe:	371c      	adds	r7, #28
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	20000d20 	.word	0x20000d20
 800bfcc:	20000db0 	.word	0x20000db0

0800bfd0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b087      	sub	sp, #28
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfd8:	f3ef 8310 	mrs	r3, PRIMASK
 800bfdc:	60fb      	str	r3, [r7, #12]
  return(result);
 800bfde:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bfe0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bfe2:	b672      	cpsid	i
}
 800bfe4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	43da      	mvns	r2, r3
 800bfea:	4b08      	ldr	r3, [pc, #32]	@ (800c00c <UTIL_SEQ_PauseTask+0x3c>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4013      	ands	r3, r2
 800bff0:	4a06      	ldr	r2, [pc, #24]	@ (800c00c <UTIL_SEQ_PauseTask+0x3c>)
 800bff2:	6013      	str	r3, [r2, #0]
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	f383 8810 	msr	PRIMASK, r3
}
 800bffe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c000:	bf00      	nop
}
 800c002:	371c      	adds	r7, #28
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	20000030 	.word	0x20000030

0800c010 <UTIL_SEQ_IsPauseTask>:

uint32_t UTIL_SEQ_IsPauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c010:	b480      	push	{r7}
 800c012:	b087      	sub	sp, #28
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c018:	f3ef 8310 	mrs	r3, PRIMASK
 800c01c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c01e:	68bb      	ldr	r3, [r7, #8]
  uint32_t _status;
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c020:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c022:	b672      	cpsid	i
}
 800c024:	bf00      	nop

  _status = ((TaskMask & TaskId_bm) == TaskId_bm) ? 0u:1u;
 800c026:	4b0c      	ldr	r3, [pc, #48]	@ (800c058 <UTIL_SEQ_IsPauseTask+0x48>)
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4013      	ands	r3, r2
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	429a      	cmp	r2, r3
 800c032:	bf14      	ite	ne
 800c034:	2301      	movne	r3, #1
 800c036:	2300      	moveq	r3, #0
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	613b      	str	r3, [r7, #16]
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f383 8810 	msr	PRIMASK, r3
}
 800c046:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
 800c048:	693b      	ldr	r3, [r7, #16]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	371c      	adds	r7, #28
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	20000030 	.word	0x20000030

0800c05c <UTIL_SEQ_ResumeTask>:

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c05c:	b480      	push	{r7}
 800c05e:	b087      	sub	sp, #28
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c064:	f3ef 8310 	mrs	r3, PRIMASK
 800c068:	60fb      	str	r3, [r7, #12]
  return(result);
 800c06a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c06c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c06e:	b672      	cpsid	i
}
 800c070:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c072:	4b09      	ldr	r3, [pc, #36]	@ (800c098 <UTIL_SEQ_ResumeTask+0x3c>)
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4313      	orrs	r3, r2
 800c07a:	4a07      	ldr	r2, [pc, #28]	@ (800c098 <UTIL_SEQ_ResumeTask+0x3c>)
 800c07c:	6013      	str	r3, [r2, #0]
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	f383 8810 	msr	PRIMASK, r3
}
 800c088:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c08a:	bf00      	nop
}
 800c08c:	371c      	adds	r7, #28
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	20000030 	.word	0x20000030

0800c09c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c09c:	b480      	push	{r7}
 800c09e:	b087      	sub	sp, #28
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0a4:	f3ef 8310 	mrs	r3, PRIMASK
 800c0a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c0ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0ae:	b672      	cpsid	i
}
 800c0b0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c0b2:	4b09      	ldr	r3, [pc, #36]	@ (800c0d8 <UTIL_SEQ_SetEvt+0x3c>)
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	4a07      	ldr	r2, [pc, #28]	@ (800c0d8 <UTIL_SEQ_SetEvt+0x3c>)
 800c0bc:	6013      	str	r3, [r2, #0]
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	f383 8810 	msr	PRIMASK, r3
}
 800c0c8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c0ca:	bf00      	nop
}
 800c0cc:	371c      	adds	r7, #28
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	20000d24 	.word	0x20000d24

0800c0dc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b088      	sub	sp, #32
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c0e4:	4b1f      	ldr	r3, [pc, #124]	@ (800c164 <UTIL_SEQ_WaitEvt+0x88>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c0ea:	4b1e      	ldr	r3, [pc, #120]	@ (800c164 <UTIL_SEQ_WaitEvt+0x88>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f2:	d102      	bne.n	800c0fa <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	61fb      	str	r3, [r7, #28]
 800c0f8:	e005      	b.n	800c106 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c0fa:	4b1a      	ldr	r3, [pc, #104]	@ (800c164 <UTIL_SEQ_WaitEvt+0x88>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2201      	movs	r2, #1
 800c100:	fa02 f303 	lsl.w	r3, r2, r3
 800c104:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c106:	4b18      	ldr	r3, [pc, #96]	@ (800c168 <UTIL_SEQ_WaitEvt+0x8c>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c10c:	4a16      	ldr	r2, [pc, #88]	@ (800c168 <UTIL_SEQ_WaitEvt+0x8c>)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c112:	e003      	b.n	800c11c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c114:	6879      	ldr	r1, [r7, #4]
 800c116:	69f8      	ldr	r0, [r7, #28]
 800c118:	f7f5 fa2a 	bl	8001570 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c11c:	4b13      	ldr	r3, [pc, #76]	@ (800c16c <UTIL_SEQ_WaitEvt+0x90>)
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4013      	ands	r3, r2
 800c124:	2b00      	cmp	r3, #0
 800c126:	d0f5      	beq.n	800c114 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c128:	4a0e      	ldr	r2, [pc, #56]	@ (800c164 <UTIL_SEQ_WaitEvt+0x88>)
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c12e:	f3ef 8310 	mrs	r3, PRIMASK
 800c132:	60bb      	str	r3, [r7, #8]
  return(result);
 800c134:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c138:	b672      	cpsid	i
}
 800c13a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	43da      	mvns	r2, r3
 800c140:	4b0a      	ldr	r3, [pc, #40]	@ (800c16c <UTIL_SEQ_WaitEvt+0x90>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4013      	ands	r3, r2
 800c146:	4a09      	ldr	r2, [pc, #36]	@ (800c16c <UTIL_SEQ_WaitEvt+0x90>)
 800c148:	6013      	str	r3, [r2, #0]
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f383 8810 	msr	PRIMASK, r3
}
 800c154:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c156:	4a04      	ldr	r2, [pc, #16]	@ (800c168 <UTIL_SEQ_WaitEvt+0x8c>)
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	6013      	str	r3, [r2, #0]
  return;
 800c15c:	bf00      	nop
}
 800c15e:	3720      	adds	r7, #32
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	20000d2c 	.word	0x20000d2c
 800c168:	20000d28 	.word	0x20000d28
 800c16c:	20000d24 	.word	0x20000d24

0800c170 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c170:	b480      	push	{r7}
 800c172:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c174:	bf00      	nop
}
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c17e:	b480      	push	{r7}
 800c180:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c182:	bf00      	nop
}
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c194:	2300      	movs	r3, #0
 800c196:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1a2:	d204      	bcs.n	800c1ae <SEQ_BitPosition+0x22>
 800c1a4:	2310      	movs	r3, #16
 800c1a6:	73fb      	strb	r3, [r7, #15]
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	041b      	lsls	r3, r3, #16
 800c1ac:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c1b4:	d205      	bcs.n	800c1c2 <SEQ_BitPosition+0x36>
 800c1b6:	7bfb      	ldrb	r3, [r7, #15]
 800c1b8:	3308      	adds	r3, #8
 800c1ba:	73fb      	strb	r3, [r7, #15]
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	021b      	lsls	r3, r3, #8
 800c1c0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1c8:	d205      	bcs.n	800c1d6 <SEQ_BitPosition+0x4a>
 800c1ca:	7bfb      	ldrb	r3, [r7, #15]
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	73fb      	strb	r3, [r7, #15]
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	011b      	lsls	r3, r3, #4
 800c1d4:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	0f1b      	lsrs	r3, r3, #28
 800c1da:	4a07      	ldr	r2, [pc, #28]	@ (800c1f8 <SEQ_BitPosition+0x6c>)
 800c1dc:	5cd2      	ldrb	r2, [r2, r3]
 800c1de:	7bfb      	ldrb	r3, [r7, #15]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
 800c1e6:	f1c3 031f 	rsb	r3, r3, #31
 800c1ea:	b2db      	uxtb	r3, r3
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3714      	adds	r7, #20
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr
 800c1f8:	0800f91c 	.word	0x0800f91c

0800c1fc <__cvt>:
 800c1fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c200:	ec57 6b10 	vmov	r6, r7, d0
 800c204:	2f00      	cmp	r7, #0
 800c206:	460c      	mov	r4, r1
 800c208:	4619      	mov	r1, r3
 800c20a:	463b      	mov	r3, r7
 800c20c:	bfbb      	ittet	lt
 800c20e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c212:	461f      	movlt	r7, r3
 800c214:	2300      	movge	r3, #0
 800c216:	232d      	movlt	r3, #45	@ 0x2d
 800c218:	700b      	strb	r3, [r1, #0]
 800c21a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c21c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c220:	4691      	mov	r9, r2
 800c222:	f023 0820 	bic.w	r8, r3, #32
 800c226:	bfbc      	itt	lt
 800c228:	4632      	movlt	r2, r6
 800c22a:	4616      	movlt	r6, r2
 800c22c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c230:	d005      	beq.n	800c23e <__cvt+0x42>
 800c232:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c236:	d100      	bne.n	800c23a <__cvt+0x3e>
 800c238:	3401      	adds	r4, #1
 800c23a:	2102      	movs	r1, #2
 800c23c:	e000      	b.n	800c240 <__cvt+0x44>
 800c23e:	2103      	movs	r1, #3
 800c240:	ab03      	add	r3, sp, #12
 800c242:	9301      	str	r3, [sp, #4]
 800c244:	ab02      	add	r3, sp, #8
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	ec47 6b10 	vmov	d0, r6, r7
 800c24c:	4653      	mov	r3, sl
 800c24e:	4622      	mov	r2, r4
 800c250:	f000 fe7e 	bl	800cf50 <_dtoa_r>
 800c254:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c258:	4605      	mov	r5, r0
 800c25a:	d119      	bne.n	800c290 <__cvt+0x94>
 800c25c:	f019 0f01 	tst.w	r9, #1
 800c260:	d00e      	beq.n	800c280 <__cvt+0x84>
 800c262:	eb00 0904 	add.w	r9, r0, r4
 800c266:	2200      	movs	r2, #0
 800c268:	2300      	movs	r3, #0
 800c26a:	4630      	mov	r0, r6
 800c26c:	4639      	mov	r1, r7
 800c26e:	f7f4 fc03 	bl	8000a78 <__aeabi_dcmpeq>
 800c272:	b108      	cbz	r0, 800c278 <__cvt+0x7c>
 800c274:	f8cd 900c 	str.w	r9, [sp, #12]
 800c278:	2230      	movs	r2, #48	@ 0x30
 800c27a:	9b03      	ldr	r3, [sp, #12]
 800c27c:	454b      	cmp	r3, r9
 800c27e:	d31e      	bcc.n	800c2be <__cvt+0xc2>
 800c280:	9b03      	ldr	r3, [sp, #12]
 800c282:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c284:	1b5b      	subs	r3, r3, r5
 800c286:	4628      	mov	r0, r5
 800c288:	6013      	str	r3, [r2, #0]
 800c28a:	b004      	add	sp, #16
 800c28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c290:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c294:	eb00 0904 	add.w	r9, r0, r4
 800c298:	d1e5      	bne.n	800c266 <__cvt+0x6a>
 800c29a:	7803      	ldrb	r3, [r0, #0]
 800c29c:	2b30      	cmp	r3, #48	@ 0x30
 800c29e:	d10a      	bne.n	800c2b6 <__cvt+0xba>
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	f7f4 fbe6 	bl	8000a78 <__aeabi_dcmpeq>
 800c2ac:	b918      	cbnz	r0, 800c2b6 <__cvt+0xba>
 800c2ae:	f1c4 0401 	rsb	r4, r4, #1
 800c2b2:	f8ca 4000 	str.w	r4, [sl]
 800c2b6:	f8da 3000 	ldr.w	r3, [sl]
 800c2ba:	4499      	add	r9, r3
 800c2bc:	e7d3      	b.n	800c266 <__cvt+0x6a>
 800c2be:	1c59      	adds	r1, r3, #1
 800c2c0:	9103      	str	r1, [sp, #12]
 800c2c2:	701a      	strb	r2, [r3, #0]
 800c2c4:	e7d9      	b.n	800c27a <__cvt+0x7e>

0800c2c6 <__exponent>:
 800c2c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2c8:	2900      	cmp	r1, #0
 800c2ca:	bfba      	itte	lt
 800c2cc:	4249      	neglt	r1, r1
 800c2ce:	232d      	movlt	r3, #45	@ 0x2d
 800c2d0:	232b      	movge	r3, #43	@ 0x2b
 800c2d2:	2909      	cmp	r1, #9
 800c2d4:	7002      	strb	r2, [r0, #0]
 800c2d6:	7043      	strb	r3, [r0, #1]
 800c2d8:	dd29      	ble.n	800c32e <__exponent+0x68>
 800c2da:	f10d 0307 	add.w	r3, sp, #7
 800c2de:	461d      	mov	r5, r3
 800c2e0:	270a      	movs	r7, #10
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	fbb1 f6f7 	udiv	r6, r1, r7
 800c2e8:	fb07 1416 	mls	r4, r7, r6, r1
 800c2ec:	3430      	adds	r4, #48	@ 0x30
 800c2ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	2c63      	cmp	r4, #99	@ 0x63
 800c2f6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c2fa:	4631      	mov	r1, r6
 800c2fc:	dcf1      	bgt.n	800c2e2 <__exponent+0x1c>
 800c2fe:	3130      	adds	r1, #48	@ 0x30
 800c300:	1e94      	subs	r4, r2, #2
 800c302:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c306:	1c41      	adds	r1, r0, #1
 800c308:	4623      	mov	r3, r4
 800c30a:	42ab      	cmp	r3, r5
 800c30c:	d30a      	bcc.n	800c324 <__exponent+0x5e>
 800c30e:	f10d 0309 	add.w	r3, sp, #9
 800c312:	1a9b      	subs	r3, r3, r2
 800c314:	42ac      	cmp	r4, r5
 800c316:	bf88      	it	hi
 800c318:	2300      	movhi	r3, #0
 800c31a:	3302      	adds	r3, #2
 800c31c:	4403      	add	r3, r0
 800c31e:	1a18      	subs	r0, r3, r0
 800c320:	b003      	add	sp, #12
 800c322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c324:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c328:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c32c:	e7ed      	b.n	800c30a <__exponent+0x44>
 800c32e:	2330      	movs	r3, #48	@ 0x30
 800c330:	3130      	adds	r1, #48	@ 0x30
 800c332:	7083      	strb	r3, [r0, #2]
 800c334:	70c1      	strb	r1, [r0, #3]
 800c336:	1d03      	adds	r3, r0, #4
 800c338:	e7f1      	b.n	800c31e <__exponent+0x58>
	...

0800c33c <_printf_float>:
 800c33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c340:	b08d      	sub	sp, #52	@ 0x34
 800c342:	460c      	mov	r4, r1
 800c344:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c348:	4616      	mov	r6, r2
 800c34a:	461f      	mov	r7, r3
 800c34c:	4605      	mov	r5, r0
 800c34e:	f000 fcef 	bl	800cd30 <_localeconv_r>
 800c352:	6803      	ldr	r3, [r0, #0]
 800c354:	9304      	str	r3, [sp, #16]
 800c356:	4618      	mov	r0, r3
 800c358:	f7f3 ff62 	bl	8000220 <strlen>
 800c35c:	2300      	movs	r3, #0
 800c35e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c360:	f8d8 3000 	ldr.w	r3, [r8]
 800c364:	9005      	str	r0, [sp, #20]
 800c366:	3307      	adds	r3, #7
 800c368:	f023 0307 	bic.w	r3, r3, #7
 800c36c:	f103 0208 	add.w	r2, r3, #8
 800c370:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c374:	f8d4 b000 	ldr.w	fp, [r4]
 800c378:	f8c8 2000 	str.w	r2, [r8]
 800c37c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c380:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c384:	9307      	str	r3, [sp, #28]
 800c386:	f8cd 8018 	str.w	r8, [sp, #24]
 800c38a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c38e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c392:	4b9c      	ldr	r3, [pc, #624]	@ (800c604 <_printf_float+0x2c8>)
 800c394:	f04f 32ff 	mov.w	r2, #4294967295
 800c398:	f7f4 fba0 	bl	8000adc <__aeabi_dcmpun>
 800c39c:	bb70      	cbnz	r0, 800c3fc <_printf_float+0xc0>
 800c39e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3a2:	4b98      	ldr	r3, [pc, #608]	@ (800c604 <_printf_float+0x2c8>)
 800c3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a8:	f7f4 fb7a 	bl	8000aa0 <__aeabi_dcmple>
 800c3ac:	bb30      	cbnz	r0, 800c3fc <_printf_float+0xc0>
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	4640      	mov	r0, r8
 800c3b4:	4649      	mov	r1, r9
 800c3b6:	f7f4 fb69 	bl	8000a8c <__aeabi_dcmplt>
 800c3ba:	b110      	cbz	r0, 800c3c2 <_printf_float+0x86>
 800c3bc:	232d      	movs	r3, #45	@ 0x2d
 800c3be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3c2:	4a91      	ldr	r2, [pc, #580]	@ (800c608 <_printf_float+0x2cc>)
 800c3c4:	4b91      	ldr	r3, [pc, #580]	@ (800c60c <_printf_float+0x2d0>)
 800c3c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c3ca:	bf94      	ite	ls
 800c3cc:	4690      	movls	r8, r2
 800c3ce:	4698      	movhi	r8, r3
 800c3d0:	2303      	movs	r3, #3
 800c3d2:	6123      	str	r3, [r4, #16]
 800c3d4:	f02b 0304 	bic.w	r3, fp, #4
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	f04f 0900 	mov.w	r9, #0
 800c3de:	9700      	str	r7, [sp, #0]
 800c3e0:	4633      	mov	r3, r6
 800c3e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	f000 f9d2 	bl	800c790 <_printf_common>
 800c3ec:	3001      	adds	r0, #1
 800c3ee:	f040 808d 	bne.w	800c50c <_printf_float+0x1d0>
 800c3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f6:	b00d      	add	sp, #52	@ 0x34
 800c3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fc:	4642      	mov	r2, r8
 800c3fe:	464b      	mov	r3, r9
 800c400:	4640      	mov	r0, r8
 800c402:	4649      	mov	r1, r9
 800c404:	f7f4 fb6a 	bl	8000adc <__aeabi_dcmpun>
 800c408:	b140      	cbz	r0, 800c41c <_printf_float+0xe0>
 800c40a:	464b      	mov	r3, r9
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	bfbc      	itt	lt
 800c410:	232d      	movlt	r3, #45	@ 0x2d
 800c412:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c416:	4a7e      	ldr	r2, [pc, #504]	@ (800c610 <_printf_float+0x2d4>)
 800c418:	4b7e      	ldr	r3, [pc, #504]	@ (800c614 <_printf_float+0x2d8>)
 800c41a:	e7d4      	b.n	800c3c6 <_printf_float+0x8a>
 800c41c:	6863      	ldr	r3, [r4, #4]
 800c41e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c422:	9206      	str	r2, [sp, #24]
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	d13b      	bne.n	800c4a0 <_printf_float+0x164>
 800c428:	2306      	movs	r3, #6
 800c42a:	6063      	str	r3, [r4, #4]
 800c42c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c430:	2300      	movs	r3, #0
 800c432:	6022      	str	r2, [r4, #0]
 800c434:	9303      	str	r3, [sp, #12]
 800c436:	ab0a      	add	r3, sp, #40	@ 0x28
 800c438:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c43c:	ab09      	add	r3, sp, #36	@ 0x24
 800c43e:	9300      	str	r3, [sp, #0]
 800c440:	6861      	ldr	r1, [r4, #4]
 800c442:	ec49 8b10 	vmov	d0, r8, r9
 800c446:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c44a:	4628      	mov	r0, r5
 800c44c:	f7ff fed6 	bl	800c1fc <__cvt>
 800c450:	9b06      	ldr	r3, [sp, #24]
 800c452:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c454:	2b47      	cmp	r3, #71	@ 0x47
 800c456:	4680      	mov	r8, r0
 800c458:	d129      	bne.n	800c4ae <_printf_float+0x172>
 800c45a:	1cc8      	adds	r0, r1, #3
 800c45c:	db02      	blt.n	800c464 <_printf_float+0x128>
 800c45e:	6863      	ldr	r3, [r4, #4]
 800c460:	4299      	cmp	r1, r3
 800c462:	dd41      	ble.n	800c4e8 <_printf_float+0x1ac>
 800c464:	f1aa 0a02 	sub.w	sl, sl, #2
 800c468:	fa5f fa8a 	uxtb.w	sl, sl
 800c46c:	3901      	subs	r1, #1
 800c46e:	4652      	mov	r2, sl
 800c470:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c474:	9109      	str	r1, [sp, #36]	@ 0x24
 800c476:	f7ff ff26 	bl	800c2c6 <__exponent>
 800c47a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c47c:	1813      	adds	r3, r2, r0
 800c47e:	2a01      	cmp	r2, #1
 800c480:	4681      	mov	r9, r0
 800c482:	6123      	str	r3, [r4, #16]
 800c484:	dc02      	bgt.n	800c48c <_printf_float+0x150>
 800c486:	6822      	ldr	r2, [r4, #0]
 800c488:	07d2      	lsls	r2, r2, #31
 800c48a:	d501      	bpl.n	800c490 <_printf_float+0x154>
 800c48c:	3301      	adds	r3, #1
 800c48e:	6123      	str	r3, [r4, #16]
 800c490:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c494:	2b00      	cmp	r3, #0
 800c496:	d0a2      	beq.n	800c3de <_printf_float+0xa2>
 800c498:	232d      	movs	r3, #45	@ 0x2d
 800c49a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c49e:	e79e      	b.n	800c3de <_printf_float+0xa2>
 800c4a0:	9a06      	ldr	r2, [sp, #24]
 800c4a2:	2a47      	cmp	r2, #71	@ 0x47
 800c4a4:	d1c2      	bne.n	800c42c <_printf_float+0xf0>
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1c0      	bne.n	800c42c <_printf_float+0xf0>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	e7bd      	b.n	800c42a <_printf_float+0xee>
 800c4ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c4b2:	d9db      	bls.n	800c46c <_printf_float+0x130>
 800c4b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c4b8:	d118      	bne.n	800c4ec <_printf_float+0x1b0>
 800c4ba:	2900      	cmp	r1, #0
 800c4bc:	6863      	ldr	r3, [r4, #4]
 800c4be:	dd0b      	ble.n	800c4d8 <_printf_float+0x19c>
 800c4c0:	6121      	str	r1, [r4, #16]
 800c4c2:	b913      	cbnz	r3, 800c4ca <_printf_float+0x18e>
 800c4c4:	6822      	ldr	r2, [r4, #0]
 800c4c6:	07d0      	lsls	r0, r2, #31
 800c4c8:	d502      	bpl.n	800c4d0 <_printf_float+0x194>
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	440b      	add	r3, r1
 800c4ce:	6123      	str	r3, [r4, #16]
 800c4d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c4d2:	f04f 0900 	mov.w	r9, #0
 800c4d6:	e7db      	b.n	800c490 <_printf_float+0x154>
 800c4d8:	b913      	cbnz	r3, 800c4e0 <_printf_float+0x1a4>
 800c4da:	6822      	ldr	r2, [r4, #0]
 800c4dc:	07d2      	lsls	r2, r2, #31
 800c4de:	d501      	bpl.n	800c4e4 <_printf_float+0x1a8>
 800c4e0:	3302      	adds	r3, #2
 800c4e2:	e7f4      	b.n	800c4ce <_printf_float+0x192>
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e7f2      	b.n	800c4ce <_printf_float+0x192>
 800c4e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c4ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4ee:	4299      	cmp	r1, r3
 800c4f0:	db05      	blt.n	800c4fe <_printf_float+0x1c2>
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	6121      	str	r1, [r4, #16]
 800c4f6:	07d8      	lsls	r0, r3, #31
 800c4f8:	d5ea      	bpl.n	800c4d0 <_printf_float+0x194>
 800c4fa:	1c4b      	adds	r3, r1, #1
 800c4fc:	e7e7      	b.n	800c4ce <_printf_float+0x192>
 800c4fe:	2900      	cmp	r1, #0
 800c500:	bfd4      	ite	le
 800c502:	f1c1 0202 	rsble	r2, r1, #2
 800c506:	2201      	movgt	r2, #1
 800c508:	4413      	add	r3, r2
 800c50a:	e7e0      	b.n	800c4ce <_printf_float+0x192>
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	055a      	lsls	r2, r3, #21
 800c510:	d407      	bmi.n	800c522 <_printf_float+0x1e6>
 800c512:	6923      	ldr	r3, [r4, #16]
 800c514:	4642      	mov	r2, r8
 800c516:	4631      	mov	r1, r6
 800c518:	4628      	mov	r0, r5
 800c51a:	47b8      	blx	r7
 800c51c:	3001      	adds	r0, #1
 800c51e:	d12b      	bne.n	800c578 <_printf_float+0x23c>
 800c520:	e767      	b.n	800c3f2 <_printf_float+0xb6>
 800c522:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c526:	f240 80dd 	bls.w	800c6e4 <_printf_float+0x3a8>
 800c52a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c52e:	2200      	movs	r2, #0
 800c530:	2300      	movs	r3, #0
 800c532:	f7f4 faa1 	bl	8000a78 <__aeabi_dcmpeq>
 800c536:	2800      	cmp	r0, #0
 800c538:	d033      	beq.n	800c5a2 <_printf_float+0x266>
 800c53a:	4a37      	ldr	r2, [pc, #220]	@ (800c618 <_printf_float+0x2dc>)
 800c53c:	2301      	movs	r3, #1
 800c53e:	4631      	mov	r1, r6
 800c540:	4628      	mov	r0, r5
 800c542:	47b8      	blx	r7
 800c544:	3001      	adds	r0, #1
 800c546:	f43f af54 	beq.w	800c3f2 <_printf_float+0xb6>
 800c54a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c54e:	4543      	cmp	r3, r8
 800c550:	db02      	blt.n	800c558 <_printf_float+0x21c>
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	07d8      	lsls	r0, r3, #31
 800c556:	d50f      	bpl.n	800c578 <_printf_float+0x23c>
 800c558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c55c:	4631      	mov	r1, r6
 800c55e:	4628      	mov	r0, r5
 800c560:	47b8      	blx	r7
 800c562:	3001      	adds	r0, #1
 800c564:	f43f af45 	beq.w	800c3f2 <_printf_float+0xb6>
 800c568:	f04f 0900 	mov.w	r9, #0
 800c56c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c570:	f104 0a1a 	add.w	sl, r4, #26
 800c574:	45c8      	cmp	r8, r9
 800c576:	dc09      	bgt.n	800c58c <_printf_float+0x250>
 800c578:	6823      	ldr	r3, [r4, #0]
 800c57a:	079b      	lsls	r3, r3, #30
 800c57c:	f100 8103 	bmi.w	800c786 <_printf_float+0x44a>
 800c580:	68e0      	ldr	r0, [r4, #12]
 800c582:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c584:	4298      	cmp	r0, r3
 800c586:	bfb8      	it	lt
 800c588:	4618      	movlt	r0, r3
 800c58a:	e734      	b.n	800c3f6 <_printf_float+0xba>
 800c58c:	2301      	movs	r3, #1
 800c58e:	4652      	mov	r2, sl
 800c590:	4631      	mov	r1, r6
 800c592:	4628      	mov	r0, r5
 800c594:	47b8      	blx	r7
 800c596:	3001      	adds	r0, #1
 800c598:	f43f af2b 	beq.w	800c3f2 <_printf_float+0xb6>
 800c59c:	f109 0901 	add.w	r9, r9, #1
 800c5a0:	e7e8      	b.n	800c574 <_printf_float+0x238>
 800c5a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	dc39      	bgt.n	800c61c <_printf_float+0x2e0>
 800c5a8:	4a1b      	ldr	r2, [pc, #108]	@ (800c618 <_printf_float+0x2dc>)
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	4631      	mov	r1, r6
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	47b8      	blx	r7
 800c5b2:	3001      	adds	r0, #1
 800c5b4:	f43f af1d 	beq.w	800c3f2 <_printf_float+0xb6>
 800c5b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c5bc:	ea59 0303 	orrs.w	r3, r9, r3
 800c5c0:	d102      	bne.n	800c5c8 <_printf_float+0x28c>
 800c5c2:	6823      	ldr	r3, [r4, #0]
 800c5c4:	07d9      	lsls	r1, r3, #31
 800c5c6:	d5d7      	bpl.n	800c578 <_printf_float+0x23c>
 800c5c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5cc:	4631      	mov	r1, r6
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	47b8      	blx	r7
 800c5d2:	3001      	adds	r0, #1
 800c5d4:	f43f af0d 	beq.w	800c3f2 <_printf_float+0xb6>
 800c5d8:	f04f 0a00 	mov.w	sl, #0
 800c5dc:	f104 0b1a 	add.w	fp, r4, #26
 800c5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e2:	425b      	negs	r3, r3
 800c5e4:	4553      	cmp	r3, sl
 800c5e6:	dc01      	bgt.n	800c5ec <_printf_float+0x2b0>
 800c5e8:	464b      	mov	r3, r9
 800c5ea:	e793      	b.n	800c514 <_printf_float+0x1d8>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	465a      	mov	r2, fp
 800c5f0:	4631      	mov	r1, r6
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	47b8      	blx	r7
 800c5f6:	3001      	adds	r0, #1
 800c5f8:	f43f aefb 	beq.w	800c3f2 <_printf_float+0xb6>
 800c5fc:	f10a 0a01 	add.w	sl, sl, #1
 800c600:	e7ee      	b.n	800c5e0 <_printf_float+0x2a4>
 800c602:	bf00      	nop
 800c604:	7fefffff 	.word	0x7fefffff
 800c608:	0800f92c 	.word	0x0800f92c
 800c60c:	0800f930 	.word	0x0800f930
 800c610:	0800f934 	.word	0x0800f934
 800c614:	0800f938 	.word	0x0800f938
 800c618:	0800f93c 	.word	0x0800f93c
 800c61c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c61e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c622:	4553      	cmp	r3, sl
 800c624:	bfa8      	it	ge
 800c626:	4653      	movge	r3, sl
 800c628:	2b00      	cmp	r3, #0
 800c62a:	4699      	mov	r9, r3
 800c62c:	dc36      	bgt.n	800c69c <_printf_float+0x360>
 800c62e:	f04f 0b00 	mov.w	fp, #0
 800c632:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c636:	f104 021a 	add.w	r2, r4, #26
 800c63a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c63c:	9306      	str	r3, [sp, #24]
 800c63e:	eba3 0309 	sub.w	r3, r3, r9
 800c642:	455b      	cmp	r3, fp
 800c644:	dc31      	bgt.n	800c6aa <_printf_float+0x36e>
 800c646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c648:	459a      	cmp	sl, r3
 800c64a:	dc3a      	bgt.n	800c6c2 <_printf_float+0x386>
 800c64c:	6823      	ldr	r3, [r4, #0]
 800c64e:	07da      	lsls	r2, r3, #31
 800c650:	d437      	bmi.n	800c6c2 <_printf_float+0x386>
 800c652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c654:	ebaa 0903 	sub.w	r9, sl, r3
 800c658:	9b06      	ldr	r3, [sp, #24]
 800c65a:	ebaa 0303 	sub.w	r3, sl, r3
 800c65e:	4599      	cmp	r9, r3
 800c660:	bfa8      	it	ge
 800c662:	4699      	movge	r9, r3
 800c664:	f1b9 0f00 	cmp.w	r9, #0
 800c668:	dc33      	bgt.n	800c6d2 <_printf_float+0x396>
 800c66a:	f04f 0800 	mov.w	r8, #0
 800c66e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c672:	f104 0b1a 	add.w	fp, r4, #26
 800c676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c678:	ebaa 0303 	sub.w	r3, sl, r3
 800c67c:	eba3 0309 	sub.w	r3, r3, r9
 800c680:	4543      	cmp	r3, r8
 800c682:	f77f af79 	ble.w	800c578 <_printf_float+0x23c>
 800c686:	2301      	movs	r3, #1
 800c688:	465a      	mov	r2, fp
 800c68a:	4631      	mov	r1, r6
 800c68c:	4628      	mov	r0, r5
 800c68e:	47b8      	blx	r7
 800c690:	3001      	adds	r0, #1
 800c692:	f43f aeae 	beq.w	800c3f2 <_printf_float+0xb6>
 800c696:	f108 0801 	add.w	r8, r8, #1
 800c69a:	e7ec      	b.n	800c676 <_printf_float+0x33a>
 800c69c:	4642      	mov	r2, r8
 800c69e:	4631      	mov	r1, r6
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	47b8      	blx	r7
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	d1c2      	bne.n	800c62e <_printf_float+0x2f2>
 800c6a8:	e6a3      	b.n	800c3f2 <_printf_float+0xb6>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	4631      	mov	r1, r6
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	9206      	str	r2, [sp, #24]
 800c6b2:	47b8      	blx	r7
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	f43f ae9c 	beq.w	800c3f2 <_printf_float+0xb6>
 800c6ba:	9a06      	ldr	r2, [sp, #24]
 800c6bc:	f10b 0b01 	add.w	fp, fp, #1
 800c6c0:	e7bb      	b.n	800c63a <_printf_float+0x2fe>
 800c6c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6c6:	4631      	mov	r1, r6
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	47b8      	blx	r7
 800c6cc:	3001      	adds	r0, #1
 800c6ce:	d1c0      	bne.n	800c652 <_printf_float+0x316>
 800c6d0:	e68f      	b.n	800c3f2 <_printf_float+0xb6>
 800c6d2:	9a06      	ldr	r2, [sp, #24]
 800c6d4:	464b      	mov	r3, r9
 800c6d6:	4442      	add	r2, r8
 800c6d8:	4631      	mov	r1, r6
 800c6da:	4628      	mov	r0, r5
 800c6dc:	47b8      	blx	r7
 800c6de:	3001      	adds	r0, #1
 800c6e0:	d1c3      	bne.n	800c66a <_printf_float+0x32e>
 800c6e2:	e686      	b.n	800c3f2 <_printf_float+0xb6>
 800c6e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c6e8:	f1ba 0f01 	cmp.w	sl, #1
 800c6ec:	dc01      	bgt.n	800c6f2 <_printf_float+0x3b6>
 800c6ee:	07db      	lsls	r3, r3, #31
 800c6f0:	d536      	bpl.n	800c760 <_printf_float+0x424>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	4642      	mov	r2, r8
 800c6f6:	4631      	mov	r1, r6
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	47b8      	blx	r7
 800c6fc:	3001      	adds	r0, #1
 800c6fe:	f43f ae78 	beq.w	800c3f2 <_printf_float+0xb6>
 800c702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c706:	4631      	mov	r1, r6
 800c708:	4628      	mov	r0, r5
 800c70a:	47b8      	blx	r7
 800c70c:	3001      	adds	r0, #1
 800c70e:	f43f ae70 	beq.w	800c3f2 <_printf_float+0xb6>
 800c712:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c716:	2200      	movs	r2, #0
 800c718:	2300      	movs	r3, #0
 800c71a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c71e:	f7f4 f9ab 	bl	8000a78 <__aeabi_dcmpeq>
 800c722:	b9c0      	cbnz	r0, 800c756 <_printf_float+0x41a>
 800c724:	4653      	mov	r3, sl
 800c726:	f108 0201 	add.w	r2, r8, #1
 800c72a:	4631      	mov	r1, r6
 800c72c:	4628      	mov	r0, r5
 800c72e:	47b8      	blx	r7
 800c730:	3001      	adds	r0, #1
 800c732:	d10c      	bne.n	800c74e <_printf_float+0x412>
 800c734:	e65d      	b.n	800c3f2 <_printf_float+0xb6>
 800c736:	2301      	movs	r3, #1
 800c738:	465a      	mov	r2, fp
 800c73a:	4631      	mov	r1, r6
 800c73c:	4628      	mov	r0, r5
 800c73e:	47b8      	blx	r7
 800c740:	3001      	adds	r0, #1
 800c742:	f43f ae56 	beq.w	800c3f2 <_printf_float+0xb6>
 800c746:	f108 0801 	add.w	r8, r8, #1
 800c74a:	45d0      	cmp	r8, sl
 800c74c:	dbf3      	blt.n	800c736 <_printf_float+0x3fa>
 800c74e:	464b      	mov	r3, r9
 800c750:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c754:	e6df      	b.n	800c516 <_printf_float+0x1da>
 800c756:	f04f 0800 	mov.w	r8, #0
 800c75a:	f104 0b1a 	add.w	fp, r4, #26
 800c75e:	e7f4      	b.n	800c74a <_printf_float+0x40e>
 800c760:	2301      	movs	r3, #1
 800c762:	4642      	mov	r2, r8
 800c764:	e7e1      	b.n	800c72a <_printf_float+0x3ee>
 800c766:	2301      	movs	r3, #1
 800c768:	464a      	mov	r2, r9
 800c76a:	4631      	mov	r1, r6
 800c76c:	4628      	mov	r0, r5
 800c76e:	47b8      	blx	r7
 800c770:	3001      	adds	r0, #1
 800c772:	f43f ae3e 	beq.w	800c3f2 <_printf_float+0xb6>
 800c776:	f108 0801 	add.w	r8, r8, #1
 800c77a:	68e3      	ldr	r3, [r4, #12]
 800c77c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c77e:	1a5b      	subs	r3, r3, r1
 800c780:	4543      	cmp	r3, r8
 800c782:	dcf0      	bgt.n	800c766 <_printf_float+0x42a>
 800c784:	e6fc      	b.n	800c580 <_printf_float+0x244>
 800c786:	f04f 0800 	mov.w	r8, #0
 800c78a:	f104 0919 	add.w	r9, r4, #25
 800c78e:	e7f4      	b.n	800c77a <_printf_float+0x43e>

0800c790 <_printf_common>:
 800c790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c794:	4616      	mov	r6, r2
 800c796:	4698      	mov	r8, r3
 800c798:	688a      	ldr	r2, [r1, #8]
 800c79a:	690b      	ldr	r3, [r1, #16]
 800c79c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	bfb8      	it	lt
 800c7a4:	4613      	movlt	r3, r2
 800c7a6:	6033      	str	r3, [r6, #0]
 800c7a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c7ac:	4607      	mov	r7, r0
 800c7ae:	460c      	mov	r4, r1
 800c7b0:	b10a      	cbz	r2, 800c7b6 <_printf_common+0x26>
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	6033      	str	r3, [r6, #0]
 800c7b6:	6823      	ldr	r3, [r4, #0]
 800c7b8:	0699      	lsls	r1, r3, #26
 800c7ba:	bf42      	ittt	mi
 800c7bc:	6833      	ldrmi	r3, [r6, #0]
 800c7be:	3302      	addmi	r3, #2
 800c7c0:	6033      	strmi	r3, [r6, #0]
 800c7c2:	6825      	ldr	r5, [r4, #0]
 800c7c4:	f015 0506 	ands.w	r5, r5, #6
 800c7c8:	d106      	bne.n	800c7d8 <_printf_common+0x48>
 800c7ca:	f104 0a19 	add.w	sl, r4, #25
 800c7ce:	68e3      	ldr	r3, [r4, #12]
 800c7d0:	6832      	ldr	r2, [r6, #0]
 800c7d2:	1a9b      	subs	r3, r3, r2
 800c7d4:	42ab      	cmp	r3, r5
 800c7d6:	dc26      	bgt.n	800c826 <_printf_common+0x96>
 800c7d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7dc:	6822      	ldr	r2, [r4, #0]
 800c7de:	3b00      	subs	r3, #0
 800c7e0:	bf18      	it	ne
 800c7e2:	2301      	movne	r3, #1
 800c7e4:	0692      	lsls	r2, r2, #26
 800c7e6:	d42b      	bmi.n	800c840 <_printf_common+0xb0>
 800c7e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7ec:	4641      	mov	r1, r8
 800c7ee:	4638      	mov	r0, r7
 800c7f0:	47c8      	blx	r9
 800c7f2:	3001      	adds	r0, #1
 800c7f4:	d01e      	beq.n	800c834 <_printf_common+0xa4>
 800c7f6:	6823      	ldr	r3, [r4, #0]
 800c7f8:	6922      	ldr	r2, [r4, #16]
 800c7fa:	f003 0306 	and.w	r3, r3, #6
 800c7fe:	2b04      	cmp	r3, #4
 800c800:	bf02      	ittt	eq
 800c802:	68e5      	ldreq	r5, [r4, #12]
 800c804:	6833      	ldreq	r3, [r6, #0]
 800c806:	1aed      	subeq	r5, r5, r3
 800c808:	68a3      	ldr	r3, [r4, #8]
 800c80a:	bf0c      	ite	eq
 800c80c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c810:	2500      	movne	r5, #0
 800c812:	4293      	cmp	r3, r2
 800c814:	bfc4      	itt	gt
 800c816:	1a9b      	subgt	r3, r3, r2
 800c818:	18ed      	addgt	r5, r5, r3
 800c81a:	2600      	movs	r6, #0
 800c81c:	341a      	adds	r4, #26
 800c81e:	42b5      	cmp	r5, r6
 800c820:	d11a      	bne.n	800c858 <_printf_common+0xc8>
 800c822:	2000      	movs	r0, #0
 800c824:	e008      	b.n	800c838 <_printf_common+0xa8>
 800c826:	2301      	movs	r3, #1
 800c828:	4652      	mov	r2, sl
 800c82a:	4641      	mov	r1, r8
 800c82c:	4638      	mov	r0, r7
 800c82e:	47c8      	blx	r9
 800c830:	3001      	adds	r0, #1
 800c832:	d103      	bne.n	800c83c <_printf_common+0xac>
 800c834:	f04f 30ff 	mov.w	r0, #4294967295
 800c838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c83c:	3501      	adds	r5, #1
 800c83e:	e7c6      	b.n	800c7ce <_printf_common+0x3e>
 800c840:	18e1      	adds	r1, r4, r3
 800c842:	1c5a      	adds	r2, r3, #1
 800c844:	2030      	movs	r0, #48	@ 0x30
 800c846:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c84a:	4422      	add	r2, r4
 800c84c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c854:	3302      	adds	r3, #2
 800c856:	e7c7      	b.n	800c7e8 <_printf_common+0x58>
 800c858:	2301      	movs	r3, #1
 800c85a:	4622      	mov	r2, r4
 800c85c:	4641      	mov	r1, r8
 800c85e:	4638      	mov	r0, r7
 800c860:	47c8      	blx	r9
 800c862:	3001      	adds	r0, #1
 800c864:	d0e6      	beq.n	800c834 <_printf_common+0xa4>
 800c866:	3601      	adds	r6, #1
 800c868:	e7d9      	b.n	800c81e <_printf_common+0x8e>
	...

0800c86c <_printf_i>:
 800c86c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c870:	7e0f      	ldrb	r7, [r1, #24]
 800c872:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c874:	2f78      	cmp	r7, #120	@ 0x78
 800c876:	4691      	mov	r9, r2
 800c878:	4680      	mov	r8, r0
 800c87a:	460c      	mov	r4, r1
 800c87c:	469a      	mov	sl, r3
 800c87e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c882:	d807      	bhi.n	800c894 <_printf_i+0x28>
 800c884:	2f62      	cmp	r7, #98	@ 0x62
 800c886:	d80a      	bhi.n	800c89e <_printf_i+0x32>
 800c888:	2f00      	cmp	r7, #0
 800c88a:	f000 80d2 	beq.w	800ca32 <_printf_i+0x1c6>
 800c88e:	2f58      	cmp	r7, #88	@ 0x58
 800c890:	f000 80b9 	beq.w	800ca06 <_printf_i+0x19a>
 800c894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c898:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c89c:	e03a      	b.n	800c914 <_printf_i+0xa8>
 800c89e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c8a2:	2b15      	cmp	r3, #21
 800c8a4:	d8f6      	bhi.n	800c894 <_printf_i+0x28>
 800c8a6:	a101      	add	r1, pc, #4	@ (adr r1, 800c8ac <_printf_i+0x40>)
 800c8a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8ac:	0800c905 	.word	0x0800c905
 800c8b0:	0800c919 	.word	0x0800c919
 800c8b4:	0800c895 	.word	0x0800c895
 800c8b8:	0800c895 	.word	0x0800c895
 800c8bc:	0800c895 	.word	0x0800c895
 800c8c0:	0800c895 	.word	0x0800c895
 800c8c4:	0800c919 	.word	0x0800c919
 800c8c8:	0800c895 	.word	0x0800c895
 800c8cc:	0800c895 	.word	0x0800c895
 800c8d0:	0800c895 	.word	0x0800c895
 800c8d4:	0800c895 	.word	0x0800c895
 800c8d8:	0800ca19 	.word	0x0800ca19
 800c8dc:	0800c943 	.word	0x0800c943
 800c8e0:	0800c9d3 	.word	0x0800c9d3
 800c8e4:	0800c895 	.word	0x0800c895
 800c8e8:	0800c895 	.word	0x0800c895
 800c8ec:	0800ca3b 	.word	0x0800ca3b
 800c8f0:	0800c895 	.word	0x0800c895
 800c8f4:	0800c943 	.word	0x0800c943
 800c8f8:	0800c895 	.word	0x0800c895
 800c8fc:	0800c895 	.word	0x0800c895
 800c900:	0800c9db 	.word	0x0800c9db
 800c904:	6833      	ldr	r3, [r6, #0]
 800c906:	1d1a      	adds	r2, r3, #4
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	6032      	str	r2, [r6, #0]
 800c90c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c910:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c914:	2301      	movs	r3, #1
 800c916:	e09d      	b.n	800ca54 <_printf_i+0x1e8>
 800c918:	6833      	ldr	r3, [r6, #0]
 800c91a:	6820      	ldr	r0, [r4, #0]
 800c91c:	1d19      	adds	r1, r3, #4
 800c91e:	6031      	str	r1, [r6, #0]
 800c920:	0606      	lsls	r6, r0, #24
 800c922:	d501      	bpl.n	800c928 <_printf_i+0xbc>
 800c924:	681d      	ldr	r5, [r3, #0]
 800c926:	e003      	b.n	800c930 <_printf_i+0xc4>
 800c928:	0645      	lsls	r5, r0, #25
 800c92a:	d5fb      	bpl.n	800c924 <_printf_i+0xb8>
 800c92c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c930:	2d00      	cmp	r5, #0
 800c932:	da03      	bge.n	800c93c <_printf_i+0xd0>
 800c934:	232d      	movs	r3, #45	@ 0x2d
 800c936:	426d      	negs	r5, r5
 800c938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c93c:	4859      	ldr	r0, [pc, #356]	@ (800caa4 <_printf_i+0x238>)
 800c93e:	230a      	movs	r3, #10
 800c940:	e011      	b.n	800c966 <_printf_i+0xfa>
 800c942:	6821      	ldr	r1, [r4, #0]
 800c944:	6833      	ldr	r3, [r6, #0]
 800c946:	0608      	lsls	r0, r1, #24
 800c948:	f853 5b04 	ldr.w	r5, [r3], #4
 800c94c:	d402      	bmi.n	800c954 <_printf_i+0xe8>
 800c94e:	0649      	lsls	r1, r1, #25
 800c950:	bf48      	it	mi
 800c952:	b2ad      	uxthmi	r5, r5
 800c954:	2f6f      	cmp	r7, #111	@ 0x6f
 800c956:	4853      	ldr	r0, [pc, #332]	@ (800caa4 <_printf_i+0x238>)
 800c958:	6033      	str	r3, [r6, #0]
 800c95a:	bf14      	ite	ne
 800c95c:	230a      	movne	r3, #10
 800c95e:	2308      	moveq	r3, #8
 800c960:	2100      	movs	r1, #0
 800c962:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c966:	6866      	ldr	r6, [r4, #4]
 800c968:	60a6      	str	r6, [r4, #8]
 800c96a:	2e00      	cmp	r6, #0
 800c96c:	bfa2      	ittt	ge
 800c96e:	6821      	ldrge	r1, [r4, #0]
 800c970:	f021 0104 	bicge.w	r1, r1, #4
 800c974:	6021      	strge	r1, [r4, #0]
 800c976:	b90d      	cbnz	r5, 800c97c <_printf_i+0x110>
 800c978:	2e00      	cmp	r6, #0
 800c97a:	d04b      	beq.n	800ca14 <_printf_i+0x1a8>
 800c97c:	4616      	mov	r6, r2
 800c97e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c982:	fb03 5711 	mls	r7, r3, r1, r5
 800c986:	5dc7      	ldrb	r7, [r0, r7]
 800c988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c98c:	462f      	mov	r7, r5
 800c98e:	42bb      	cmp	r3, r7
 800c990:	460d      	mov	r5, r1
 800c992:	d9f4      	bls.n	800c97e <_printf_i+0x112>
 800c994:	2b08      	cmp	r3, #8
 800c996:	d10b      	bne.n	800c9b0 <_printf_i+0x144>
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	07df      	lsls	r7, r3, #31
 800c99c:	d508      	bpl.n	800c9b0 <_printf_i+0x144>
 800c99e:	6923      	ldr	r3, [r4, #16]
 800c9a0:	6861      	ldr	r1, [r4, #4]
 800c9a2:	4299      	cmp	r1, r3
 800c9a4:	bfde      	ittt	le
 800c9a6:	2330      	movle	r3, #48	@ 0x30
 800c9a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9b0:	1b92      	subs	r2, r2, r6
 800c9b2:	6122      	str	r2, [r4, #16]
 800c9b4:	f8cd a000 	str.w	sl, [sp]
 800c9b8:	464b      	mov	r3, r9
 800c9ba:	aa03      	add	r2, sp, #12
 800c9bc:	4621      	mov	r1, r4
 800c9be:	4640      	mov	r0, r8
 800c9c0:	f7ff fee6 	bl	800c790 <_printf_common>
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	d14a      	bne.n	800ca5e <_printf_i+0x1f2>
 800c9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9cc:	b004      	add	sp, #16
 800c9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d2:	6823      	ldr	r3, [r4, #0]
 800c9d4:	f043 0320 	orr.w	r3, r3, #32
 800c9d8:	6023      	str	r3, [r4, #0]
 800c9da:	4833      	ldr	r0, [pc, #204]	@ (800caa8 <_printf_i+0x23c>)
 800c9dc:	2778      	movs	r7, #120	@ 0x78
 800c9de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	6831      	ldr	r1, [r6, #0]
 800c9e6:	061f      	lsls	r7, r3, #24
 800c9e8:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9ec:	d402      	bmi.n	800c9f4 <_printf_i+0x188>
 800c9ee:	065f      	lsls	r7, r3, #25
 800c9f0:	bf48      	it	mi
 800c9f2:	b2ad      	uxthmi	r5, r5
 800c9f4:	6031      	str	r1, [r6, #0]
 800c9f6:	07d9      	lsls	r1, r3, #31
 800c9f8:	bf44      	itt	mi
 800c9fa:	f043 0320 	orrmi.w	r3, r3, #32
 800c9fe:	6023      	strmi	r3, [r4, #0]
 800ca00:	b11d      	cbz	r5, 800ca0a <_printf_i+0x19e>
 800ca02:	2310      	movs	r3, #16
 800ca04:	e7ac      	b.n	800c960 <_printf_i+0xf4>
 800ca06:	4827      	ldr	r0, [pc, #156]	@ (800caa4 <_printf_i+0x238>)
 800ca08:	e7e9      	b.n	800c9de <_printf_i+0x172>
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	f023 0320 	bic.w	r3, r3, #32
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	e7f6      	b.n	800ca02 <_printf_i+0x196>
 800ca14:	4616      	mov	r6, r2
 800ca16:	e7bd      	b.n	800c994 <_printf_i+0x128>
 800ca18:	6833      	ldr	r3, [r6, #0]
 800ca1a:	6825      	ldr	r5, [r4, #0]
 800ca1c:	6961      	ldr	r1, [r4, #20]
 800ca1e:	1d18      	adds	r0, r3, #4
 800ca20:	6030      	str	r0, [r6, #0]
 800ca22:	062e      	lsls	r6, r5, #24
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	d501      	bpl.n	800ca2c <_printf_i+0x1c0>
 800ca28:	6019      	str	r1, [r3, #0]
 800ca2a:	e002      	b.n	800ca32 <_printf_i+0x1c6>
 800ca2c:	0668      	lsls	r0, r5, #25
 800ca2e:	d5fb      	bpl.n	800ca28 <_printf_i+0x1bc>
 800ca30:	8019      	strh	r1, [r3, #0]
 800ca32:	2300      	movs	r3, #0
 800ca34:	6123      	str	r3, [r4, #16]
 800ca36:	4616      	mov	r6, r2
 800ca38:	e7bc      	b.n	800c9b4 <_printf_i+0x148>
 800ca3a:	6833      	ldr	r3, [r6, #0]
 800ca3c:	1d1a      	adds	r2, r3, #4
 800ca3e:	6032      	str	r2, [r6, #0]
 800ca40:	681e      	ldr	r6, [r3, #0]
 800ca42:	6862      	ldr	r2, [r4, #4]
 800ca44:	2100      	movs	r1, #0
 800ca46:	4630      	mov	r0, r6
 800ca48:	f7f3 fb9a 	bl	8000180 <memchr>
 800ca4c:	b108      	cbz	r0, 800ca52 <_printf_i+0x1e6>
 800ca4e:	1b80      	subs	r0, r0, r6
 800ca50:	6060      	str	r0, [r4, #4]
 800ca52:	6863      	ldr	r3, [r4, #4]
 800ca54:	6123      	str	r3, [r4, #16]
 800ca56:	2300      	movs	r3, #0
 800ca58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca5c:	e7aa      	b.n	800c9b4 <_printf_i+0x148>
 800ca5e:	6923      	ldr	r3, [r4, #16]
 800ca60:	4632      	mov	r2, r6
 800ca62:	4649      	mov	r1, r9
 800ca64:	4640      	mov	r0, r8
 800ca66:	47d0      	blx	sl
 800ca68:	3001      	adds	r0, #1
 800ca6a:	d0ad      	beq.n	800c9c8 <_printf_i+0x15c>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	079b      	lsls	r3, r3, #30
 800ca70:	d413      	bmi.n	800ca9a <_printf_i+0x22e>
 800ca72:	68e0      	ldr	r0, [r4, #12]
 800ca74:	9b03      	ldr	r3, [sp, #12]
 800ca76:	4298      	cmp	r0, r3
 800ca78:	bfb8      	it	lt
 800ca7a:	4618      	movlt	r0, r3
 800ca7c:	e7a6      	b.n	800c9cc <_printf_i+0x160>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	4632      	mov	r2, r6
 800ca82:	4649      	mov	r1, r9
 800ca84:	4640      	mov	r0, r8
 800ca86:	47d0      	blx	sl
 800ca88:	3001      	adds	r0, #1
 800ca8a:	d09d      	beq.n	800c9c8 <_printf_i+0x15c>
 800ca8c:	3501      	adds	r5, #1
 800ca8e:	68e3      	ldr	r3, [r4, #12]
 800ca90:	9903      	ldr	r1, [sp, #12]
 800ca92:	1a5b      	subs	r3, r3, r1
 800ca94:	42ab      	cmp	r3, r5
 800ca96:	dcf2      	bgt.n	800ca7e <_printf_i+0x212>
 800ca98:	e7eb      	b.n	800ca72 <_printf_i+0x206>
 800ca9a:	2500      	movs	r5, #0
 800ca9c:	f104 0619 	add.w	r6, r4, #25
 800caa0:	e7f5      	b.n	800ca8e <_printf_i+0x222>
 800caa2:	bf00      	nop
 800caa4:	0800f93e 	.word	0x0800f93e
 800caa8:	0800f94f 	.word	0x0800f94f

0800caac <std>:
 800caac:	2300      	movs	r3, #0
 800caae:	b510      	push	{r4, lr}
 800cab0:	4604      	mov	r4, r0
 800cab2:	e9c0 3300 	strd	r3, r3, [r0]
 800cab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800caba:	6083      	str	r3, [r0, #8]
 800cabc:	8181      	strh	r1, [r0, #12]
 800cabe:	6643      	str	r3, [r0, #100]	@ 0x64
 800cac0:	81c2      	strh	r2, [r0, #14]
 800cac2:	6183      	str	r3, [r0, #24]
 800cac4:	4619      	mov	r1, r3
 800cac6:	2208      	movs	r2, #8
 800cac8:	305c      	adds	r0, #92	@ 0x5c
 800caca:	f000 f928 	bl	800cd1e <memset>
 800cace:	4b0d      	ldr	r3, [pc, #52]	@ (800cb04 <std+0x58>)
 800cad0:	6263      	str	r3, [r4, #36]	@ 0x24
 800cad2:	4b0d      	ldr	r3, [pc, #52]	@ (800cb08 <std+0x5c>)
 800cad4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cad6:	4b0d      	ldr	r3, [pc, #52]	@ (800cb0c <std+0x60>)
 800cad8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cada:	4b0d      	ldr	r3, [pc, #52]	@ (800cb10 <std+0x64>)
 800cadc:	6323      	str	r3, [r4, #48]	@ 0x30
 800cade:	4b0d      	ldr	r3, [pc, #52]	@ (800cb14 <std+0x68>)
 800cae0:	6224      	str	r4, [r4, #32]
 800cae2:	429c      	cmp	r4, r3
 800cae4:	d006      	beq.n	800caf4 <std+0x48>
 800cae6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800caea:	4294      	cmp	r4, r2
 800caec:	d002      	beq.n	800caf4 <std+0x48>
 800caee:	33d0      	adds	r3, #208	@ 0xd0
 800caf0:	429c      	cmp	r4, r3
 800caf2:	d105      	bne.n	800cb00 <std+0x54>
 800caf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800caf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cafc:	f000 b98c 	b.w	800ce18 <__retarget_lock_init_recursive>
 800cb00:	bd10      	pop	{r4, pc}
 800cb02:	bf00      	nop
 800cb04:	0800cc99 	.word	0x0800cc99
 800cb08:	0800ccbb 	.word	0x0800ccbb
 800cb0c:	0800ccf3 	.word	0x0800ccf3
 800cb10:	0800cd17 	.word	0x0800cd17
 800cb14:	20000dc0 	.word	0x20000dc0

0800cb18 <stdio_exit_handler>:
 800cb18:	4a02      	ldr	r2, [pc, #8]	@ (800cb24 <stdio_exit_handler+0xc>)
 800cb1a:	4903      	ldr	r1, [pc, #12]	@ (800cb28 <stdio_exit_handler+0x10>)
 800cb1c:	4803      	ldr	r0, [pc, #12]	@ (800cb2c <stdio_exit_handler+0x14>)
 800cb1e:	f000 b869 	b.w	800cbf4 <_fwalk_sglue>
 800cb22:	bf00      	nop
 800cb24:	20000038 	.word	0x20000038
 800cb28:	0800ea19 	.word	0x0800ea19
 800cb2c:	20000048 	.word	0x20000048

0800cb30 <cleanup_stdio>:
 800cb30:	6841      	ldr	r1, [r0, #4]
 800cb32:	4b0c      	ldr	r3, [pc, #48]	@ (800cb64 <cleanup_stdio+0x34>)
 800cb34:	4299      	cmp	r1, r3
 800cb36:	b510      	push	{r4, lr}
 800cb38:	4604      	mov	r4, r0
 800cb3a:	d001      	beq.n	800cb40 <cleanup_stdio+0x10>
 800cb3c:	f001 ff6c 	bl	800ea18 <_fflush_r>
 800cb40:	68a1      	ldr	r1, [r4, #8]
 800cb42:	4b09      	ldr	r3, [pc, #36]	@ (800cb68 <cleanup_stdio+0x38>)
 800cb44:	4299      	cmp	r1, r3
 800cb46:	d002      	beq.n	800cb4e <cleanup_stdio+0x1e>
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f001 ff65 	bl	800ea18 <_fflush_r>
 800cb4e:	68e1      	ldr	r1, [r4, #12]
 800cb50:	4b06      	ldr	r3, [pc, #24]	@ (800cb6c <cleanup_stdio+0x3c>)
 800cb52:	4299      	cmp	r1, r3
 800cb54:	d004      	beq.n	800cb60 <cleanup_stdio+0x30>
 800cb56:	4620      	mov	r0, r4
 800cb58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb5c:	f001 bf5c 	b.w	800ea18 <_fflush_r>
 800cb60:	bd10      	pop	{r4, pc}
 800cb62:	bf00      	nop
 800cb64:	20000dc0 	.word	0x20000dc0
 800cb68:	20000e28 	.word	0x20000e28
 800cb6c:	20000e90 	.word	0x20000e90

0800cb70 <global_stdio_init.part.0>:
 800cb70:	b510      	push	{r4, lr}
 800cb72:	4b0b      	ldr	r3, [pc, #44]	@ (800cba0 <global_stdio_init.part.0+0x30>)
 800cb74:	4c0b      	ldr	r4, [pc, #44]	@ (800cba4 <global_stdio_init.part.0+0x34>)
 800cb76:	4a0c      	ldr	r2, [pc, #48]	@ (800cba8 <global_stdio_init.part.0+0x38>)
 800cb78:	601a      	str	r2, [r3, #0]
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	2104      	movs	r1, #4
 800cb80:	f7ff ff94 	bl	800caac <std>
 800cb84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cb88:	2201      	movs	r2, #1
 800cb8a:	2109      	movs	r1, #9
 800cb8c:	f7ff ff8e 	bl	800caac <std>
 800cb90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cb94:	2202      	movs	r2, #2
 800cb96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb9a:	2112      	movs	r1, #18
 800cb9c:	f7ff bf86 	b.w	800caac <std>
 800cba0:	20000ef8 	.word	0x20000ef8
 800cba4:	20000dc0 	.word	0x20000dc0
 800cba8:	0800cb19 	.word	0x0800cb19

0800cbac <__sfp_lock_acquire>:
 800cbac:	4801      	ldr	r0, [pc, #4]	@ (800cbb4 <__sfp_lock_acquire+0x8>)
 800cbae:	f000 b934 	b.w	800ce1a <__retarget_lock_acquire_recursive>
 800cbb2:	bf00      	nop
 800cbb4:	20000f01 	.word	0x20000f01

0800cbb8 <__sfp_lock_release>:
 800cbb8:	4801      	ldr	r0, [pc, #4]	@ (800cbc0 <__sfp_lock_release+0x8>)
 800cbba:	f000 b92f 	b.w	800ce1c <__retarget_lock_release_recursive>
 800cbbe:	bf00      	nop
 800cbc0:	20000f01 	.word	0x20000f01

0800cbc4 <__sinit>:
 800cbc4:	b510      	push	{r4, lr}
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	f7ff fff0 	bl	800cbac <__sfp_lock_acquire>
 800cbcc:	6a23      	ldr	r3, [r4, #32]
 800cbce:	b11b      	cbz	r3, 800cbd8 <__sinit+0x14>
 800cbd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbd4:	f7ff bff0 	b.w	800cbb8 <__sfp_lock_release>
 800cbd8:	4b04      	ldr	r3, [pc, #16]	@ (800cbec <__sinit+0x28>)
 800cbda:	6223      	str	r3, [r4, #32]
 800cbdc:	4b04      	ldr	r3, [pc, #16]	@ (800cbf0 <__sinit+0x2c>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1f5      	bne.n	800cbd0 <__sinit+0xc>
 800cbe4:	f7ff ffc4 	bl	800cb70 <global_stdio_init.part.0>
 800cbe8:	e7f2      	b.n	800cbd0 <__sinit+0xc>
 800cbea:	bf00      	nop
 800cbec:	0800cb31 	.word	0x0800cb31
 800cbf0:	20000ef8 	.word	0x20000ef8

0800cbf4 <_fwalk_sglue>:
 800cbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbf8:	4607      	mov	r7, r0
 800cbfa:	4688      	mov	r8, r1
 800cbfc:	4614      	mov	r4, r2
 800cbfe:	2600      	movs	r6, #0
 800cc00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc04:	f1b9 0901 	subs.w	r9, r9, #1
 800cc08:	d505      	bpl.n	800cc16 <_fwalk_sglue+0x22>
 800cc0a:	6824      	ldr	r4, [r4, #0]
 800cc0c:	2c00      	cmp	r4, #0
 800cc0e:	d1f7      	bne.n	800cc00 <_fwalk_sglue+0xc>
 800cc10:	4630      	mov	r0, r6
 800cc12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc16:	89ab      	ldrh	r3, [r5, #12]
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d907      	bls.n	800cc2c <_fwalk_sglue+0x38>
 800cc1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc20:	3301      	adds	r3, #1
 800cc22:	d003      	beq.n	800cc2c <_fwalk_sglue+0x38>
 800cc24:	4629      	mov	r1, r5
 800cc26:	4638      	mov	r0, r7
 800cc28:	47c0      	blx	r8
 800cc2a:	4306      	orrs	r6, r0
 800cc2c:	3568      	adds	r5, #104	@ 0x68
 800cc2e:	e7e9      	b.n	800cc04 <_fwalk_sglue+0x10>

0800cc30 <sniprintf>:
 800cc30:	b40c      	push	{r2, r3}
 800cc32:	b530      	push	{r4, r5, lr}
 800cc34:	4b17      	ldr	r3, [pc, #92]	@ (800cc94 <sniprintf+0x64>)
 800cc36:	1e0c      	subs	r4, r1, #0
 800cc38:	681d      	ldr	r5, [r3, #0]
 800cc3a:	b09d      	sub	sp, #116	@ 0x74
 800cc3c:	da08      	bge.n	800cc50 <sniprintf+0x20>
 800cc3e:	238b      	movs	r3, #139	@ 0x8b
 800cc40:	602b      	str	r3, [r5, #0]
 800cc42:	f04f 30ff 	mov.w	r0, #4294967295
 800cc46:	b01d      	add	sp, #116	@ 0x74
 800cc48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc4c:	b002      	add	sp, #8
 800cc4e:	4770      	bx	lr
 800cc50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cc54:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cc58:	bf14      	ite	ne
 800cc5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cc5e:	4623      	moveq	r3, r4
 800cc60:	9304      	str	r3, [sp, #16]
 800cc62:	9307      	str	r3, [sp, #28]
 800cc64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cc68:	9002      	str	r0, [sp, #8]
 800cc6a:	9006      	str	r0, [sp, #24]
 800cc6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cc70:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cc72:	ab21      	add	r3, sp, #132	@ 0x84
 800cc74:	a902      	add	r1, sp, #8
 800cc76:	4628      	mov	r0, r5
 800cc78:	9301      	str	r3, [sp, #4]
 800cc7a:	f001 fc0b 	bl	800e494 <_svfiprintf_r>
 800cc7e:	1c43      	adds	r3, r0, #1
 800cc80:	bfbc      	itt	lt
 800cc82:	238b      	movlt	r3, #139	@ 0x8b
 800cc84:	602b      	strlt	r3, [r5, #0]
 800cc86:	2c00      	cmp	r4, #0
 800cc88:	d0dd      	beq.n	800cc46 <sniprintf+0x16>
 800cc8a:	9b02      	ldr	r3, [sp, #8]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	701a      	strb	r2, [r3, #0]
 800cc90:	e7d9      	b.n	800cc46 <sniprintf+0x16>
 800cc92:	bf00      	nop
 800cc94:	20000044 	.word	0x20000044

0800cc98 <__sread>:
 800cc98:	b510      	push	{r4, lr}
 800cc9a:	460c      	mov	r4, r1
 800cc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cca0:	f000 f86c 	bl	800cd7c <_read_r>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	bfab      	itete	ge
 800cca8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ccaa:	89a3      	ldrhlt	r3, [r4, #12]
 800ccac:	181b      	addge	r3, r3, r0
 800ccae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ccb2:	bfac      	ite	ge
 800ccb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ccb6:	81a3      	strhlt	r3, [r4, #12]
 800ccb8:	bd10      	pop	{r4, pc}

0800ccba <__swrite>:
 800ccba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccbe:	461f      	mov	r7, r3
 800ccc0:	898b      	ldrh	r3, [r1, #12]
 800ccc2:	05db      	lsls	r3, r3, #23
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	460c      	mov	r4, r1
 800ccc8:	4616      	mov	r6, r2
 800ccca:	d505      	bpl.n	800ccd8 <__swrite+0x1e>
 800cccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccd0:	2302      	movs	r3, #2
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f000 f840 	bl	800cd58 <_lseek_r>
 800ccd8:	89a3      	ldrh	r3, [r4, #12]
 800ccda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cce2:	81a3      	strh	r3, [r4, #12]
 800cce4:	4632      	mov	r2, r6
 800cce6:	463b      	mov	r3, r7
 800cce8:	4628      	mov	r0, r5
 800ccea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccee:	f000 b857 	b.w	800cda0 <_write_r>

0800ccf2 <__sseek>:
 800ccf2:	b510      	push	{r4, lr}
 800ccf4:	460c      	mov	r4, r1
 800ccf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccfa:	f000 f82d 	bl	800cd58 <_lseek_r>
 800ccfe:	1c43      	adds	r3, r0, #1
 800cd00:	89a3      	ldrh	r3, [r4, #12]
 800cd02:	bf15      	itete	ne
 800cd04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cd06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cd0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cd0e:	81a3      	strheq	r3, [r4, #12]
 800cd10:	bf18      	it	ne
 800cd12:	81a3      	strhne	r3, [r4, #12]
 800cd14:	bd10      	pop	{r4, pc}

0800cd16 <__sclose>:
 800cd16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd1a:	f000 b80d 	b.w	800cd38 <_close_r>

0800cd1e <memset>:
 800cd1e:	4402      	add	r2, r0
 800cd20:	4603      	mov	r3, r0
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d100      	bne.n	800cd28 <memset+0xa>
 800cd26:	4770      	bx	lr
 800cd28:	f803 1b01 	strb.w	r1, [r3], #1
 800cd2c:	e7f9      	b.n	800cd22 <memset+0x4>
	...

0800cd30 <_localeconv_r>:
 800cd30:	4800      	ldr	r0, [pc, #0]	@ (800cd34 <_localeconv_r+0x4>)
 800cd32:	4770      	bx	lr
 800cd34:	20000184 	.word	0x20000184

0800cd38 <_close_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4d06      	ldr	r5, [pc, #24]	@ (800cd54 <_close_r+0x1c>)
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	4604      	mov	r4, r0
 800cd40:	4608      	mov	r0, r1
 800cd42:	602b      	str	r3, [r5, #0]
 800cd44:	f7f6 fb5e 	bl	8003404 <_close>
 800cd48:	1c43      	adds	r3, r0, #1
 800cd4a:	d102      	bne.n	800cd52 <_close_r+0x1a>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	b103      	cbz	r3, 800cd52 <_close_r+0x1a>
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	20000efc 	.word	0x20000efc

0800cd58 <_lseek_r>:
 800cd58:	b538      	push	{r3, r4, r5, lr}
 800cd5a:	4d07      	ldr	r5, [pc, #28]	@ (800cd78 <_lseek_r+0x20>)
 800cd5c:	4604      	mov	r4, r0
 800cd5e:	4608      	mov	r0, r1
 800cd60:	4611      	mov	r1, r2
 800cd62:	2200      	movs	r2, #0
 800cd64:	602a      	str	r2, [r5, #0]
 800cd66:	461a      	mov	r2, r3
 800cd68:	f7f6 fb73 	bl	8003452 <_lseek>
 800cd6c:	1c43      	adds	r3, r0, #1
 800cd6e:	d102      	bne.n	800cd76 <_lseek_r+0x1e>
 800cd70:	682b      	ldr	r3, [r5, #0]
 800cd72:	b103      	cbz	r3, 800cd76 <_lseek_r+0x1e>
 800cd74:	6023      	str	r3, [r4, #0]
 800cd76:	bd38      	pop	{r3, r4, r5, pc}
 800cd78:	20000efc 	.word	0x20000efc

0800cd7c <_read_r>:
 800cd7c:	b538      	push	{r3, r4, r5, lr}
 800cd7e:	4d07      	ldr	r5, [pc, #28]	@ (800cd9c <_read_r+0x20>)
 800cd80:	4604      	mov	r4, r0
 800cd82:	4608      	mov	r0, r1
 800cd84:	4611      	mov	r1, r2
 800cd86:	2200      	movs	r2, #0
 800cd88:	602a      	str	r2, [r5, #0]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	f7f6 fb01 	bl	8003392 <_read>
 800cd90:	1c43      	adds	r3, r0, #1
 800cd92:	d102      	bne.n	800cd9a <_read_r+0x1e>
 800cd94:	682b      	ldr	r3, [r5, #0]
 800cd96:	b103      	cbz	r3, 800cd9a <_read_r+0x1e>
 800cd98:	6023      	str	r3, [r4, #0]
 800cd9a:	bd38      	pop	{r3, r4, r5, pc}
 800cd9c:	20000efc 	.word	0x20000efc

0800cda0 <_write_r>:
 800cda0:	b538      	push	{r3, r4, r5, lr}
 800cda2:	4d07      	ldr	r5, [pc, #28]	@ (800cdc0 <_write_r+0x20>)
 800cda4:	4604      	mov	r4, r0
 800cda6:	4608      	mov	r0, r1
 800cda8:	4611      	mov	r1, r2
 800cdaa:	2200      	movs	r2, #0
 800cdac:	602a      	str	r2, [r5, #0]
 800cdae:	461a      	mov	r2, r3
 800cdb0:	f7f6 fb0c 	bl	80033cc <_write>
 800cdb4:	1c43      	adds	r3, r0, #1
 800cdb6:	d102      	bne.n	800cdbe <_write_r+0x1e>
 800cdb8:	682b      	ldr	r3, [r5, #0]
 800cdba:	b103      	cbz	r3, 800cdbe <_write_r+0x1e>
 800cdbc:	6023      	str	r3, [r4, #0]
 800cdbe:	bd38      	pop	{r3, r4, r5, pc}
 800cdc0:	20000efc 	.word	0x20000efc

0800cdc4 <__errno>:
 800cdc4:	4b01      	ldr	r3, [pc, #4]	@ (800cdcc <__errno+0x8>)
 800cdc6:	6818      	ldr	r0, [r3, #0]
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	20000044 	.word	0x20000044

0800cdd0 <__libc_init_array>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	4d0d      	ldr	r5, [pc, #52]	@ (800ce08 <__libc_init_array+0x38>)
 800cdd4:	4c0d      	ldr	r4, [pc, #52]	@ (800ce0c <__libc_init_array+0x3c>)
 800cdd6:	1b64      	subs	r4, r4, r5
 800cdd8:	10a4      	asrs	r4, r4, #2
 800cdda:	2600      	movs	r6, #0
 800cddc:	42a6      	cmp	r6, r4
 800cdde:	d109      	bne.n	800cdf4 <__libc_init_array+0x24>
 800cde0:	4d0b      	ldr	r5, [pc, #44]	@ (800ce10 <__libc_init_array+0x40>)
 800cde2:	4c0c      	ldr	r4, [pc, #48]	@ (800ce14 <__libc_init_array+0x44>)
 800cde4:	f002 f868 	bl	800eeb8 <_init>
 800cde8:	1b64      	subs	r4, r4, r5
 800cdea:	10a4      	asrs	r4, r4, #2
 800cdec:	2600      	movs	r6, #0
 800cdee:	42a6      	cmp	r6, r4
 800cdf0:	d105      	bne.n	800cdfe <__libc_init_array+0x2e>
 800cdf2:	bd70      	pop	{r4, r5, r6, pc}
 800cdf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdf8:	4798      	blx	r3
 800cdfa:	3601      	adds	r6, #1
 800cdfc:	e7ee      	b.n	800cddc <__libc_init_array+0xc>
 800cdfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce02:	4798      	blx	r3
 800ce04:	3601      	adds	r6, #1
 800ce06:	e7f2      	b.n	800cdee <__libc_init_array+0x1e>
 800ce08:	0800fca8 	.word	0x0800fca8
 800ce0c:	0800fca8 	.word	0x0800fca8
 800ce10:	0800fca8 	.word	0x0800fca8
 800ce14:	0800fcac 	.word	0x0800fcac

0800ce18 <__retarget_lock_init_recursive>:
 800ce18:	4770      	bx	lr

0800ce1a <__retarget_lock_acquire_recursive>:
 800ce1a:	4770      	bx	lr

0800ce1c <__retarget_lock_release_recursive>:
 800ce1c:	4770      	bx	lr

0800ce1e <memcpy>:
 800ce1e:	440a      	add	r2, r1
 800ce20:	4291      	cmp	r1, r2
 800ce22:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce26:	d100      	bne.n	800ce2a <memcpy+0xc>
 800ce28:	4770      	bx	lr
 800ce2a:	b510      	push	{r4, lr}
 800ce2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce34:	4291      	cmp	r1, r2
 800ce36:	d1f9      	bne.n	800ce2c <memcpy+0xe>
 800ce38:	bd10      	pop	{r4, pc}

0800ce3a <quorem>:
 800ce3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce3e:	6903      	ldr	r3, [r0, #16]
 800ce40:	690c      	ldr	r4, [r1, #16]
 800ce42:	42a3      	cmp	r3, r4
 800ce44:	4607      	mov	r7, r0
 800ce46:	db7e      	blt.n	800cf46 <quorem+0x10c>
 800ce48:	3c01      	subs	r4, #1
 800ce4a:	f101 0814 	add.w	r8, r1, #20
 800ce4e:	00a3      	lsls	r3, r4, #2
 800ce50:	f100 0514 	add.w	r5, r0, #20
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce5a:	9301      	str	r3, [sp, #4]
 800ce5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ce60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce64:	3301      	adds	r3, #1
 800ce66:	429a      	cmp	r2, r3
 800ce68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ce6c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ce70:	d32e      	bcc.n	800ced0 <quorem+0x96>
 800ce72:	f04f 0a00 	mov.w	sl, #0
 800ce76:	46c4      	mov	ip, r8
 800ce78:	46ae      	mov	lr, r5
 800ce7a:	46d3      	mov	fp, sl
 800ce7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce80:	b298      	uxth	r0, r3
 800ce82:	fb06 a000 	mla	r0, r6, r0, sl
 800ce86:	0c02      	lsrs	r2, r0, #16
 800ce88:	0c1b      	lsrs	r3, r3, #16
 800ce8a:	fb06 2303 	mla	r3, r6, r3, r2
 800ce8e:	f8de 2000 	ldr.w	r2, [lr]
 800ce92:	b280      	uxth	r0, r0
 800ce94:	b292      	uxth	r2, r2
 800ce96:	1a12      	subs	r2, r2, r0
 800ce98:	445a      	add	r2, fp
 800ce9a:	f8de 0000 	ldr.w	r0, [lr]
 800ce9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cea8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ceac:	b292      	uxth	r2, r2
 800ceae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ceb2:	45e1      	cmp	r9, ip
 800ceb4:	f84e 2b04 	str.w	r2, [lr], #4
 800ceb8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cebc:	d2de      	bcs.n	800ce7c <quorem+0x42>
 800cebe:	9b00      	ldr	r3, [sp, #0]
 800cec0:	58eb      	ldr	r3, [r5, r3]
 800cec2:	b92b      	cbnz	r3, 800ced0 <quorem+0x96>
 800cec4:	9b01      	ldr	r3, [sp, #4]
 800cec6:	3b04      	subs	r3, #4
 800cec8:	429d      	cmp	r5, r3
 800ceca:	461a      	mov	r2, r3
 800cecc:	d32f      	bcc.n	800cf2e <quorem+0xf4>
 800cece:	613c      	str	r4, [r7, #16]
 800ced0:	4638      	mov	r0, r7
 800ced2:	f001 f97b 	bl	800e1cc <__mcmp>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	db25      	blt.n	800cf26 <quorem+0xec>
 800ceda:	4629      	mov	r1, r5
 800cedc:	2000      	movs	r0, #0
 800cede:	f858 2b04 	ldr.w	r2, [r8], #4
 800cee2:	f8d1 c000 	ldr.w	ip, [r1]
 800cee6:	fa1f fe82 	uxth.w	lr, r2
 800ceea:	fa1f f38c 	uxth.w	r3, ip
 800ceee:	eba3 030e 	sub.w	r3, r3, lr
 800cef2:	4403      	add	r3, r0
 800cef4:	0c12      	lsrs	r2, r2, #16
 800cef6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cefa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf04:	45c1      	cmp	r9, r8
 800cf06:	f841 3b04 	str.w	r3, [r1], #4
 800cf0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cf0e:	d2e6      	bcs.n	800cede <quorem+0xa4>
 800cf10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf18:	b922      	cbnz	r2, 800cf24 <quorem+0xea>
 800cf1a:	3b04      	subs	r3, #4
 800cf1c:	429d      	cmp	r5, r3
 800cf1e:	461a      	mov	r2, r3
 800cf20:	d30b      	bcc.n	800cf3a <quorem+0x100>
 800cf22:	613c      	str	r4, [r7, #16]
 800cf24:	3601      	adds	r6, #1
 800cf26:	4630      	mov	r0, r6
 800cf28:	b003      	add	sp, #12
 800cf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2e:	6812      	ldr	r2, [r2, #0]
 800cf30:	3b04      	subs	r3, #4
 800cf32:	2a00      	cmp	r2, #0
 800cf34:	d1cb      	bne.n	800cece <quorem+0x94>
 800cf36:	3c01      	subs	r4, #1
 800cf38:	e7c6      	b.n	800cec8 <quorem+0x8e>
 800cf3a:	6812      	ldr	r2, [r2, #0]
 800cf3c:	3b04      	subs	r3, #4
 800cf3e:	2a00      	cmp	r2, #0
 800cf40:	d1ef      	bne.n	800cf22 <quorem+0xe8>
 800cf42:	3c01      	subs	r4, #1
 800cf44:	e7ea      	b.n	800cf1c <quorem+0xe2>
 800cf46:	2000      	movs	r0, #0
 800cf48:	e7ee      	b.n	800cf28 <quorem+0xee>
 800cf4a:	0000      	movs	r0, r0
 800cf4c:	0000      	movs	r0, r0
	...

0800cf50 <_dtoa_r>:
 800cf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf54:	69c7      	ldr	r7, [r0, #28]
 800cf56:	b099      	sub	sp, #100	@ 0x64
 800cf58:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cf5c:	ec55 4b10 	vmov	r4, r5, d0
 800cf60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cf62:	9109      	str	r1, [sp, #36]	@ 0x24
 800cf64:	4683      	mov	fp, r0
 800cf66:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf68:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf6a:	b97f      	cbnz	r7, 800cf8c <_dtoa_r+0x3c>
 800cf6c:	2010      	movs	r0, #16
 800cf6e:	f000 fdfd 	bl	800db6c <malloc>
 800cf72:	4602      	mov	r2, r0
 800cf74:	f8cb 001c 	str.w	r0, [fp, #28]
 800cf78:	b920      	cbnz	r0, 800cf84 <_dtoa_r+0x34>
 800cf7a:	4ba7      	ldr	r3, [pc, #668]	@ (800d218 <_dtoa_r+0x2c8>)
 800cf7c:	21ef      	movs	r1, #239	@ 0xef
 800cf7e:	48a7      	ldr	r0, [pc, #668]	@ (800d21c <_dtoa_r+0x2cc>)
 800cf80:	f001 fe30 	bl	800ebe4 <__assert_func>
 800cf84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cf88:	6007      	str	r7, [r0, #0]
 800cf8a:	60c7      	str	r7, [r0, #12]
 800cf8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cf90:	6819      	ldr	r1, [r3, #0]
 800cf92:	b159      	cbz	r1, 800cfac <_dtoa_r+0x5c>
 800cf94:	685a      	ldr	r2, [r3, #4]
 800cf96:	604a      	str	r2, [r1, #4]
 800cf98:	2301      	movs	r3, #1
 800cf9a:	4093      	lsls	r3, r2
 800cf9c:	608b      	str	r3, [r1, #8]
 800cf9e:	4658      	mov	r0, fp
 800cfa0:	f000 feda 	bl	800dd58 <_Bfree>
 800cfa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	601a      	str	r2, [r3, #0]
 800cfac:	1e2b      	subs	r3, r5, #0
 800cfae:	bfb9      	ittee	lt
 800cfb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cfb4:	9303      	strlt	r3, [sp, #12]
 800cfb6:	2300      	movge	r3, #0
 800cfb8:	6033      	strge	r3, [r6, #0]
 800cfba:	9f03      	ldr	r7, [sp, #12]
 800cfbc:	4b98      	ldr	r3, [pc, #608]	@ (800d220 <_dtoa_r+0x2d0>)
 800cfbe:	bfbc      	itt	lt
 800cfc0:	2201      	movlt	r2, #1
 800cfc2:	6032      	strlt	r2, [r6, #0]
 800cfc4:	43bb      	bics	r3, r7
 800cfc6:	d112      	bne.n	800cfee <_dtoa_r+0x9e>
 800cfc8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cfca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cfce:	6013      	str	r3, [r2, #0]
 800cfd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cfd4:	4323      	orrs	r3, r4
 800cfd6:	f000 854d 	beq.w	800da74 <_dtoa_r+0xb24>
 800cfda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cfdc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d234 <_dtoa_r+0x2e4>
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f000 854f 	beq.w	800da84 <_dtoa_r+0xb34>
 800cfe6:	f10a 0303 	add.w	r3, sl, #3
 800cfea:	f000 bd49 	b.w	800da80 <_dtoa_r+0xb30>
 800cfee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cff2:	2200      	movs	r2, #0
 800cff4:	ec51 0b17 	vmov	r0, r1, d7
 800cff8:	2300      	movs	r3, #0
 800cffa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cffe:	f7f3 fd3b 	bl	8000a78 <__aeabi_dcmpeq>
 800d002:	4680      	mov	r8, r0
 800d004:	b158      	cbz	r0, 800d01e <_dtoa_r+0xce>
 800d006:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d008:	2301      	movs	r3, #1
 800d00a:	6013      	str	r3, [r2, #0]
 800d00c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d00e:	b113      	cbz	r3, 800d016 <_dtoa_r+0xc6>
 800d010:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d012:	4b84      	ldr	r3, [pc, #528]	@ (800d224 <_dtoa_r+0x2d4>)
 800d014:	6013      	str	r3, [r2, #0]
 800d016:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d238 <_dtoa_r+0x2e8>
 800d01a:	f000 bd33 	b.w	800da84 <_dtoa_r+0xb34>
 800d01e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d022:	aa16      	add	r2, sp, #88	@ 0x58
 800d024:	a917      	add	r1, sp, #92	@ 0x5c
 800d026:	4658      	mov	r0, fp
 800d028:	f001 f980 	bl	800e32c <__d2b>
 800d02c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d030:	4681      	mov	r9, r0
 800d032:	2e00      	cmp	r6, #0
 800d034:	d077      	beq.n	800d126 <_dtoa_r+0x1d6>
 800d036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d038:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d03c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d044:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d048:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d04c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d050:	4619      	mov	r1, r3
 800d052:	2200      	movs	r2, #0
 800d054:	4b74      	ldr	r3, [pc, #464]	@ (800d228 <_dtoa_r+0x2d8>)
 800d056:	f7f3 f8ef 	bl	8000238 <__aeabi_dsub>
 800d05a:	a369      	add	r3, pc, #420	@ (adr r3, 800d200 <_dtoa_r+0x2b0>)
 800d05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d060:	f7f3 faa2 	bl	80005a8 <__aeabi_dmul>
 800d064:	a368      	add	r3, pc, #416	@ (adr r3, 800d208 <_dtoa_r+0x2b8>)
 800d066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06a:	f7f3 f8e7 	bl	800023c <__adddf3>
 800d06e:	4604      	mov	r4, r0
 800d070:	4630      	mov	r0, r6
 800d072:	460d      	mov	r5, r1
 800d074:	f7f3 fa2e 	bl	80004d4 <__aeabi_i2d>
 800d078:	a365      	add	r3, pc, #404	@ (adr r3, 800d210 <_dtoa_r+0x2c0>)
 800d07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07e:	f7f3 fa93 	bl	80005a8 <__aeabi_dmul>
 800d082:	4602      	mov	r2, r0
 800d084:	460b      	mov	r3, r1
 800d086:	4620      	mov	r0, r4
 800d088:	4629      	mov	r1, r5
 800d08a:	f7f3 f8d7 	bl	800023c <__adddf3>
 800d08e:	4604      	mov	r4, r0
 800d090:	460d      	mov	r5, r1
 800d092:	f7f3 fd39 	bl	8000b08 <__aeabi_d2iz>
 800d096:	2200      	movs	r2, #0
 800d098:	4607      	mov	r7, r0
 800d09a:	2300      	movs	r3, #0
 800d09c:	4620      	mov	r0, r4
 800d09e:	4629      	mov	r1, r5
 800d0a0:	f7f3 fcf4 	bl	8000a8c <__aeabi_dcmplt>
 800d0a4:	b140      	cbz	r0, 800d0b8 <_dtoa_r+0x168>
 800d0a6:	4638      	mov	r0, r7
 800d0a8:	f7f3 fa14 	bl	80004d4 <__aeabi_i2d>
 800d0ac:	4622      	mov	r2, r4
 800d0ae:	462b      	mov	r3, r5
 800d0b0:	f7f3 fce2 	bl	8000a78 <__aeabi_dcmpeq>
 800d0b4:	b900      	cbnz	r0, 800d0b8 <_dtoa_r+0x168>
 800d0b6:	3f01      	subs	r7, #1
 800d0b8:	2f16      	cmp	r7, #22
 800d0ba:	d851      	bhi.n	800d160 <_dtoa_r+0x210>
 800d0bc:	4b5b      	ldr	r3, [pc, #364]	@ (800d22c <_dtoa_r+0x2dc>)
 800d0be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d0ca:	f7f3 fcdf 	bl	8000a8c <__aeabi_dcmplt>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d048      	beq.n	800d164 <_dtoa_r+0x214>
 800d0d2:	3f01      	subs	r7, #1
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d0d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d0da:	1b9b      	subs	r3, r3, r6
 800d0dc:	1e5a      	subs	r2, r3, #1
 800d0de:	bf44      	itt	mi
 800d0e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800d0e4:	2300      	movmi	r3, #0
 800d0e6:	9208      	str	r2, [sp, #32]
 800d0e8:	bf54      	ite	pl
 800d0ea:	f04f 0800 	movpl.w	r8, #0
 800d0ee:	9308      	strmi	r3, [sp, #32]
 800d0f0:	2f00      	cmp	r7, #0
 800d0f2:	db39      	blt.n	800d168 <_dtoa_r+0x218>
 800d0f4:	9b08      	ldr	r3, [sp, #32]
 800d0f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d0f8:	443b      	add	r3, r7
 800d0fa:	9308      	str	r3, [sp, #32]
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800d100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d102:	2b09      	cmp	r3, #9
 800d104:	d864      	bhi.n	800d1d0 <_dtoa_r+0x280>
 800d106:	2b05      	cmp	r3, #5
 800d108:	bfc4      	itt	gt
 800d10a:	3b04      	subgt	r3, #4
 800d10c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d110:	f1a3 0302 	sub.w	r3, r3, #2
 800d114:	bfcc      	ite	gt
 800d116:	2400      	movgt	r4, #0
 800d118:	2401      	movle	r4, #1
 800d11a:	2b03      	cmp	r3, #3
 800d11c:	d863      	bhi.n	800d1e6 <_dtoa_r+0x296>
 800d11e:	e8df f003 	tbb	[pc, r3]
 800d122:	372a      	.short	0x372a
 800d124:	5535      	.short	0x5535
 800d126:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d12a:	441e      	add	r6, r3
 800d12c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d130:	2b20      	cmp	r3, #32
 800d132:	bfc1      	itttt	gt
 800d134:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d138:	409f      	lslgt	r7, r3
 800d13a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d13e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d142:	bfd6      	itet	le
 800d144:	f1c3 0320 	rsble	r3, r3, #32
 800d148:	ea47 0003 	orrgt.w	r0, r7, r3
 800d14c:	fa04 f003 	lslle.w	r0, r4, r3
 800d150:	f7f3 f9b0 	bl	80004b4 <__aeabi_ui2d>
 800d154:	2201      	movs	r2, #1
 800d156:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d15a:	3e01      	subs	r6, #1
 800d15c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d15e:	e777      	b.n	800d050 <_dtoa_r+0x100>
 800d160:	2301      	movs	r3, #1
 800d162:	e7b8      	b.n	800d0d6 <_dtoa_r+0x186>
 800d164:	9012      	str	r0, [sp, #72]	@ 0x48
 800d166:	e7b7      	b.n	800d0d8 <_dtoa_r+0x188>
 800d168:	427b      	negs	r3, r7
 800d16a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d16c:	2300      	movs	r3, #0
 800d16e:	eba8 0807 	sub.w	r8, r8, r7
 800d172:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d174:	e7c4      	b.n	800d100 <_dtoa_r+0x1b0>
 800d176:	2300      	movs	r3, #0
 800d178:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d17a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	dc35      	bgt.n	800d1ec <_dtoa_r+0x29c>
 800d180:	2301      	movs	r3, #1
 800d182:	9300      	str	r3, [sp, #0]
 800d184:	9307      	str	r3, [sp, #28]
 800d186:	461a      	mov	r2, r3
 800d188:	920e      	str	r2, [sp, #56]	@ 0x38
 800d18a:	e00b      	b.n	800d1a4 <_dtoa_r+0x254>
 800d18c:	2301      	movs	r3, #1
 800d18e:	e7f3      	b.n	800d178 <_dtoa_r+0x228>
 800d190:	2300      	movs	r3, #0
 800d192:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d194:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d196:	18fb      	adds	r3, r7, r3
 800d198:	9300      	str	r3, [sp, #0]
 800d19a:	3301      	adds	r3, #1
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	9307      	str	r3, [sp, #28]
 800d1a0:	bfb8      	it	lt
 800d1a2:	2301      	movlt	r3, #1
 800d1a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	2204      	movs	r2, #4
 800d1ac:	f102 0514 	add.w	r5, r2, #20
 800d1b0:	429d      	cmp	r5, r3
 800d1b2:	d91f      	bls.n	800d1f4 <_dtoa_r+0x2a4>
 800d1b4:	6041      	str	r1, [r0, #4]
 800d1b6:	4658      	mov	r0, fp
 800d1b8:	f000 fd8e 	bl	800dcd8 <_Balloc>
 800d1bc:	4682      	mov	sl, r0
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	d13c      	bne.n	800d23c <_dtoa_r+0x2ec>
 800d1c2:	4b1b      	ldr	r3, [pc, #108]	@ (800d230 <_dtoa_r+0x2e0>)
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d1ca:	e6d8      	b.n	800cf7e <_dtoa_r+0x2e>
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e7e0      	b.n	800d192 <_dtoa_r+0x242>
 800d1d0:	2401      	movs	r4, #1
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1dc:	9300      	str	r3, [sp, #0]
 800d1de:	9307      	str	r3, [sp, #28]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	2312      	movs	r3, #18
 800d1e4:	e7d0      	b.n	800d188 <_dtoa_r+0x238>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1ea:	e7f5      	b.n	800d1d8 <_dtoa_r+0x288>
 800d1ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1ee:	9300      	str	r3, [sp, #0]
 800d1f0:	9307      	str	r3, [sp, #28]
 800d1f2:	e7d7      	b.n	800d1a4 <_dtoa_r+0x254>
 800d1f4:	3101      	adds	r1, #1
 800d1f6:	0052      	lsls	r2, r2, #1
 800d1f8:	e7d8      	b.n	800d1ac <_dtoa_r+0x25c>
 800d1fa:	bf00      	nop
 800d1fc:	f3af 8000 	nop.w
 800d200:	636f4361 	.word	0x636f4361
 800d204:	3fd287a7 	.word	0x3fd287a7
 800d208:	8b60c8b3 	.word	0x8b60c8b3
 800d20c:	3fc68a28 	.word	0x3fc68a28
 800d210:	509f79fb 	.word	0x509f79fb
 800d214:	3fd34413 	.word	0x3fd34413
 800d218:	0800f96d 	.word	0x0800f96d
 800d21c:	0800f984 	.word	0x0800f984
 800d220:	7ff00000 	.word	0x7ff00000
 800d224:	0800f93d 	.word	0x0800f93d
 800d228:	3ff80000 	.word	0x3ff80000
 800d22c:	0800fa80 	.word	0x0800fa80
 800d230:	0800f9dc 	.word	0x0800f9dc
 800d234:	0800f969 	.word	0x0800f969
 800d238:	0800f93c 	.word	0x0800f93c
 800d23c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d240:	6018      	str	r0, [r3, #0]
 800d242:	9b07      	ldr	r3, [sp, #28]
 800d244:	2b0e      	cmp	r3, #14
 800d246:	f200 80a4 	bhi.w	800d392 <_dtoa_r+0x442>
 800d24a:	2c00      	cmp	r4, #0
 800d24c:	f000 80a1 	beq.w	800d392 <_dtoa_r+0x442>
 800d250:	2f00      	cmp	r7, #0
 800d252:	dd33      	ble.n	800d2bc <_dtoa_r+0x36c>
 800d254:	4bad      	ldr	r3, [pc, #692]	@ (800d50c <_dtoa_r+0x5bc>)
 800d256:	f007 020f 	and.w	r2, r7, #15
 800d25a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d25e:	ed93 7b00 	vldr	d7, [r3]
 800d262:	05f8      	lsls	r0, r7, #23
 800d264:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d268:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d26c:	d516      	bpl.n	800d29c <_dtoa_r+0x34c>
 800d26e:	4ba8      	ldr	r3, [pc, #672]	@ (800d510 <_dtoa_r+0x5c0>)
 800d270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d274:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d278:	f7f3 fac0 	bl	80007fc <__aeabi_ddiv>
 800d27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d280:	f004 040f 	and.w	r4, r4, #15
 800d284:	2603      	movs	r6, #3
 800d286:	4da2      	ldr	r5, [pc, #648]	@ (800d510 <_dtoa_r+0x5c0>)
 800d288:	b954      	cbnz	r4, 800d2a0 <_dtoa_r+0x350>
 800d28a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d28e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d292:	f7f3 fab3 	bl	80007fc <__aeabi_ddiv>
 800d296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d29a:	e028      	b.n	800d2ee <_dtoa_r+0x39e>
 800d29c:	2602      	movs	r6, #2
 800d29e:	e7f2      	b.n	800d286 <_dtoa_r+0x336>
 800d2a0:	07e1      	lsls	r1, r4, #31
 800d2a2:	d508      	bpl.n	800d2b6 <_dtoa_r+0x366>
 800d2a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d2ac:	f7f3 f97c 	bl	80005a8 <__aeabi_dmul>
 800d2b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2b4:	3601      	adds	r6, #1
 800d2b6:	1064      	asrs	r4, r4, #1
 800d2b8:	3508      	adds	r5, #8
 800d2ba:	e7e5      	b.n	800d288 <_dtoa_r+0x338>
 800d2bc:	f000 80d2 	beq.w	800d464 <_dtoa_r+0x514>
 800d2c0:	427c      	negs	r4, r7
 800d2c2:	4b92      	ldr	r3, [pc, #584]	@ (800d50c <_dtoa_r+0x5bc>)
 800d2c4:	4d92      	ldr	r5, [pc, #584]	@ (800d510 <_dtoa_r+0x5c0>)
 800d2c6:	f004 020f 	and.w	r2, r4, #15
 800d2ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2d6:	f7f3 f967 	bl	80005a8 <__aeabi_dmul>
 800d2da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2de:	1124      	asrs	r4, r4, #4
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	2602      	movs	r6, #2
 800d2e4:	2c00      	cmp	r4, #0
 800d2e6:	f040 80b2 	bne.w	800d44e <_dtoa_r+0x4fe>
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1d3      	bne.n	800d296 <_dtoa_r+0x346>
 800d2ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d2f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f000 80b7 	beq.w	800d468 <_dtoa_r+0x518>
 800d2fa:	4b86      	ldr	r3, [pc, #536]	@ (800d514 <_dtoa_r+0x5c4>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	4620      	mov	r0, r4
 800d300:	4629      	mov	r1, r5
 800d302:	f7f3 fbc3 	bl	8000a8c <__aeabi_dcmplt>
 800d306:	2800      	cmp	r0, #0
 800d308:	f000 80ae 	beq.w	800d468 <_dtoa_r+0x518>
 800d30c:	9b07      	ldr	r3, [sp, #28]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f000 80aa 	beq.w	800d468 <_dtoa_r+0x518>
 800d314:	9b00      	ldr	r3, [sp, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	dd37      	ble.n	800d38a <_dtoa_r+0x43a>
 800d31a:	1e7b      	subs	r3, r7, #1
 800d31c:	9304      	str	r3, [sp, #16]
 800d31e:	4620      	mov	r0, r4
 800d320:	4b7d      	ldr	r3, [pc, #500]	@ (800d518 <_dtoa_r+0x5c8>)
 800d322:	2200      	movs	r2, #0
 800d324:	4629      	mov	r1, r5
 800d326:	f7f3 f93f 	bl	80005a8 <__aeabi_dmul>
 800d32a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d32e:	9c00      	ldr	r4, [sp, #0]
 800d330:	3601      	adds	r6, #1
 800d332:	4630      	mov	r0, r6
 800d334:	f7f3 f8ce 	bl	80004d4 <__aeabi_i2d>
 800d338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d33c:	f7f3 f934 	bl	80005a8 <__aeabi_dmul>
 800d340:	4b76      	ldr	r3, [pc, #472]	@ (800d51c <_dtoa_r+0x5cc>)
 800d342:	2200      	movs	r2, #0
 800d344:	f7f2 ff7a 	bl	800023c <__adddf3>
 800d348:	4605      	mov	r5, r0
 800d34a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d34e:	2c00      	cmp	r4, #0
 800d350:	f040 808d 	bne.w	800d46e <_dtoa_r+0x51e>
 800d354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d358:	4b71      	ldr	r3, [pc, #452]	@ (800d520 <_dtoa_r+0x5d0>)
 800d35a:	2200      	movs	r2, #0
 800d35c:	f7f2 ff6c 	bl	8000238 <__aeabi_dsub>
 800d360:	4602      	mov	r2, r0
 800d362:	460b      	mov	r3, r1
 800d364:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d368:	462a      	mov	r2, r5
 800d36a:	4633      	mov	r3, r6
 800d36c:	f7f3 fbac 	bl	8000ac8 <__aeabi_dcmpgt>
 800d370:	2800      	cmp	r0, #0
 800d372:	f040 828b 	bne.w	800d88c <_dtoa_r+0x93c>
 800d376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d37a:	462a      	mov	r2, r5
 800d37c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d380:	f7f3 fb84 	bl	8000a8c <__aeabi_dcmplt>
 800d384:	2800      	cmp	r0, #0
 800d386:	f040 8128 	bne.w	800d5da <_dtoa_r+0x68a>
 800d38a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d38e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d392:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d394:	2b00      	cmp	r3, #0
 800d396:	f2c0 815a 	blt.w	800d64e <_dtoa_r+0x6fe>
 800d39a:	2f0e      	cmp	r7, #14
 800d39c:	f300 8157 	bgt.w	800d64e <_dtoa_r+0x6fe>
 800d3a0:	4b5a      	ldr	r3, [pc, #360]	@ (800d50c <_dtoa_r+0x5bc>)
 800d3a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d3a6:	ed93 7b00 	vldr	d7, [r3]
 800d3aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	ed8d 7b00 	vstr	d7, [sp]
 800d3b2:	da03      	bge.n	800d3bc <_dtoa_r+0x46c>
 800d3b4:	9b07      	ldr	r3, [sp, #28]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	f340 8101 	ble.w	800d5be <_dtoa_r+0x66e>
 800d3bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d3c0:	4656      	mov	r6, sl
 800d3c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	4629      	mov	r1, r5
 800d3ca:	f7f3 fa17 	bl	80007fc <__aeabi_ddiv>
 800d3ce:	f7f3 fb9b 	bl	8000b08 <__aeabi_d2iz>
 800d3d2:	4680      	mov	r8, r0
 800d3d4:	f7f3 f87e 	bl	80004d4 <__aeabi_i2d>
 800d3d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3dc:	f7f3 f8e4 	bl	80005a8 <__aeabi_dmul>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d3ec:	f7f2 ff24 	bl	8000238 <__aeabi_dsub>
 800d3f0:	f806 4b01 	strb.w	r4, [r6], #1
 800d3f4:	9d07      	ldr	r5, [sp, #28]
 800d3f6:	eba6 040a 	sub.w	r4, r6, sl
 800d3fa:	42a5      	cmp	r5, r4
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	460b      	mov	r3, r1
 800d400:	f040 8117 	bne.w	800d632 <_dtoa_r+0x6e2>
 800d404:	f7f2 ff1a 	bl	800023c <__adddf3>
 800d408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d40c:	4604      	mov	r4, r0
 800d40e:	460d      	mov	r5, r1
 800d410:	f7f3 fb5a 	bl	8000ac8 <__aeabi_dcmpgt>
 800d414:	2800      	cmp	r0, #0
 800d416:	f040 80f9 	bne.w	800d60c <_dtoa_r+0x6bc>
 800d41a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d41e:	4620      	mov	r0, r4
 800d420:	4629      	mov	r1, r5
 800d422:	f7f3 fb29 	bl	8000a78 <__aeabi_dcmpeq>
 800d426:	b118      	cbz	r0, 800d430 <_dtoa_r+0x4e0>
 800d428:	f018 0f01 	tst.w	r8, #1
 800d42c:	f040 80ee 	bne.w	800d60c <_dtoa_r+0x6bc>
 800d430:	4649      	mov	r1, r9
 800d432:	4658      	mov	r0, fp
 800d434:	f000 fc90 	bl	800dd58 <_Bfree>
 800d438:	2300      	movs	r3, #0
 800d43a:	7033      	strb	r3, [r6, #0]
 800d43c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d43e:	3701      	adds	r7, #1
 800d440:	601f      	str	r7, [r3, #0]
 800d442:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d444:	2b00      	cmp	r3, #0
 800d446:	f000 831d 	beq.w	800da84 <_dtoa_r+0xb34>
 800d44a:	601e      	str	r6, [r3, #0]
 800d44c:	e31a      	b.n	800da84 <_dtoa_r+0xb34>
 800d44e:	07e2      	lsls	r2, r4, #31
 800d450:	d505      	bpl.n	800d45e <_dtoa_r+0x50e>
 800d452:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d456:	f7f3 f8a7 	bl	80005a8 <__aeabi_dmul>
 800d45a:	3601      	adds	r6, #1
 800d45c:	2301      	movs	r3, #1
 800d45e:	1064      	asrs	r4, r4, #1
 800d460:	3508      	adds	r5, #8
 800d462:	e73f      	b.n	800d2e4 <_dtoa_r+0x394>
 800d464:	2602      	movs	r6, #2
 800d466:	e742      	b.n	800d2ee <_dtoa_r+0x39e>
 800d468:	9c07      	ldr	r4, [sp, #28]
 800d46a:	9704      	str	r7, [sp, #16]
 800d46c:	e761      	b.n	800d332 <_dtoa_r+0x3e2>
 800d46e:	4b27      	ldr	r3, [pc, #156]	@ (800d50c <_dtoa_r+0x5bc>)
 800d470:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d472:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d476:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d47a:	4454      	add	r4, sl
 800d47c:	2900      	cmp	r1, #0
 800d47e:	d053      	beq.n	800d528 <_dtoa_r+0x5d8>
 800d480:	4928      	ldr	r1, [pc, #160]	@ (800d524 <_dtoa_r+0x5d4>)
 800d482:	2000      	movs	r0, #0
 800d484:	f7f3 f9ba 	bl	80007fc <__aeabi_ddiv>
 800d488:	4633      	mov	r3, r6
 800d48a:	462a      	mov	r2, r5
 800d48c:	f7f2 fed4 	bl	8000238 <__aeabi_dsub>
 800d490:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d494:	4656      	mov	r6, sl
 800d496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d49a:	f7f3 fb35 	bl	8000b08 <__aeabi_d2iz>
 800d49e:	4605      	mov	r5, r0
 800d4a0:	f7f3 f818 	bl	80004d4 <__aeabi_i2d>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4ac:	f7f2 fec4 	bl	8000238 <__aeabi_dsub>
 800d4b0:	3530      	adds	r5, #48	@ 0x30
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d4ba:	f806 5b01 	strb.w	r5, [r6], #1
 800d4be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d4c2:	f7f3 fae3 	bl	8000a8c <__aeabi_dcmplt>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	d171      	bne.n	800d5ae <_dtoa_r+0x65e>
 800d4ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4ce:	4911      	ldr	r1, [pc, #68]	@ (800d514 <_dtoa_r+0x5c4>)
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	f7f2 feb1 	bl	8000238 <__aeabi_dsub>
 800d4d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d4da:	f7f3 fad7 	bl	8000a8c <__aeabi_dcmplt>
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	f040 8095 	bne.w	800d60e <_dtoa_r+0x6be>
 800d4e4:	42a6      	cmp	r6, r4
 800d4e6:	f43f af50 	beq.w	800d38a <_dtoa_r+0x43a>
 800d4ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d4ee:	4b0a      	ldr	r3, [pc, #40]	@ (800d518 <_dtoa_r+0x5c8>)
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f7f3 f859 	bl	80005a8 <__aeabi_dmul>
 800d4f6:	4b08      	ldr	r3, [pc, #32]	@ (800d518 <_dtoa_r+0x5c8>)
 800d4f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d502:	f7f3 f851 	bl	80005a8 <__aeabi_dmul>
 800d506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d50a:	e7c4      	b.n	800d496 <_dtoa_r+0x546>
 800d50c:	0800fa80 	.word	0x0800fa80
 800d510:	0800fa58 	.word	0x0800fa58
 800d514:	3ff00000 	.word	0x3ff00000
 800d518:	40240000 	.word	0x40240000
 800d51c:	401c0000 	.word	0x401c0000
 800d520:	40140000 	.word	0x40140000
 800d524:	3fe00000 	.word	0x3fe00000
 800d528:	4631      	mov	r1, r6
 800d52a:	4628      	mov	r0, r5
 800d52c:	f7f3 f83c 	bl	80005a8 <__aeabi_dmul>
 800d530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d534:	9415      	str	r4, [sp, #84]	@ 0x54
 800d536:	4656      	mov	r6, sl
 800d538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d53c:	f7f3 fae4 	bl	8000b08 <__aeabi_d2iz>
 800d540:	4605      	mov	r5, r0
 800d542:	f7f2 ffc7 	bl	80004d4 <__aeabi_i2d>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d54e:	f7f2 fe73 	bl	8000238 <__aeabi_dsub>
 800d552:	3530      	adds	r5, #48	@ 0x30
 800d554:	f806 5b01 	strb.w	r5, [r6], #1
 800d558:	4602      	mov	r2, r0
 800d55a:	460b      	mov	r3, r1
 800d55c:	42a6      	cmp	r6, r4
 800d55e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d562:	f04f 0200 	mov.w	r2, #0
 800d566:	d124      	bne.n	800d5b2 <_dtoa_r+0x662>
 800d568:	4bac      	ldr	r3, [pc, #688]	@ (800d81c <_dtoa_r+0x8cc>)
 800d56a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d56e:	f7f2 fe65 	bl	800023c <__adddf3>
 800d572:	4602      	mov	r2, r0
 800d574:	460b      	mov	r3, r1
 800d576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d57a:	f7f3 faa5 	bl	8000ac8 <__aeabi_dcmpgt>
 800d57e:	2800      	cmp	r0, #0
 800d580:	d145      	bne.n	800d60e <_dtoa_r+0x6be>
 800d582:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d586:	49a5      	ldr	r1, [pc, #660]	@ (800d81c <_dtoa_r+0x8cc>)
 800d588:	2000      	movs	r0, #0
 800d58a:	f7f2 fe55 	bl	8000238 <__aeabi_dsub>
 800d58e:	4602      	mov	r2, r0
 800d590:	460b      	mov	r3, r1
 800d592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d596:	f7f3 fa79 	bl	8000a8c <__aeabi_dcmplt>
 800d59a:	2800      	cmp	r0, #0
 800d59c:	f43f aef5 	beq.w	800d38a <_dtoa_r+0x43a>
 800d5a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d5a2:	1e73      	subs	r3, r6, #1
 800d5a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d5a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d5aa:	2b30      	cmp	r3, #48	@ 0x30
 800d5ac:	d0f8      	beq.n	800d5a0 <_dtoa_r+0x650>
 800d5ae:	9f04      	ldr	r7, [sp, #16]
 800d5b0:	e73e      	b.n	800d430 <_dtoa_r+0x4e0>
 800d5b2:	4b9b      	ldr	r3, [pc, #620]	@ (800d820 <_dtoa_r+0x8d0>)
 800d5b4:	f7f2 fff8 	bl	80005a8 <__aeabi_dmul>
 800d5b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5bc:	e7bc      	b.n	800d538 <_dtoa_r+0x5e8>
 800d5be:	d10c      	bne.n	800d5da <_dtoa_r+0x68a>
 800d5c0:	4b98      	ldr	r3, [pc, #608]	@ (800d824 <_dtoa_r+0x8d4>)
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5c8:	f7f2 ffee 	bl	80005a8 <__aeabi_dmul>
 800d5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5d0:	f7f3 fa70 	bl	8000ab4 <__aeabi_dcmpge>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	f000 8157 	beq.w	800d888 <_dtoa_r+0x938>
 800d5da:	2400      	movs	r4, #0
 800d5dc:	4625      	mov	r5, r4
 800d5de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5e0:	43db      	mvns	r3, r3
 800d5e2:	9304      	str	r3, [sp, #16]
 800d5e4:	4656      	mov	r6, sl
 800d5e6:	2700      	movs	r7, #0
 800d5e8:	4621      	mov	r1, r4
 800d5ea:	4658      	mov	r0, fp
 800d5ec:	f000 fbb4 	bl	800dd58 <_Bfree>
 800d5f0:	2d00      	cmp	r5, #0
 800d5f2:	d0dc      	beq.n	800d5ae <_dtoa_r+0x65e>
 800d5f4:	b12f      	cbz	r7, 800d602 <_dtoa_r+0x6b2>
 800d5f6:	42af      	cmp	r7, r5
 800d5f8:	d003      	beq.n	800d602 <_dtoa_r+0x6b2>
 800d5fa:	4639      	mov	r1, r7
 800d5fc:	4658      	mov	r0, fp
 800d5fe:	f000 fbab 	bl	800dd58 <_Bfree>
 800d602:	4629      	mov	r1, r5
 800d604:	4658      	mov	r0, fp
 800d606:	f000 fba7 	bl	800dd58 <_Bfree>
 800d60a:	e7d0      	b.n	800d5ae <_dtoa_r+0x65e>
 800d60c:	9704      	str	r7, [sp, #16]
 800d60e:	4633      	mov	r3, r6
 800d610:	461e      	mov	r6, r3
 800d612:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d616:	2a39      	cmp	r2, #57	@ 0x39
 800d618:	d107      	bne.n	800d62a <_dtoa_r+0x6da>
 800d61a:	459a      	cmp	sl, r3
 800d61c:	d1f8      	bne.n	800d610 <_dtoa_r+0x6c0>
 800d61e:	9a04      	ldr	r2, [sp, #16]
 800d620:	3201      	adds	r2, #1
 800d622:	9204      	str	r2, [sp, #16]
 800d624:	2230      	movs	r2, #48	@ 0x30
 800d626:	f88a 2000 	strb.w	r2, [sl]
 800d62a:	781a      	ldrb	r2, [r3, #0]
 800d62c:	3201      	adds	r2, #1
 800d62e:	701a      	strb	r2, [r3, #0]
 800d630:	e7bd      	b.n	800d5ae <_dtoa_r+0x65e>
 800d632:	4b7b      	ldr	r3, [pc, #492]	@ (800d820 <_dtoa_r+0x8d0>)
 800d634:	2200      	movs	r2, #0
 800d636:	f7f2 ffb7 	bl	80005a8 <__aeabi_dmul>
 800d63a:	2200      	movs	r2, #0
 800d63c:	2300      	movs	r3, #0
 800d63e:	4604      	mov	r4, r0
 800d640:	460d      	mov	r5, r1
 800d642:	f7f3 fa19 	bl	8000a78 <__aeabi_dcmpeq>
 800d646:	2800      	cmp	r0, #0
 800d648:	f43f aebb 	beq.w	800d3c2 <_dtoa_r+0x472>
 800d64c:	e6f0      	b.n	800d430 <_dtoa_r+0x4e0>
 800d64e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d650:	2a00      	cmp	r2, #0
 800d652:	f000 80db 	beq.w	800d80c <_dtoa_r+0x8bc>
 800d656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d658:	2a01      	cmp	r2, #1
 800d65a:	f300 80bf 	bgt.w	800d7dc <_dtoa_r+0x88c>
 800d65e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d660:	2a00      	cmp	r2, #0
 800d662:	f000 80b7 	beq.w	800d7d4 <_dtoa_r+0x884>
 800d666:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d66a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d66c:	4646      	mov	r6, r8
 800d66e:	9a08      	ldr	r2, [sp, #32]
 800d670:	2101      	movs	r1, #1
 800d672:	441a      	add	r2, r3
 800d674:	4658      	mov	r0, fp
 800d676:	4498      	add	r8, r3
 800d678:	9208      	str	r2, [sp, #32]
 800d67a:	f000 fc21 	bl	800dec0 <__i2b>
 800d67e:	4605      	mov	r5, r0
 800d680:	b15e      	cbz	r6, 800d69a <_dtoa_r+0x74a>
 800d682:	9b08      	ldr	r3, [sp, #32]
 800d684:	2b00      	cmp	r3, #0
 800d686:	dd08      	ble.n	800d69a <_dtoa_r+0x74a>
 800d688:	42b3      	cmp	r3, r6
 800d68a:	9a08      	ldr	r2, [sp, #32]
 800d68c:	bfa8      	it	ge
 800d68e:	4633      	movge	r3, r6
 800d690:	eba8 0803 	sub.w	r8, r8, r3
 800d694:	1af6      	subs	r6, r6, r3
 800d696:	1ad3      	subs	r3, r2, r3
 800d698:	9308      	str	r3, [sp, #32]
 800d69a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d69c:	b1f3      	cbz	r3, 800d6dc <_dtoa_r+0x78c>
 800d69e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f000 80b7 	beq.w	800d814 <_dtoa_r+0x8c4>
 800d6a6:	b18c      	cbz	r4, 800d6cc <_dtoa_r+0x77c>
 800d6a8:	4629      	mov	r1, r5
 800d6aa:	4622      	mov	r2, r4
 800d6ac:	4658      	mov	r0, fp
 800d6ae:	f000 fcc7 	bl	800e040 <__pow5mult>
 800d6b2:	464a      	mov	r2, r9
 800d6b4:	4601      	mov	r1, r0
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	4658      	mov	r0, fp
 800d6ba:	f000 fc17 	bl	800deec <__multiply>
 800d6be:	4649      	mov	r1, r9
 800d6c0:	9004      	str	r0, [sp, #16]
 800d6c2:	4658      	mov	r0, fp
 800d6c4:	f000 fb48 	bl	800dd58 <_Bfree>
 800d6c8:	9b04      	ldr	r3, [sp, #16]
 800d6ca:	4699      	mov	r9, r3
 800d6cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6ce:	1b1a      	subs	r2, r3, r4
 800d6d0:	d004      	beq.n	800d6dc <_dtoa_r+0x78c>
 800d6d2:	4649      	mov	r1, r9
 800d6d4:	4658      	mov	r0, fp
 800d6d6:	f000 fcb3 	bl	800e040 <__pow5mult>
 800d6da:	4681      	mov	r9, r0
 800d6dc:	2101      	movs	r1, #1
 800d6de:	4658      	mov	r0, fp
 800d6e0:	f000 fbee 	bl	800dec0 <__i2b>
 800d6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 81cf 	beq.w	800da8c <_dtoa_r+0xb3c>
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	4601      	mov	r1, r0
 800d6f2:	4658      	mov	r0, fp
 800d6f4:	f000 fca4 	bl	800e040 <__pow5mult>
 800d6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	4604      	mov	r4, r0
 800d6fe:	f300 8095 	bgt.w	800d82c <_dtoa_r+0x8dc>
 800d702:	9b02      	ldr	r3, [sp, #8]
 800d704:	2b00      	cmp	r3, #0
 800d706:	f040 8087 	bne.w	800d818 <_dtoa_r+0x8c8>
 800d70a:	9b03      	ldr	r3, [sp, #12]
 800d70c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d710:	2b00      	cmp	r3, #0
 800d712:	f040 8089 	bne.w	800d828 <_dtoa_r+0x8d8>
 800d716:	9b03      	ldr	r3, [sp, #12]
 800d718:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d71c:	0d1b      	lsrs	r3, r3, #20
 800d71e:	051b      	lsls	r3, r3, #20
 800d720:	b12b      	cbz	r3, 800d72e <_dtoa_r+0x7de>
 800d722:	9b08      	ldr	r3, [sp, #32]
 800d724:	3301      	adds	r3, #1
 800d726:	9308      	str	r3, [sp, #32]
 800d728:	f108 0801 	add.w	r8, r8, #1
 800d72c:	2301      	movs	r3, #1
 800d72e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d732:	2b00      	cmp	r3, #0
 800d734:	f000 81b0 	beq.w	800da98 <_dtoa_r+0xb48>
 800d738:	6923      	ldr	r3, [r4, #16]
 800d73a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d73e:	6918      	ldr	r0, [r3, #16]
 800d740:	f000 fb72 	bl	800de28 <__hi0bits>
 800d744:	f1c0 0020 	rsb	r0, r0, #32
 800d748:	9b08      	ldr	r3, [sp, #32]
 800d74a:	4418      	add	r0, r3
 800d74c:	f010 001f 	ands.w	r0, r0, #31
 800d750:	d077      	beq.n	800d842 <_dtoa_r+0x8f2>
 800d752:	f1c0 0320 	rsb	r3, r0, #32
 800d756:	2b04      	cmp	r3, #4
 800d758:	dd6b      	ble.n	800d832 <_dtoa_r+0x8e2>
 800d75a:	9b08      	ldr	r3, [sp, #32]
 800d75c:	f1c0 001c 	rsb	r0, r0, #28
 800d760:	4403      	add	r3, r0
 800d762:	4480      	add	r8, r0
 800d764:	4406      	add	r6, r0
 800d766:	9308      	str	r3, [sp, #32]
 800d768:	f1b8 0f00 	cmp.w	r8, #0
 800d76c:	dd05      	ble.n	800d77a <_dtoa_r+0x82a>
 800d76e:	4649      	mov	r1, r9
 800d770:	4642      	mov	r2, r8
 800d772:	4658      	mov	r0, fp
 800d774:	f000 fcbe 	bl	800e0f4 <__lshift>
 800d778:	4681      	mov	r9, r0
 800d77a:	9b08      	ldr	r3, [sp, #32]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	dd05      	ble.n	800d78c <_dtoa_r+0x83c>
 800d780:	4621      	mov	r1, r4
 800d782:	461a      	mov	r2, r3
 800d784:	4658      	mov	r0, fp
 800d786:	f000 fcb5 	bl	800e0f4 <__lshift>
 800d78a:	4604      	mov	r4, r0
 800d78c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d059      	beq.n	800d846 <_dtoa_r+0x8f6>
 800d792:	4621      	mov	r1, r4
 800d794:	4648      	mov	r0, r9
 800d796:	f000 fd19 	bl	800e1cc <__mcmp>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	da53      	bge.n	800d846 <_dtoa_r+0x8f6>
 800d79e:	1e7b      	subs	r3, r7, #1
 800d7a0:	9304      	str	r3, [sp, #16]
 800d7a2:	4649      	mov	r1, r9
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	220a      	movs	r2, #10
 800d7a8:	4658      	mov	r0, fp
 800d7aa:	f000 faf7 	bl	800dd9c <__multadd>
 800d7ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7b0:	4681      	mov	r9, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	f000 8172 	beq.w	800da9c <_dtoa_r+0xb4c>
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	220a      	movs	r2, #10
 800d7be:	4658      	mov	r0, fp
 800d7c0:	f000 faec 	bl	800dd9c <__multadd>
 800d7c4:	9b00      	ldr	r3, [sp, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	4605      	mov	r5, r0
 800d7ca:	dc67      	bgt.n	800d89c <_dtoa_r+0x94c>
 800d7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	dc41      	bgt.n	800d856 <_dtoa_r+0x906>
 800d7d2:	e063      	b.n	800d89c <_dtoa_r+0x94c>
 800d7d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d7d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d7da:	e746      	b.n	800d66a <_dtoa_r+0x71a>
 800d7dc:	9b07      	ldr	r3, [sp, #28]
 800d7de:	1e5c      	subs	r4, r3, #1
 800d7e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7e2:	42a3      	cmp	r3, r4
 800d7e4:	bfbf      	itttt	lt
 800d7e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d7e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d7ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d7ec:	1ae3      	sublt	r3, r4, r3
 800d7ee:	bfb4      	ite	lt
 800d7f0:	18d2      	addlt	r2, r2, r3
 800d7f2:	1b1c      	subge	r4, r3, r4
 800d7f4:	9b07      	ldr	r3, [sp, #28]
 800d7f6:	bfbc      	itt	lt
 800d7f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d7fa:	2400      	movlt	r4, #0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	bfb5      	itete	lt
 800d800:	eba8 0603 	sublt.w	r6, r8, r3
 800d804:	9b07      	ldrge	r3, [sp, #28]
 800d806:	2300      	movlt	r3, #0
 800d808:	4646      	movge	r6, r8
 800d80a:	e730      	b.n	800d66e <_dtoa_r+0x71e>
 800d80c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d80e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d810:	4646      	mov	r6, r8
 800d812:	e735      	b.n	800d680 <_dtoa_r+0x730>
 800d814:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d816:	e75c      	b.n	800d6d2 <_dtoa_r+0x782>
 800d818:	2300      	movs	r3, #0
 800d81a:	e788      	b.n	800d72e <_dtoa_r+0x7de>
 800d81c:	3fe00000 	.word	0x3fe00000
 800d820:	40240000 	.word	0x40240000
 800d824:	40140000 	.word	0x40140000
 800d828:	9b02      	ldr	r3, [sp, #8]
 800d82a:	e780      	b.n	800d72e <_dtoa_r+0x7de>
 800d82c:	2300      	movs	r3, #0
 800d82e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d830:	e782      	b.n	800d738 <_dtoa_r+0x7e8>
 800d832:	d099      	beq.n	800d768 <_dtoa_r+0x818>
 800d834:	9a08      	ldr	r2, [sp, #32]
 800d836:	331c      	adds	r3, #28
 800d838:	441a      	add	r2, r3
 800d83a:	4498      	add	r8, r3
 800d83c:	441e      	add	r6, r3
 800d83e:	9208      	str	r2, [sp, #32]
 800d840:	e792      	b.n	800d768 <_dtoa_r+0x818>
 800d842:	4603      	mov	r3, r0
 800d844:	e7f6      	b.n	800d834 <_dtoa_r+0x8e4>
 800d846:	9b07      	ldr	r3, [sp, #28]
 800d848:	9704      	str	r7, [sp, #16]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	dc20      	bgt.n	800d890 <_dtoa_r+0x940>
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d852:	2b02      	cmp	r3, #2
 800d854:	dd1e      	ble.n	800d894 <_dtoa_r+0x944>
 800d856:	9b00      	ldr	r3, [sp, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	f47f aec0 	bne.w	800d5de <_dtoa_r+0x68e>
 800d85e:	4621      	mov	r1, r4
 800d860:	2205      	movs	r2, #5
 800d862:	4658      	mov	r0, fp
 800d864:	f000 fa9a 	bl	800dd9c <__multadd>
 800d868:	4601      	mov	r1, r0
 800d86a:	4604      	mov	r4, r0
 800d86c:	4648      	mov	r0, r9
 800d86e:	f000 fcad 	bl	800e1cc <__mcmp>
 800d872:	2800      	cmp	r0, #0
 800d874:	f77f aeb3 	ble.w	800d5de <_dtoa_r+0x68e>
 800d878:	4656      	mov	r6, sl
 800d87a:	2331      	movs	r3, #49	@ 0x31
 800d87c:	f806 3b01 	strb.w	r3, [r6], #1
 800d880:	9b04      	ldr	r3, [sp, #16]
 800d882:	3301      	adds	r3, #1
 800d884:	9304      	str	r3, [sp, #16]
 800d886:	e6ae      	b.n	800d5e6 <_dtoa_r+0x696>
 800d888:	9c07      	ldr	r4, [sp, #28]
 800d88a:	9704      	str	r7, [sp, #16]
 800d88c:	4625      	mov	r5, r4
 800d88e:	e7f3      	b.n	800d878 <_dtoa_r+0x928>
 800d890:	9b07      	ldr	r3, [sp, #28]
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d896:	2b00      	cmp	r3, #0
 800d898:	f000 8104 	beq.w	800daa4 <_dtoa_r+0xb54>
 800d89c:	2e00      	cmp	r6, #0
 800d89e:	dd05      	ble.n	800d8ac <_dtoa_r+0x95c>
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	4632      	mov	r2, r6
 800d8a4:	4658      	mov	r0, fp
 800d8a6:	f000 fc25 	bl	800e0f4 <__lshift>
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d05a      	beq.n	800d968 <_dtoa_r+0xa18>
 800d8b2:	6869      	ldr	r1, [r5, #4]
 800d8b4:	4658      	mov	r0, fp
 800d8b6:	f000 fa0f 	bl	800dcd8 <_Balloc>
 800d8ba:	4606      	mov	r6, r0
 800d8bc:	b928      	cbnz	r0, 800d8ca <_dtoa_r+0x97a>
 800d8be:	4b84      	ldr	r3, [pc, #528]	@ (800dad0 <_dtoa_r+0xb80>)
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d8c6:	f7ff bb5a 	b.w	800cf7e <_dtoa_r+0x2e>
 800d8ca:	692a      	ldr	r2, [r5, #16]
 800d8cc:	3202      	adds	r2, #2
 800d8ce:	0092      	lsls	r2, r2, #2
 800d8d0:	f105 010c 	add.w	r1, r5, #12
 800d8d4:	300c      	adds	r0, #12
 800d8d6:	f7ff faa2 	bl	800ce1e <memcpy>
 800d8da:	2201      	movs	r2, #1
 800d8dc:	4631      	mov	r1, r6
 800d8de:	4658      	mov	r0, fp
 800d8e0:	f000 fc08 	bl	800e0f4 <__lshift>
 800d8e4:	f10a 0301 	add.w	r3, sl, #1
 800d8e8:	9307      	str	r3, [sp, #28]
 800d8ea:	9b00      	ldr	r3, [sp, #0]
 800d8ec:	4453      	add	r3, sl
 800d8ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8f0:	9b02      	ldr	r3, [sp, #8]
 800d8f2:	f003 0301 	and.w	r3, r3, #1
 800d8f6:	462f      	mov	r7, r5
 800d8f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	9b07      	ldr	r3, [sp, #28]
 800d8fe:	4621      	mov	r1, r4
 800d900:	3b01      	subs	r3, #1
 800d902:	4648      	mov	r0, r9
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	f7ff fa98 	bl	800ce3a <quorem>
 800d90a:	4639      	mov	r1, r7
 800d90c:	9002      	str	r0, [sp, #8]
 800d90e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d912:	4648      	mov	r0, r9
 800d914:	f000 fc5a 	bl	800e1cc <__mcmp>
 800d918:	462a      	mov	r2, r5
 800d91a:	9008      	str	r0, [sp, #32]
 800d91c:	4621      	mov	r1, r4
 800d91e:	4658      	mov	r0, fp
 800d920:	f000 fc70 	bl	800e204 <__mdiff>
 800d924:	68c2      	ldr	r2, [r0, #12]
 800d926:	4606      	mov	r6, r0
 800d928:	bb02      	cbnz	r2, 800d96c <_dtoa_r+0xa1c>
 800d92a:	4601      	mov	r1, r0
 800d92c:	4648      	mov	r0, r9
 800d92e:	f000 fc4d 	bl	800e1cc <__mcmp>
 800d932:	4602      	mov	r2, r0
 800d934:	4631      	mov	r1, r6
 800d936:	4658      	mov	r0, fp
 800d938:	920e      	str	r2, [sp, #56]	@ 0x38
 800d93a:	f000 fa0d 	bl	800dd58 <_Bfree>
 800d93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d940:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d942:	9e07      	ldr	r6, [sp, #28]
 800d944:	ea43 0102 	orr.w	r1, r3, r2
 800d948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d94a:	4319      	orrs	r1, r3
 800d94c:	d110      	bne.n	800d970 <_dtoa_r+0xa20>
 800d94e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d952:	d029      	beq.n	800d9a8 <_dtoa_r+0xa58>
 800d954:	9b08      	ldr	r3, [sp, #32]
 800d956:	2b00      	cmp	r3, #0
 800d958:	dd02      	ble.n	800d960 <_dtoa_r+0xa10>
 800d95a:	9b02      	ldr	r3, [sp, #8]
 800d95c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d960:	9b00      	ldr	r3, [sp, #0]
 800d962:	f883 8000 	strb.w	r8, [r3]
 800d966:	e63f      	b.n	800d5e8 <_dtoa_r+0x698>
 800d968:	4628      	mov	r0, r5
 800d96a:	e7bb      	b.n	800d8e4 <_dtoa_r+0x994>
 800d96c:	2201      	movs	r2, #1
 800d96e:	e7e1      	b.n	800d934 <_dtoa_r+0x9e4>
 800d970:	9b08      	ldr	r3, [sp, #32]
 800d972:	2b00      	cmp	r3, #0
 800d974:	db04      	blt.n	800d980 <_dtoa_r+0xa30>
 800d976:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d978:	430b      	orrs	r3, r1
 800d97a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d97c:	430b      	orrs	r3, r1
 800d97e:	d120      	bne.n	800d9c2 <_dtoa_r+0xa72>
 800d980:	2a00      	cmp	r2, #0
 800d982:	dded      	ble.n	800d960 <_dtoa_r+0xa10>
 800d984:	4649      	mov	r1, r9
 800d986:	2201      	movs	r2, #1
 800d988:	4658      	mov	r0, fp
 800d98a:	f000 fbb3 	bl	800e0f4 <__lshift>
 800d98e:	4621      	mov	r1, r4
 800d990:	4681      	mov	r9, r0
 800d992:	f000 fc1b 	bl	800e1cc <__mcmp>
 800d996:	2800      	cmp	r0, #0
 800d998:	dc03      	bgt.n	800d9a2 <_dtoa_r+0xa52>
 800d99a:	d1e1      	bne.n	800d960 <_dtoa_r+0xa10>
 800d99c:	f018 0f01 	tst.w	r8, #1
 800d9a0:	d0de      	beq.n	800d960 <_dtoa_r+0xa10>
 800d9a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d9a6:	d1d8      	bne.n	800d95a <_dtoa_r+0xa0a>
 800d9a8:	9a00      	ldr	r2, [sp, #0]
 800d9aa:	2339      	movs	r3, #57	@ 0x39
 800d9ac:	7013      	strb	r3, [r2, #0]
 800d9ae:	4633      	mov	r3, r6
 800d9b0:	461e      	mov	r6, r3
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d9b8:	2a39      	cmp	r2, #57	@ 0x39
 800d9ba:	d052      	beq.n	800da62 <_dtoa_r+0xb12>
 800d9bc:	3201      	adds	r2, #1
 800d9be:	701a      	strb	r2, [r3, #0]
 800d9c0:	e612      	b.n	800d5e8 <_dtoa_r+0x698>
 800d9c2:	2a00      	cmp	r2, #0
 800d9c4:	dd07      	ble.n	800d9d6 <_dtoa_r+0xa86>
 800d9c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d9ca:	d0ed      	beq.n	800d9a8 <_dtoa_r+0xa58>
 800d9cc:	9a00      	ldr	r2, [sp, #0]
 800d9ce:	f108 0301 	add.w	r3, r8, #1
 800d9d2:	7013      	strb	r3, [r2, #0]
 800d9d4:	e608      	b.n	800d5e8 <_dtoa_r+0x698>
 800d9d6:	9b07      	ldr	r3, [sp, #28]
 800d9d8:	9a07      	ldr	r2, [sp, #28]
 800d9da:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d9de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d028      	beq.n	800da36 <_dtoa_r+0xae6>
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	220a      	movs	r2, #10
 800d9ea:	4658      	mov	r0, fp
 800d9ec:	f000 f9d6 	bl	800dd9c <__multadd>
 800d9f0:	42af      	cmp	r7, r5
 800d9f2:	4681      	mov	r9, r0
 800d9f4:	f04f 0300 	mov.w	r3, #0
 800d9f8:	f04f 020a 	mov.w	r2, #10
 800d9fc:	4639      	mov	r1, r7
 800d9fe:	4658      	mov	r0, fp
 800da00:	d107      	bne.n	800da12 <_dtoa_r+0xac2>
 800da02:	f000 f9cb 	bl	800dd9c <__multadd>
 800da06:	4607      	mov	r7, r0
 800da08:	4605      	mov	r5, r0
 800da0a:	9b07      	ldr	r3, [sp, #28]
 800da0c:	3301      	adds	r3, #1
 800da0e:	9307      	str	r3, [sp, #28]
 800da10:	e774      	b.n	800d8fc <_dtoa_r+0x9ac>
 800da12:	f000 f9c3 	bl	800dd9c <__multadd>
 800da16:	4629      	mov	r1, r5
 800da18:	4607      	mov	r7, r0
 800da1a:	2300      	movs	r3, #0
 800da1c:	220a      	movs	r2, #10
 800da1e:	4658      	mov	r0, fp
 800da20:	f000 f9bc 	bl	800dd9c <__multadd>
 800da24:	4605      	mov	r5, r0
 800da26:	e7f0      	b.n	800da0a <_dtoa_r+0xaba>
 800da28:	9b00      	ldr	r3, [sp, #0]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	bfcc      	ite	gt
 800da2e:	461e      	movgt	r6, r3
 800da30:	2601      	movle	r6, #1
 800da32:	4456      	add	r6, sl
 800da34:	2700      	movs	r7, #0
 800da36:	4649      	mov	r1, r9
 800da38:	2201      	movs	r2, #1
 800da3a:	4658      	mov	r0, fp
 800da3c:	f000 fb5a 	bl	800e0f4 <__lshift>
 800da40:	4621      	mov	r1, r4
 800da42:	4681      	mov	r9, r0
 800da44:	f000 fbc2 	bl	800e1cc <__mcmp>
 800da48:	2800      	cmp	r0, #0
 800da4a:	dcb0      	bgt.n	800d9ae <_dtoa_r+0xa5e>
 800da4c:	d102      	bne.n	800da54 <_dtoa_r+0xb04>
 800da4e:	f018 0f01 	tst.w	r8, #1
 800da52:	d1ac      	bne.n	800d9ae <_dtoa_r+0xa5e>
 800da54:	4633      	mov	r3, r6
 800da56:	461e      	mov	r6, r3
 800da58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da5c:	2a30      	cmp	r2, #48	@ 0x30
 800da5e:	d0fa      	beq.n	800da56 <_dtoa_r+0xb06>
 800da60:	e5c2      	b.n	800d5e8 <_dtoa_r+0x698>
 800da62:	459a      	cmp	sl, r3
 800da64:	d1a4      	bne.n	800d9b0 <_dtoa_r+0xa60>
 800da66:	9b04      	ldr	r3, [sp, #16]
 800da68:	3301      	adds	r3, #1
 800da6a:	9304      	str	r3, [sp, #16]
 800da6c:	2331      	movs	r3, #49	@ 0x31
 800da6e:	f88a 3000 	strb.w	r3, [sl]
 800da72:	e5b9      	b.n	800d5e8 <_dtoa_r+0x698>
 800da74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800da76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dad4 <_dtoa_r+0xb84>
 800da7a:	b11b      	cbz	r3, 800da84 <_dtoa_r+0xb34>
 800da7c:	f10a 0308 	add.w	r3, sl, #8
 800da80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800da82:	6013      	str	r3, [r2, #0]
 800da84:	4650      	mov	r0, sl
 800da86:	b019      	add	sp, #100	@ 0x64
 800da88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da8e:	2b01      	cmp	r3, #1
 800da90:	f77f ae37 	ble.w	800d702 <_dtoa_r+0x7b2>
 800da94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da96:	930a      	str	r3, [sp, #40]	@ 0x28
 800da98:	2001      	movs	r0, #1
 800da9a:	e655      	b.n	800d748 <_dtoa_r+0x7f8>
 800da9c:	9b00      	ldr	r3, [sp, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f77f aed6 	ble.w	800d850 <_dtoa_r+0x900>
 800daa4:	4656      	mov	r6, sl
 800daa6:	4621      	mov	r1, r4
 800daa8:	4648      	mov	r0, r9
 800daaa:	f7ff f9c6 	bl	800ce3a <quorem>
 800daae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dab2:	f806 8b01 	strb.w	r8, [r6], #1
 800dab6:	9b00      	ldr	r3, [sp, #0]
 800dab8:	eba6 020a 	sub.w	r2, r6, sl
 800dabc:	4293      	cmp	r3, r2
 800dabe:	ddb3      	ble.n	800da28 <_dtoa_r+0xad8>
 800dac0:	4649      	mov	r1, r9
 800dac2:	2300      	movs	r3, #0
 800dac4:	220a      	movs	r2, #10
 800dac6:	4658      	mov	r0, fp
 800dac8:	f000 f968 	bl	800dd9c <__multadd>
 800dacc:	4681      	mov	r9, r0
 800dace:	e7ea      	b.n	800daa6 <_dtoa_r+0xb56>
 800dad0:	0800f9dc 	.word	0x0800f9dc
 800dad4:	0800f960 	.word	0x0800f960

0800dad8 <_free_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	4605      	mov	r5, r0
 800dadc:	2900      	cmp	r1, #0
 800dade:	d041      	beq.n	800db64 <_free_r+0x8c>
 800dae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dae4:	1f0c      	subs	r4, r1, #4
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	bfb8      	it	lt
 800daea:	18e4      	addlt	r4, r4, r3
 800daec:	f000 f8e8 	bl	800dcc0 <__malloc_lock>
 800daf0:	4a1d      	ldr	r2, [pc, #116]	@ (800db68 <_free_r+0x90>)
 800daf2:	6813      	ldr	r3, [r2, #0]
 800daf4:	b933      	cbnz	r3, 800db04 <_free_r+0x2c>
 800daf6:	6063      	str	r3, [r4, #4]
 800daf8:	6014      	str	r4, [r2, #0]
 800dafa:	4628      	mov	r0, r5
 800dafc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db00:	f000 b8e4 	b.w	800dccc <__malloc_unlock>
 800db04:	42a3      	cmp	r3, r4
 800db06:	d908      	bls.n	800db1a <_free_r+0x42>
 800db08:	6820      	ldr	r0, [r4, #0]
 800db0a:	1821      	adds	r1, r4, r0
 800db0c:	428b      	cmp	r3, r1
 800db0e:	bf01      	itttt	eq
 800db10:	6819      	ldreq	r1, [r3, #0]
 800db12:	685b      	ldreq	r3, [r3, #4]
 800db14:	1809      	addeq	r1, r1, r0
 800db16:	6021      	streq	r1, [r4, #0]
 800db18:	e7ed      	b.n	800daf6 <_free_r+0x1e>
 800db1a:	461a      	mov	r2, r3
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	b10b      	cbz	r3, 800db24 <_free_r+0x4c>
 800db20:	42a3      	cmp	r3, r4
 800db22:	d9fa      	bls.n	800db1a <_free_r+0x42>
 800db24:	6811      	ldr	r1, [r2, #0]
 800db26:	1850      	adds	r0, r2, r1
 800db28:	42a0      	cmp	r0, r4
 800db2a:	d10b      	bne.n	800db44 <_free_r+0x6c>
 800db2c:	6820      	ldr	r0, [r4, #0]
 800db2e:	4401      	add	r1, r0
 800db30:	1850      	adds	r0, r2, r1
 800db32:	4283      	cmp	r3, r0
 800db34:	6011      	str	r1, [r2, #0]
 800db36:	d1e0      	bne.n	800dafa <_free_r+0x22>
 800db38:	6818      	ldr	r0, [r3, #0]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	6053      	str	r3, [r2, #4]
 800db3e:	4408      	add	r0, r1
 800db40:	6010      	str	r0, [r2, #0]
 800db42:	e7da      	b.n	800dafa <_free_r+0x22>
 800db44:	d902      	bls.n	800db4c <_free_r+0x74>
 800db46:	230c      	movs	r3, #12
 800db48:	602b      	str	r3, [r5, #0]
 800db4a:	e7d6      	b.n	800dafa <_free_r+0x22>
 800db4c:	6820      	ldr	r0, [r4, #0]
 800db4e:	1821      	adds	r1, r4, r0
 800db50:	428b      	cmp	r3, r1
 800db52:	bf04      	itt	eq
 800db54:	6819      	ldreq	r1, [r3, #0]
 800db56:	685b      	ldreq	r3, [r3, #4]
 800db58:	6063      	str	r3, [r4, #4]
 800db5a:	bf04      	itt	eq
 800db5c:	1809      	addeq	r1, r1, r0
 800db5e:	6021      	streq	r1, [r4, #0]
 800db60:	6054      	str	r4, [r2, #4]
 800db62:	e7ca      	b.n	800dafa <_free_r+0x22>
 800db64:	bd38      	pop	{r3, r4, r5, pc}
 800db66:	bf00      	nop
 800db68:	20000f08 	.word	0x20000f08

0800db6c <malloc>:
 800db6c:	4b02      	ldr	r3, [pc, #8]	@ (800db78 <malloc+0xc>)
 800db6e:	4601      	mov	r1, r0
 800db70:	6818      	ldr	r0, [r3, #0]
 800db72:	f000 b825 	b.w	800dbc0 <_malloc_r>
 800db76:	bf00      	nop
 800db78:	20000044 	.word	0x20000044

0800db7c <sbrk_aligned>:
 800db7c:	b570      	push	{r4, r5, r6, lr}
 800db7e:	4e0f      	ldr	r6, [pc, #60]	@ (800dbbc <sbrk_aligned+0x40>)
 800db80:	460c      	mov	r4, r1
 800db82:	6831      	ldr	r1, [r6, #0]
 800db84:	4605      	mov	r5, r0
 800db86:	b911      	cbnz	r1, 800db8e <sbrk_aligned+0x12>
 800db88:	f001 f81c 	bl	800ebc4 <_sbrk_r>
 800db8c:	6030      	str	r0, [r6, #0]
 800db8e:	4621      	mov	r1, r4
 800db90:	4628      	mov	r0, r5
 800db92:	f001 f817 	bl	800ebc4 <_sbrk_r>
 800db96:	1c43      	adds	r3, r0, #1
 800db98:	d103      	bne.n	800dba2 <sbrk_aligned+0x26>
 800db9a:	f04f 34ff 	mov.w	r4, #4294967295
 800db9e:	4620      	mov	r0, r4
 800dba0:	bd70      	pop	{r4, r5, r6, pc}
 800dba2:	1cc4      	adds	r4, r0, #3
 800dba4:	f024 0403 	bic.w	r4, r4, #3
 800dba8:	42a0      	cmp	r0, r4
 800dbaa:	d0f8      	beq.n	800db9e <sbrk_aligned+0x22>
 800dbac:	1a21      	subs	r1, r4, r0
 800dbae:	4628      	mov	r0, r5
 800dbb0:	f001 f808 	bl	800ebc4 <_sbrk_r>
 800dbb4:	3001      	adds	r0, #1
 800dbb6:	d1f2      	bne.n	800db9e <sbrk_aligned+0x22>
 800dbb8:	e7ef      	b.n	800db9a <sbrk_aligned+0x1e>
 800dbba:	bf00      	nop
 800dbbc:	20000f04 	.word	0x20000f04

0800dbc0 <_malloc_r>:
 800dbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbc4:	1ccd      	adds	r5, r1, #3
 800dbc6:	f025 0503 	bic.w	r5, r5, #3
 800dbca:	3508      	adds	r5, #8
 800dbcc:	2d0c      	cmp	r5, #12
 800dbce:	bf38      	it	cc
 800dbd0:	250c      	movcc	r5, #12
 800dbd2:	2d00      	cmp	r5, #0
 800dbd4:	4606      	mov	r6, r0
 800dbd6:	db01      	blt.n	800dbdc <_malloc_r+0x1c>
 800dbd8:	42a9      	cmp	r1, r5
 800dbda:	d904      	bls.n	800dbe6 <_malloc_r+0x26>
 800dbdc:	230c      	movs	r3, #12
 800dbde:	6033      	str	r3, [r6, #0]
 800dbe0:	2000      	movs	r0, #0
 800dbe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dcbc <_malloc_r+0xfc>
 800dbea:	f000 f869 	bl	800dcc0 <__malloc_lock>
 800dbee:	f8d8 3000 	ldr.w	r3, [r8]
 800dbf2:	461c      	mov	r4, r3
 800dbf4:	bb44      	cbnz	r4, 800dc48 <_malloc_r+0x88>
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	f7ff ffbf 	bl	800db7c <sbrk_aligned>
 800dbfe:	1c43      	adds	r3, r0, #1
 800dc00:	4604      	mov	r4, r0
 800dc02:	d158      	bne.n	800dcb6 <_malloc_r+0xf6>
 800dc04:	f8d8 4000 	ldr.w	r4, [r8]
 800dc08:	4627      	mov	r7, r4
 800dc0a:	2f00      	cmp	r7, #0
 800dc0c:	d143      	bne.n	800dc96 <_malloc_r+0xd6>
 800dc0e:	2c00      	cmp	r4, #0
 800dc10:	d04b      	beq.n	800dcaa <_malloc_r+0xea>
 800dc12:	6823      	ldr	r3, [r4, #0]
 800dc14:	4639      	mov	r1, r7
 800dc16:	4630      	mov	r0, r6
 800dc18:	eb04 0903 	add.w	r9, r4, r3
 800dc1c:	f000 ffd2 	bl	800ebc4 <_sbrk_r>
 800dc20:	4581      	cmp	r9, r0
 800dc22:	d142      	bne.n	800dcaa <_malloc_r+0xea>
 800dc24:	6821      	ldr	r1, [r4, #0]
 800dc26:	1a6d      	subs	r5, r5, r1
 800dc28:	4629      	mov	r1, r5
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	f7ff ffa6 	bl	800db7c <sbrk_aligned>
 800dc30:	3001      	adds	r0, #1
 800dc32:	d03a      	beq.n	800dcaa <_malloc_r+0xea>
 800dc34:	6823      	ldr	r3, [r4, #0]
 800dc36:	442b      	add	r3, r5
 800dc38:	6023      	str	r3, [r4, #0]
 800dc3a:	f8d8 3000 	ldr.w	r3, [r8]
 800dc3e:	685a      	ldr	r2, [r3, #4]
 800dc40:	bb62      	cbnz	r2, 800dc9c <_malloc_r+0xdc>
 800dc42:	f8c8 7000 	str.w	r7, [r8]
 800dc46:	e00f      	b.n	800dc68 <_malloc_r+0xa8>
 800dc48:	6822      	ldr	r2, [r4, #0]
 800dc4a:	1b52      	subs	r2, r2, r5
 800dc4c:	d420      	bmi.n	800dc90 <_malloc_r+0xd0>
 800dc4e:	2a0b      	cmp	r2, #11
 800dc50:	d917      	bls.n	800dc82 <_malloc_r+0xc2>
 800dc52:	1961      	adds	r1, r4, r5
 800dc54:	42a3      	cmp	r3, r4
 800dc56:	6025      	str	r5, [r4, #0]
 800dc58:	bf18      	it	ne
 800dc5a:	6059      	strne	r1, [r3, #4]
 800dc5c:	6863      	ldr	r3, [r4, #4]
 800dc5e:	bf08      	it	eq
 800dc60:	f8c8 1000 	streq.w	r1, [r8]
 800dc64:	5162      	str	r2, [r4, r5]
 800dc66:	604b      	str	r3, [r1, #4]
 800dc68:	4630      	mov	r0, r6
 800dc6a:	f000 f82f 	bl	800dccc <__malloc_unlock>
 800dc6e:	f104 000b 	add.w	r0, r4, #11
 800dc72:	1d23      	adds	r3, r4, #4
 800dc74:	f020 0007 	bic.w	r0, r0, #7
 800dc78:	1ac2      	subs	r2, r0, r3
 800dc7a:	bf1c      	itt	ne
 800dc7c:	1a1b      	subne	r3, r3, r0
 800dc7e:	50a3      	strne	r3, [r4, r2]
 800dc80:	e7af      	b.n	800dbe2 <_malloc_r+0x22>
 800dc82:	6862      	ldr	r2, [r4, #4]
 800dc84:	42a3      	cmp	r3, r4
 800dc86:	bf0c      	ite	eq
 800dc88:	f8c8 2000 	streq.w	r2, [r8]
 800dc8c:	605a      	strne	r2, [r3, #4]
 800dc8e:	e7eb      	b.n	800dc68 <_malloc_r+0xa8>
 800dc90:	4623      	mov	r3, r4
 800dc92:	6864      	ldr	r4, [r4, #4]
 800dc94:	e7ae      	b.n	800dbf4 <_malloc_r+0x34>
 800dc96:	463c      	mov	r4, r7
 800dc98:	687f      	ldr	r7, [r7, #4]
 800dc9a:	e7b6      	b.n	800dc0a <_malloc_r+0x4a>
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	42a3      	cmp	r3, r4
 800dca2:	d1fb      	bne.n	800dc9c <_malloc_r+0xdc>
 800dca4:	2300      	movs	r3, #0
 800dca6:	6053      	str	r3, [r2, #4]
 800dca8:	e7de      	b.n	800dc68 <_malloc_r+0xa8>
 800dcaa:	230c      	movs	r3, #12
 800dcac:	6033      	str	r3, [r6, #0]
 800dcae:	4630      	mov	r0, r6
 800dcb0:	f000 f80c 	bl	800dccc <__malloc_unlock>
 800dcb4:	e794      	b.n	800dbe0 <_malloc_r+0x20>
 800dcb6:	6005      	str	r5, [r0, #0]
 800dcb8:	e7d6      	b.n	800dc68 <_malloc_r+0xa8>
 800dcba:	bf00      	nop
 800dcbc:	20000f08 	.word	0x20000f08

0800dcc0 <__malloc_lock>:
 800dcc0:	4801      	ldr	r0, [pc, #4]	@ (800dcc8 <__malloc_lock+0x8>)
 800dcc2:	f7ff b8aa 	b.w	800ce1a <__retarget_lock_acquire_recursive>
 800dcc6:	bf00      	nop
 800dcc8:	20000f00 	.word	0x20000f00

0800dccc <__malloc_unlock>:
 800dccc:	4801      	ldr	r0, [pc, #4]	@ (800dcd4 <__malloc_unlock+0x8>)
 800dcce:	f7ff b8a5 	b.w	800ce1c <__retarget_lock_release_recursive>
 800dcd2:	bf00      	nop
 800dcd4:	20000f00 	.word	0x20000f00

0800dcd8 <_Balloc>:
 800dcd8:	b570      	push	{r4, r5, r6, lr}
 800dcda:	69c6      	ldr	r6, [r0, #28]
 800dcdc:	4604      	mov	r4, r0
 800dcde:	460d      	mov	r5, r1
 800dce0:	b976      	cbnz	r6, 800dd00 <_Balloc+0x28>
 800dce2:	2010      	movs	r0, #16
 800dce4:	f7ff ff42 	bl	800db6c <malloc>
 800dce8:	4602      	mov	r2, r0
 800dcea:	61e0      	str	r0, [r4, #28]
 800dcec:	b920      	cbnz	r0, 800dcf8 <_Balloc+0x20>
 800dcee:	4b18      	ldr	r3, [pc, #96]	@ (800dd50 <_Balloc+0x78>)
 800dcf0:	4818      	ldr	r0, [pc, #96]	@ (800dd54 <_Balloc+0x7c>)
 800dcf2:	216b      	movs	r1, #107	@ 0x6b
 800dcf4:	f000 ff76 	bl	800ebe4 <__assert_func>
 800dcf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dcfc:	6006      	str	r6, [r0, #0]
 800dcfe:	60c6      	str	r6, [r0, #12]
 800dd00:	69e6      	ldr	r6, [r4, #28]
 800dd02:	68f3      	ldr	r3, [r6, #12]
 800dd04:	b183      	cbz	r3, 800dd28 <_Balloc+0x50>
 800dd06:	69e3      	ldr	r3, [r4, #28]
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dd0e:	b9b8      	cbnz	r0, 800dd40 <_Balloc+0x68>
 800dd10:	2101      	movs	r1, #1
 800dd12:	fa01 f605 	lsl.w	r6, r1, r5
 800dd16:	1d72      	adds	r2, r6, #5
 800dd18:	0092      	lsls	r2, r2, #2
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f000 ff80 	bl	800ec20 <_calloc_r>
 800dd20:	b160      	cbz	r0, 800dd3c <_Balloc+0x64>
 800dd22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dd26:	e00e      	b.n	800dd46 <_Balloc+0x6e>
 800dd28:	2221      	movs	r2, #33	@ 0x21
 800dd2a:	2104      	movs	r1, #4
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	f000 ff77 	bl	800ec20 <_calloc_r>
 800dd32:	69e3      	ldr	r3, [r4, #28]
 800dd34:	60f0      	str	r0, [r6, #12]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d1e4      	bne.n	800dd06 <_Balloc+0x2e>
 800dd3c:	2000      	movs	r0, #0
 800dd3e:	bd70      	pop	{r4, r5, r6, pc}
 800dd40:	6802      	ldr	r2, [r0, #0]
 800dd42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd46:	2300      	movs	r3, #0
 800dd48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd4c:	e7f7      	b.n	800dd3e <_Balloc+0x66>
 800dd4e:	bf00      	nop
 800dd50:	0800f96d 	.word	0x0800f96d
 800dd54:	0800f9ed 	.word	0x0800f9ed

0800dd58 <_Bfree>:
 800dd58:	b570      	push	{r4, r5, r6, lr}
 800dd5a:	69c6      	ldr	r6, [r0, #28]
 800dd5c:	4605      	mov	r5, r0
 800dd5e:	460c      	mov	r4, r1
 800dd60:	b976      	cbnz	r6, 800dd80 <_Bfree+0x28>
 800dd62:	2010      	movs	r0, #16
 800dd64:	f7ff ff02 	bl	800db6c <malloc>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	61e8      	str	r0, [r5, #28]
 800dd6c:	b920      	cbnz	r0, 800dd78 <_Bfree+0x20>
 800dd6e:	4b09      	ldr	r3, [pc, #36]	@ (800dd94 <_Bfree+0x3c>)
 800dd70:	4809      	ldr	r0, [pc, #36]	@ (800dd98 <_Bfree+0x40>)
 800dd72:	218f      	movs	r1, #143	@ 0x8f
 800dd74:	f000 ff36 	bl	800ebe4 <__assert_func>
 800dd78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd7c:	6006      	str	r6, [r0, #0]
 800dd7e:	60c6      	str	r6, [r0, #12]
 800dd80:	b13c      	cbz	r4, 800dd92 <_Bfree+0x3a>
 800dd82:	69eb      	ldr	r3, [r5, #28]
 800dd84:	6862      	ldr	r2, [r4, #4]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd8c:	6021      	str	r1, [r4, #0]
 800dd8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd92:	bd70      	pop	{r4, r5, r6, pc}
 800dd94:	0800f96d 	.word	0x0800f96d
 800dd98:	0800f9ed 	.word	0x0800f9ed

0800dd9c <__multadd>:
 800dd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dda0:	690d      	ldr	r5, [r1, #16]
 800dda2:	4607      	mov	r7, r0
 800dda4:	460c      	mov	r4, r1
 800dda6:	461e      	mov	r6, r3
 800dda8:	f101 0c14 	add.w	ip, r1, #20
 800ddac:	2000      	movs	r0, #0
 800ddae:	f8dc 3000 	ldr.w	r3, [ip]
 800ddb2:	b299      	uxth	r1, r3
 800ddb4:	fb02 6101 	mla	r1, r2, r1, r6
 800ddb8:	0c1e      	lsrs	r6, r3, #16
 800ddba:	0c0b      	lsrs	r3, r1, #16
 800ddbc:	fb02 3306 	mla	r3, r2, r6, r3
 800ddc0:	b289      	uxth	r1, r1
 800ddc2:	3001      	adds	r0, #1
 800ddc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ddc8:	4285      	cmp	r5, r0
 800ddca:	f84c 1b04 	str.w	r1, [ip], #4
 800ddce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ddd2:	dcec      	bgt.n	800ddae <__multadd+0x12>
 800ddd4:	b30e      	cbz	r6, 800de1a <__multadd+0x7e>
 800ddd6:	68a3      	ldr	r3, [r4, #8]
 800ddd8:	42ab      	cmp	r3, r5
 800ddda:	dc19      	bgt.n	800de10 <__multadd+0x74>
 800dddc:	6861      	ldr	r1, [r4, #4]
 800ddde:	4638      	mov	r0, r7
 800dde0:	3101      	adds	r1, #1
 800dde2:	f7ff ff79 	bl	800dcd8 <_Balloc>
 800dde6:	4680      	mov	r8, r0
 800dde8:	b928      	cbnz	r0, 800ddf6 <__multadd+0x5a>
 800ddea:	4602      	mov	r2, r0
 800ddec:	4b0c      	ldr	r3, [pc, #48]	@ (800de20 <__multadd+0x84>)
 800ddee:	480d      	ldr	r0, [pc, #52]	@ (800de24 <__multadd+0x88>)
 800ddf0:	21ba      	movs	r1, #186	@ 0xba
 800ddf2:	f000 fef7 	bl	800ebe4 <__assert_func>
 800ddf6:	6922      	ldr	r2, [r4, #16]
 800ddf8:	3202      	adds	r2, #2
 800ddfa:	f104 010c 	add.w	r1, r4, #12
 800ddfe:	0092      	lsls	r2, r2, #2
 800de00:	300c      	adds	r0, #12
 800de02:	f7ff f80c 	bl	800ce1e <memcpy>
 800de06:	4621      	mov	r1, r4
 800de08:	4638      	mov	r0, r7
 800de0a:	f7ff ffa5 	bl	800dd58 <_Bfree>
 800de0e:	4644      	mov	r4, r8
 800de10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800de14:	3501      	adds	r5, #1
 800de16:	615e      	str	r6, [r3, #20]
 800de18:	6125      	str	r5, [r4, #16]
 800de1a:	4620      	mov	r0, r4
 800de1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de20:	0800f9dc 	.word	0x0800f9dc
 800de24:	0800f9ed 	.word	0x0800f9ed

0800de28 <__hi0bits>:
 800de28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800de2c:	4603      	mov	r3, r0
 800de2e:	bf36      	itet	cc
 800de30:	0403      	lslcc	r3, r0, #16
 800de32:	2000      	movcs	r0, #0
 800de34:	2010      	movcc	r0, #16
 800de36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800de3a:	bf3c      	itt	cc
 800de3c:	021b      	lslcc	r3, r3, #8
 800de3e:	3008      	addcc	r0, #8
 800de40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de44:	bf3c      	itt	cc
 800de46:	011b      	lslcc	r3, r3, #4
 800de48:	3004      	addcc	r0, #4
 800de4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de4e:	bf3c      	itt	cc
 800de50:	009b      	lslcc	r3, r3, #2
 800de52:	3002      	addcc	r0, #2
 800de54:	2b00      	cmp	r3, #0
 800de56:	db05      	blt.n	800de64 <__hi0bits+0x3c>
 800de58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800de5c:	f100 0001 	add.w	r0, r0, #1
 800de60:	bf08      	it	eq
 800de62:	2020      	moveq	r0, #32
 800de64:	4770      	bx	lr

0800de66 <__lo0bits>:
 800de66:	6803      	ldr	r3, [r0, #0]
 800de68:	4602      	mov	r2, r0
 800de6a:	f013 0007 	ands.w	r0, r3, #7
 800de6e:	d00b      	beq.n	800de88 <__lo0bits+0x22>
 800de70:	07d9      	lsls	r1, r3, #31
 800de72:	d421      	bmi.n	800deb8 <__lo0bits+0x52>
 800de74:	0798      	lsls	r0, r3, #30
 800de76:	bf49      	itett	mi
 800de78:	085b      	lsrmi	r3, r3, #1
 800de7a:	089b      	lsrpl	r3, r3, #2
 800de7c:	2001      	movmi	r0, #1
 800de7e:	6013      	strmi	r3, [r2, #0]
 800de80:	bf5c      	itt	pl
 800de82:	6013      	strpl	r3, [r2, #0]
 800de84:	2002      	movpl	r0, #2
 800de86:	4770      	bx	lr
 800de88:	b299      	uxth	r1, r3
 800de8a:	b909      	cbnz	r1, 800de90 <__lo0bits+0x2a>
 800de8c:	0c1b      	lsrs	r3, r3, #16
 800de8e:	2010      	movs	r0, #16
 800de90:	b2d9      	uxtb	r1, r3
 800de92:	b909      	cbnz	r1, 800de98 <__lo0bits+0x32>
 800de94:	3008      	adds	r0, #8
 800de96:	0a1b      	lsrs	r3, r3, #8
 800de98:	0719      	lsls	r1, r3, #28
 800de9a:	bf04      	itt	eq
 800de9c:	091b      	lsreq	r3, r3, #4
 800de9e:	3004      	addeq	r0, #4
 800dea0:	0799      	lsls	r1, r3, #30
 800dea2:	bf04      	itt	eq
 800dea4:	089b      	lsreq	r3, r3, #2
 800dea6:	3002      	addeq	r0, #2
 800dea8:	07d9      	lsls	r1, r3, #31
 800deaa:	d403      	bmi.n	800deb4 <__lo0bits+0x4e>
 800deac:	085b      	lsrs	r3, r3, #1
 800deae:	f100 0001 	add.w	r0, r0, #1
 800deb2:	d003      	beq.n	800debc <__lo0bits+0x56>
 800deb4:	6013      	str	r3, [r2, #0]
 800deb6:	4770      	bx	lr
 800deb8:	2000      	movs	r0, #0
 800deba:	4770      	bx	lr
 800debc:	2020      	movs	r0, #32
 800debe:	4770      	bx	lr

0800dec0 <__i2b>:
 800dec0:	b510      	push	{r4, lr}
 800dec2:	460c      	mov	r4, r1
 800dec4:	2101      	movs	r1, #1
 800dec6:	f7ff ff07 	bl	800dcd8 <_Balloc>
 800deca:	4602      	mov	r2, r0
 800decc:	b928      	cbnz	r0, 800deda <__i2b+0x1a>
 800dece:	4b05      	ldr	r3, [pc, #20]	@ (800dee4 <__i2b+0x24>)
 800ded0:	4805      	ldr	r0, [pc, #20]	@ (800dee8 <__i2b+0x28>)
 800ded2:	f240 1145 	movw	r1, #325	@ 0x145
 800ded6:	f000 fe85 	bl	800ebe4 <__assert_func>
 800deda:	2301      	movs	r3, #1
 800dedc:	6144      	str	r4, [r0, #20]
 800dede:	6103      	str	r3, [r0, #16]
 800dee0:	bd10      	pop	{r4, pc}
 800dee2:	bf00      	nop
 800dee4:	0800f9dc 	.word	0x0800f9dc
 800dee8:	0800f9ed 	.word	0x0800f9ed

0800deec <__multiply>:
 800deec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def0:	4614      	mov	r4, r2
 800def2:	690a      	ldr	r2, [r1, #16]
 800def4:	6923      	ldr	r3, [r4, #16]
 800def6:	429a      	cmp	r2, r3
 800def8:	bfa8      	it	ge
 800defa:	4623      	movge	r3, r4
 800defc:	460f      	mov	r7, r1
 800defe:	bfa4      	itt	ge
 800df00:	460c      	movge	r4, r1
 800df02:	461f      	movge	r7, r3
 800df04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800df08:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800df0c:	68a3      	ldr	r3, [r4, #8]
 800df0e:	6861      	ldr	r1, [r4, #4]
 800df10:	eb0a 0609 	add.w	r6, sl, r9
 800df14:	42b3      	cmp	r3, r6
 800df16:	b085      	sub	sp, #20
 800df18:	bfb8      	it	lt
 800df1a:	3101      	addlt	r1, #1
 800df1c:	f7ff fedc 	bl	800dcd8 <_Balloc>
 800df20:	b930      	cbnz	r0, 800df30 <__multiply+0x44>
 800df22:	4602      	mov	r2, r0
 800df24:	4b44      	ldr	r3, [pc, #272]	@ (800e038 <__multiply+0x14c>)
 800df26:	4845      	ldr	r0, [pc, #276]	@ (800e03c <__multiply+0x150>)
 800df28:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800df2c:	f000 fe5a 	bl	800ebe4 <__assert_func>
 800df30:	f100 0514 	add.w	r5, r0, #20
 800df34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800df38:	462b      	mov	r3, r5
 800df3a:	2200      	movs	r2, #0
 800df3c:	4543      	cmp	r3, r8
 800df3e:	d321      	bcc.n	800df84 <__multiply+0x98>
 800df40:	f107 0114 	add.w	r1, r7, #20
 800df44:	f104 0214 	add.w	r2, r4, #20
 800df48:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800df4c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800df50:	9302      	str	r3, [sp, #8]
 800df52:	1b13      	subs	r3, r2, r4
 800df54:	3b15      	subs	r3, #21
 800df56:	f023 0303 	bic.w	r3, r3, #3
 800df5a:	3304      	adds	r3, #4
 800df5c:	f104 0715 	add.w	r7, r4, #21
 800df60:	42ba      	cmp	r2, r7
 800df62:	bf38      	it	cc
 800df64:	2304      	movcc	r3, #4
 800df66:	9301      	str	r3, [sp, #4]
 800df68:	9b02      	ldr	r3, [sp, #8]
 800df6a:	9103      	str	r1, [sp, #12]
 800df6c:	428b      	cmp	r3, r1
 800df6e:	d80c      	bhi.n	800df8a <__multiply+0x9e>
 800df70:	2e00      	cmp	r6, #0
 800df72:	dd03      	ble.n	800df7c <__multiply+0x90>
 800df74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d05b      	beq.n	800e034 <__multiply+0x148>
 800df7c:	6106      	str	r6, [r0, #16]
 800df7e:	b005      	add	sp, #20
 800df80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df84:	f843 2b04 	str.w	r2, [r3], #4
 800df88:	e7d8      	b.n	800df3c <__multiply+0x50>
 800df8a:	f8b1 a000 	ldrh.w	sl, [r1]
 800df8e:	f1ba 0f00 	cmp.w	sl, #0
 800df92:	d024      	beq.n	800dfde <__multiply+0xf2>
 800df94:	f104 0e14 	add.w	lr, r4, #20
 800df98:	46a9      	mov	r9, r5
 800df9a:	f04f 0c00 	mov.w	ip, #0
 800df9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dfa2:	f8d9 3000 	ldr.w	r3, [r9]
 800dfa6:	fa1f fb87 	uxth.w	fp, r7
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	fb0a 330b 	mla	r3, sl, fp, r3
 800dfb0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dfb4:	f8d9 7000 	ldr.w	r7, [r9]
 800dfb8:	4463      	add	r3, ip
 800dfba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dfbe:	fb0a c70b 	mla	r7, sl, fp, ip
 800dfc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dfcc:	4572      	cmp	r2, lr
 800dfce:	f849 3b04 	str.w	r3, [r9], #4
 800dfd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dfd6:	d8e2      	bhi.n	800df9e <__multiply+0xb2>
 800dfd8:	9b01      	ldr	r3, [sp, #4]
 800dfda:	f845 c003 	str.w	ip, [r5, r3]
 800dfde:	9b03      	ldr	r3, [sp, #12]
 800dfe0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dfe4:	3104      	adds	r1, #4
 800dfe6:	f1b9 0f00 	cmp.w	r9, #0
 800dfea:	d021      	beq.n	800e030 <__multiply+0x144>
 800dfec:	682b      	ldr	r3, [r5, #0]
 800dfee:	f104 0c14 	add.w	ip, r4, #20
 800dff2:	46ae      	mov	lr, r5
 800dff4:	f04f 0a00 	mov.w	sl, #0
 800dff8:	f8bc b000 	ldrh.w	fp, [ip]
 800dffc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e000:	fb09 770b 	mla	r7, r9, fp, r7
 800e004:	4457      	add	r7, sl
 800e006:	b29b      	uxth	r3, r3
 800e008:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e00c:	f84e 3b04 	str.w	r3, [lr], #4
 800e010:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e014:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e018:	f8be 3000 	ldrh.w	r3, [lr]
 800e01c:	fb09 330a 	mla	r3, r9, sl, r3
 800e020:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e024:	4562      	cmp	r2, ip
 800e026:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e02a:	d8e5      	bhi.n	800dff8 <__multiply+0x10c>
 800e02c:	9f01      	ldr	r7, [sp, #4]
 800e02e:	51eb      	str	r3, [r5, r7]
 800e030:	3504      	adds	r5, #4
 800e032:	e799      	b.n	800df68 <__multiply+0x7c>
 800e034:	3e01      	subs	r6, #1
 800e036:	e79b      	b.n	800df70 <__multiply+0x84>
 800e038:	0800f9dc 	.word	0x0800f9dc
 800e03c:	0800f9ed 	.word	0x0800f9ed

0800e040 <__pow5mult>:
 800e040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e044:	4615      	mov	r5, r2
 800e046:	f012 0203 	ands.w	r2, r2, #3
 800e04a:	4607      	mov	r7, r0
 800e04c:	460e      	mov	r6, r1
 800e04e:	d007      	beq.n	800e060 <__pow5mult+0x20>
 800e050:	4c25      	ldr	r4, [pc, #148]	@ (800e0e8 <__pow5mult+0xa8>)
 800e052:	3a01      	subs	r2, #1
 800e054:	2300      	movs	r3, #0
 800e056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e05a:	f7ff fe9f 	bl	800dd9c <__multadd>
 800e05e:	4606      	mov	r6, r0
 800e060:	10ad      	asrs	r5, r5, #2
 800e062:	d03d      	beq.n	800e0e0 <__pow5mult+0xa0>
 800e064:	69fc      	ldr	r4, [r7, #28]
 800e066:	b97c      	cbnz	r4, 800e088 <__pow5mult+0x48>
 800e068:	2010      	movs	r0, #16
 800e06a:	f7ff fd7f 	bl	800db6c <malloc>
 800e06e:	4602      	mov	r2, r0
 800e070:	61f8      	str	r0, [r7, #28]
 800e072:	b928      	cbnz	r0, 800e080 <__pow5mult+0x40>
 800e074:	4b1d      	ldr	r3, [pc, #116]	@ (800e0ec <__pow5mult+0xac>)
 800e076:	481e      	ldr	r0, [pc, #120]	@ (800e0f0 <__pow5mult+0xb0>)
 800e078:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e07c:	f000 fdb2 	bl	800ebe4 <__assert_func>
 800e080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e084:	6004      	str	r4, [r0, #0]
 800e086:	60c4      	str	r4, [r0, #12]
 800e088:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e08c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e090:	b94c      	cbnz	r4, 800e0a6 <__pow5mult+0x66>
 800e092:	f240 2171 	movw	r1, #625	@ 0x271
 800e096:	4638      	mov	r0, r7
 800e098:	f7ff ff12 	bl	800dec0 <__i2b>
 800e09c:	2300      	movs	r3, #0
 800e09e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	6003      	str	r3, [r0, #0]
 800e0a6:	f04f 0900 	mov.w	r9, #0
 800e0aa:	07eb      	lsls	r3, r5, #31
 800e0ac:	d50a      	bpl.n	800e0c4 <__pow5mult+0x84>
 800e0ae:	4631      	mov	r1, r6
 800e0b0:	4622      	mov	r2, r4
 800e0b2:	4638      	mov	r0, r7
 800e0b4:	f7ff ff1a 	bl	800deec <__multiply>
 800e0b8:	4631      	mov	r1, r6
 800e0ba:	4680      	mov	r8, r0
 800e0bc:	4638      	mov	r0, r7
 800e0be:	f7ff fe4b 	bl	800dd58 <_Bfree>
 800e0c2:	4646      	mov	r6, r8
 800e0c4:	106d      	asrs	r5, r5, #1
 800e0c6:	d00b      	beq.n	800e0e0 <__pow5mult+0xa0>
 800e0c8:	6820      	ldr	r0, [r4, #0]
 800e0ca:	b938      	cbnz	r0, 800e0dc <__pow5mult+0x9c>
 800e0cc:	4622      	mov	r2, r4
 800e0ce:	4621      	mov	r1, r4
 800e0d0:	4638      	mov	r0, r7
 800e0d2:	f7ff ff0b 	bl	800deec <__multiply>
 800e0d6:	6020      	str	r0, [r4, #0]
 800e0d8:	f8c0 9000 	str.w	r9, [r0]
 800e0dc:	4604      	mov	r4, r0
 800e0de:	e7e4      	b.n	800e0aa <__pow5mult+0x6a>
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0e6:	bf00      	nop
 800e0e8:	0800fa48 	.word	0x0800fa48
 800e0ec:	0800f96d 	.word	0x0800f96d
 800e0f0:	0800f9ed 	.word	0x0800f9ed

0800e0f4 <__lshift>:
 800e0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f8:	460c      	mov	r4, r1
 800e0fa:	6849      	ldr	r1, [r1, #4]
 800e0fc:	6923      	ldr	r3, [r4, #16]
 800e0fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e102:	68a3      	ldr	r3, [r4, #8]
 800e104:	4607      	mov	r7, r0
 800e106:	4691      	mov	r9, r2
 800e108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e10c:	f108 0601 	add.w	r6, r8, #1
 800e110:	42b3      	cmp	r3, r6
 800e112:	db0b      	blt.n	800e12c <__lshift+0x38>
 800e114:	4638      	mov	r0, r7
 800e116:	f7ff fddf 	bl	800dcd8 <_Balloc>
 800e11a:	4605      	mov	r5, r0
 800e11c:	b948      	cbnz	r0, 800e132 <__lshift+0x3e>
 800e11e:	4602      	mov	r2, r0
 800e120:	4b28      	ldr	r3, [pc, #160]	@ (800e1c4 <__lshift+0xd0>)
 800e122:	4829      	ldr	r0, [pc, #164]	@ (800e1c8 <__lshift+0xd4>)
 800e124:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e128:	f000 fd5c 	bl	800ebe4 <__assert_func>
 800e12c:	3101      	adds	r1, #1
 800e12e:	005b      	lsls	r3, r3, #1
 800e130:	e7ee      	b.n	800e110 <__lshift+0x1c>
 800e132:	2300      	movs	r3, #0
 800e134:	f100 0114 	add.w	r1, r0, #20
 800e138:	f100 0210 	add.w	r2, r0, #16
 800e13c:	4618      	mov	r0, r3
 800e13e:	4553      	cmp	r3, sl
 800e140:	db33      	blt.n	800e1aa <__lshift+0xb6>
 800e142:	6920      	ldr	r0, [r4, #16]
 800e144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e148:	f104 0314 	add.w	r3, r4, #20
 800e14c:	f019 091f 	ands.w	r9, r9, #31
 800e150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e154:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e158:	d02b      	beq.n	800e1b2 <__lshift+0xbe>
 800e15a:	f1c9 0e20 	rsb	lr, r9, #32
 800e15e:	468a      	mov	sl, r1
 800e160:	2200      	movs	r2, #0
 800e162:	6818      	ldr	r0, [r3, #0]
 800e164:	fa00 f009 	lsl.w	r0, r0, r9
 800e168:	4310      	orrs	r0, r2
 800e16a:	f84a 0b04 	str.w	r0, [sl], #4
 800e16e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e172:	459c      	cmp	ip, r3
 800e174:	fa22 f20e 	lsr.w	r2, r2, lr
 800e178:	d8f3      	bhi.n	800e162 <__lshift+0x6e>
 800e17a:	ebac 0304 	sub.w	r3, ip, r4
 800e17e:	3b15      	subs	r3, #21
 800e180:	f023 0303 	bic.w	r3, r3, #3
 800e184:	3304      	adds	r3, #4
 800e186:	f104 0015 	add.w	r0, r4, #21
 800e18a:	4584      	cmp	ip, r0
 800e18c:	bf38      	it	cc
 800e18e:	2304      	movcc	r3, #4
 800e190:	50ca      	str	r2, [r1, r3]
 800e192:	b10a      	cbz	r2, 800e198 <__lshift+0xa4>
 800e194:	f108 0602 	add.w	r6, r8, #2
 800e198:	3e01      	subs	r6, #1
 800e19a:	4638      	mov	r0, r7
 800e19c:	612e      	str	r6, [r5, #16]
 800e19e:	4621      	mov	r1, r4
 800e1a0:	f7ff fdda 	bl	800dd58 <_Bfree>
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	e7c5      	b.n	800e13e <__lshift+0x4a>
 800e1b2:	3904      	subs	r1, #4
 800e1b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e1bc:	459c      	cmp	ip, r3
 800e1be:	d8f9      	bhi.n	800e1b4 <__lshift+0xc0>
 800e1c0:	e7ea      	b.n	800e198 <__lshift+0xa4>
 800e1c2:	bf00      	nop
 800e1c4:	0800f9dc 	.word	0x0800f9dc
 800e1c8:	0800f9ed 	.word	0x0800f9ed

0800e1cc <__mcmp>:
 800e1cc:	690a      	ldr	r2, [r1, #16]
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	6900      	ldr	r0, [r0, #16]
 800e1d2:	1a80      	subs	r0, r0, r2
 800e1d4:	b530      	push	{r4, r5, lr}
 800e1d6:	d10e      	bne.n	800e1f6 <__mcmp+0x2a>
 800e1d8:	3314      	adds	r3, #20
 800e1da:	3114      	adds	r1, #20
 800e1dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e1e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e1e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e1e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e1ec:	4295      	cmp	r5, r2
 800e1ee:	d003      	beq.n	800e1f8 <__mcmp+0x2c>
 800e1f0:	d205      	bcs.n	800e1fe <__mcmp+0x32>
 800e1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f6:	bd30      	pop	{r4, r5, pc}
 800e1f8:	42a3      	cmp	r3, r4
 800e1fa:	d3f3      	bcc.n	800e1e4 <__mcmp+0x18>
 800e1fc:	e7fb      	b.n	800e1f6 <__mcmp+0x2a>
 800e1fe:	2001      	movs	r0, #1
 800e200:	e7f9      	b.n	800e1f6 <__mcmp+0x2a>
	...

0800e204 <__mdiff>:
 800e204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e208:	4689      	mov	r9, r1
 800e20a:	4606      	mov	r6, r0
 800e20c:	4611      	mov	r1, r2
 800e20e:	4648      	mov	r0, r9
 800e210:	4614      	mov	r4, r2
 800e212:	f7ff ffdb 	bl	800e1cc <__mcmp>
 800e216:	1e05      	subs	r5, r0, #0
 800e218:	d112      	bne.n	800e240 <__mdiff+0x3c>
 800e21a:	4629      	mov	r1, r5
 800e21c:	4630      	mov	r0, r6
 800e21e:	f7ff fd5b 	bl	800dcd8 <_Balloc>
 800e222:	4602      	mov	r2, r0
 800e224:	b928      	cbnz	r0, 800e232 <__mdiff+0x2e>
 800e226:	4b3f      	ldr	r3, [pc, #252]	@ (800e324 <__mdiff+0x120>)
 800e228:	f240 2137 	movw	r1, #567	@ 0x237
 800e22c:	483e      	ldr	r0, [pc, #248]	@ (800e328 <__mdiff+0x124>)
 800e22e:	f000 fcd9 	bl	800ebe4 <__assert_func>
 800e232:	2301      	movs	r3, #1
 800e234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e238:	4610      	mov	r0, r2
 800e23a:	b003      	add	sp, #12
 800e23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e240:	bfbc      	itt	lt
 800e242:	464b      	movlt	r3, r9
 800e244:	46a1      	movlt	r9, r4
 800e246:	4630      	mov	r0, r6
 800e248:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e24c:	bfba      	itte	lt
 800e24e:	461c      	movlt	r4, r3
 800e250:	2501      	movlt	r5, #1
 800e252:	2500      	movge	r5, #0
 800e254:	f7ff fd40 	bl	800dcd8 <_Balloc>
 800e258:	4602      	mov	r2, r0
 800e25a:	b918      	cbnz	r0, 800e264 <__mdiff+0x60>
 800e25c:	4b31      	ldr	r3, [pc, #196]	@ (800e324 <__mdiff+0x120>)
 800e25e:	f240 2145 	movw	r1, #581	@ 0x245
 800e262:	e7e3      	b.n	800e22c <__mdiff+0x28>
 800e264:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e268:	6926      	ldr	r6, [r4, #16]
 800e26a:	60c5      	str	r5, [r0, #12]
 800e26c:	f109 0310 	add.w	r3, r9, #16
 800e270:	f109 0514 	add.w	r5, r9, #20
 800e274:	f104 0e14 	add.w	lr, r4, #20
 800e278:	f100 0b14 	add.w	fp, r0, #20
 800e27c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e280:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e284:	9301      	str	r3, [sp, #4]
 800e286:	46d9      	mov	r9, fp
 800e288:	f04f 0c00 	mov.w	ip, #0
 800e28c:	9b01      	ldr	r3, [sp, #4]
 800e28e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e292:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e296:	9301      	str	r3, [sp, #4]
 800e298:	fa1f f38a 	uxth.w	r3, sl
 800e29c:	4619      	mov	r1, r3
 800e29e:	b283      	uxth	r3, r0
 800e2a0:	1acb      	subs	r3, r1, r3
 800e2a2:	0c00      	lsrs	r0, r0, #16
 800e2a4:	4463      	add	r3, ip
 800e2a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e2aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e2b4:	4576      	cmp	r6, lr
 800e2b6:	f849 3b04 	str.w	r3, [r9], #4
 800e2ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e2be:	d8e5      	bhi.n	800e28c <__mdiff+0x88>
 800e2c0:	1b33      	subs	r3, r6, r4
 800e2c2:	3b15      	subs	r3, #21
 800e2c4:	f023 0303 	bic.w	r3, r3, #3
 800e2c8:	3415      	adds	r4, #21
 800e2ca:	3304      	adds	r3, #4
 800e2cc:	42a6      	cmp	r6, r4
 800e2ce:	bf38      	it	cc
 800e2d0:	2304      	movcc	r3, #4
 800e2d2:	441d      	add	r5, r3
 800e2d4:	445b      	add	r3, fp
 800e2d6:	461e      	mov	r6, r3
 800e2d8:	462c      	mov	r4, r5
 800e2da:	4544      	cmp	r4, r8
 800e2dc:	d30e      	bcc.n	800e2fc <__mdiff+0xf8>
 800e2de:	f108 0103 	add.w	r1, r8, #3
 800e2e2:	1b49      	subs	r1, r1, r5
 800e2e4:	f021 0103 	bic.w	r1, r1, #3
 800e2e8:	3d03      	subs	r5, #3
 800e2ea:	45a8      	cmp	r8, r5
 800e2ec:	bf38      	it	cc
 800e2ee:	2100      	movcc	r1, #0
 800e2f0:	440b      	add	r3, r1
 800e2f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e2f6:	b191      	cbz	r1, 800e31e <__mdiff+0x11a>
 800e2f8:	6117      	str	r7, [r2, #16]
 800e2fa:	e79d      	b.n	800e238 <__mdiff+0x34>
 800e2fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800e300:	46e6      	mov	lr, ip
 800e302:	0c08      	lsrs	r0, r1, #16
 800e304:	fa1c fc81 	uxtah	ip, ip, r1
 800e308:	4471      	add	r1, lr
 800e30a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e30e:	b289      	uxth	r1, r1
 800e310:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e314:	f846 1b04 	str.w	r1, [r6], #4
 800e318:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e31c:	e7dd      	b.n	800e2da <__mdiff+0xd6>
 800e31e:	3f01      	subs	r7, #1
 800e320:	e7e7      	b.n	800e2f2 <__mdiff+0xee>
 800e322:	bf00      	nop
 800e324:	0800f9dc 	.word	0x0800f9dc
 800e328:	0800f9ed 	.word	0x0800f9ed

0800e32c <__d2b>:
 800e32c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e330:	460f      	mov	r7, r1
 800e332:	2101      	movs	r1, #1
 800e334:	ec59 8b10 	vmov	r8, r9, d0
 800e338:	4616      	mov	r6, r2
 800e33a:	f7ff fccd 	bl	800dcd8 <_Balloc>
 800e33e:	4604      	mov	r4, r0
 800e340:	b930      	cbnz	r0, 800e350 <__d2b+0x24>
 800e342:	4602      	mov	r2, r0
 800e344:	4b23      	ldr	r3, [pc, #140]	@ (800e3d4 <__d2b+0xa8>)
 800e346:	4824      	ldr	r0, [pc, #144]	@ (800e3d8 <__d2b+0xac>)
 800e348:	f240 310f 	movw	r1, #783	@ 0x30f
 800e34c:	f000 fc4a 	bl	800ebe4 <__assert_func>
 800e350:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e354:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e358:	b10d      	cbz	r5, 800e35e <__d2b+0x32>
 800e35a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e35e:	9301      	str	r3, [sp, #4]
 800e360:	f1b8 0300 	subs.w	r3, r8, #0
 800e364:	d023      	beq.n	800e3ae <__d2b+0x82>
 800e366:	4668      	mov	r0, sp
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	f7ff fd7c 	bl	800de66 <__lo0bits>
 800e36e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e372:	b1d0      	cbz	r0, 800e3aa <__d2b+0x7e>
 800e374:	f1c0 0320 	rsb	r3, r0, #32
 800e378:	fa02 f303 	lsl.w	r3, r2, r3
 800e37c:	430b      	orrs	r3, r1
 800e37e:	40c2      	lsrs	r2, r0
 800e380:	6163      	str	r3, [r4, #20]
 800e382:	9201      	str	r2, [sp, #4]
 800e384:	9b01      	ldr	r3, [sp, #4]
 800e386:	61a3      	str	r3, [r4, #24]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	bf0c      	ite	eq
 800e38c:	2201      	moveq	r2, #1
 800e38e:	2202      	movne	r2, #2
 800e390:	6122      	str	r2, [r4, #16]
 800e392:	b1a5      	cbz	r5, 800e3be <__d2b+0x92>
 800e394:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e398:	4405      	add	r5, r0
 800e39a:	603d      	str	r5, [r7, #0]
 800e39c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e3a0:	6030      	str	r0, [r6, #0]
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	b003      	add	sp, #12
 800e3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3aa:	6161      	str	r1, [r4, #20]
 800e3ac:	e7ea      	b.n	800e384 <__d2b+0x58>
 800e3ae:	a801      	add	r0, sp, #4
 800e3b0:	f7ff fd59 	bl	800de66 <__lo0bits>
 800e3b4:	9b01      	ldr	r3, [sp, #4]
 800e3b6:	6163      	str	r3, [r4, #20]
 800e3b8:	3020      	adds	r0, #32
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	e7e8      	b.n	800e390 <__d2b+0x64>
 800e3be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e3c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e3c6:	6038      	str	r0, [r7, #0]
 800e3c8:	6918      	ldr	r0, [r3, #16]
 800e3ca:	f7ff fd2d 	bl	800de28 <__hi0bits>
 800e3ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e3d2:	e7e5      	b.n	800e3a0 <__d2b+0x74>
 800e3d4:	0800f9dc 	.word	0x0800f9dc
 800e3d8:	0800f9ed 	.word	0x0800f9ed

0800e3dc <__ssputs_r>:
 800e3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e0:	688e      	ldr	r6, [r1, #8]
 800e3e2:	461f      	mov	r7, r3
 800e3e4:	42be      	cmp	r6, r7
 800e3e6:	680b      	ldr	r3, [r1, #0]
 800e3e8:	4682      	mov	sl, r0
 800e3ea:	460c      	mov	r4, r1
 800e3ec:	4690      	mov	r8, r2
 800e3ee:	d82d      	bhi.n	800e44c <__ssputs_r+0x70>
 800e3f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e3f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e3f8:	d026      	beq.n	800e448 <__ssputs_r+0x6c>
 800e3fa:	6965      	ldr	r5, [r4, #20]
 800e3fc:	6909      	ldr	r1, [r1, #16]
 800e3fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e402:	eba3 0901 	sub.w	r9, r3, r1
 800e406:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e40a:	1c7b      	adds	r3, r7, #1
 800e40c:	444b      	add	r3, r9
 800e40e:	106d      	asrs	r5, r5, #1
 800e410:	429d      	cmp	r5, r3
 800e412:	bf38      	it	cc
 800e414:	461d      	movcc	r5, r3
 800e416:	0553      	lsls	r3, r2, #21
 800e418:	d527      	bpl.n	800e46a <__ssputs_r+0x8e>
 800e41a:	4629      	mov	r1, r5
 800e41c:	f7ff fbd0 	bl	800dbc0 <_malloc_r>
 800e420:	4606      	mov	r6, r0
 800e422:	b360      	cbz	r0, 800e47e <__ssputs_r+0xa2>
 800e424:	6921      	ldr	r1, [r4, #16]
 800e426:	464a      	mov	r2, r9
 800e428:	f7fe fcf9 	bl	800ce1e <memcpy>
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e436:	81a3      	strh	r3, [r4, #12]
 800e438:	6126      	str	r6, [r4, #16]
 800e43a:	6165      	str	r5, [r4, #20]
 800e43c:	444e      	add	r6, r9
 800e43e:	eba5 0509 	sub.w	r5, r5, r9
 800e442:	6026      	str	r6, [r4, #0]
 800e444:	60a5      	str	r5, [r4, #8]
 800e446:	463e      	mov	r6, r7
 800e448:	42be      	cmp	r6, r7
 800e44a:	d900      	bls.n	800e44e <__ssputs_r+0x72>
 800e44c:	463e      	mov	r6, r7
 800e44e:	6820      	ldr	r0, [r4, #0]
 800e450:	4632      	mov	r2, r6
 800e452:	4641      	mov	r1, r8
 800e454:	f000 fb9c 	bl	800eb90 <memmove>
 800e458:	68a3      	ldr	r3, [r4, #8]
 800e45a:	1b9b      	subs	r3, r3, r6
 800e45c:	60a3      	str	r3, [r4, #8]
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	4433      	add	r3, r6
 800e462:	6023      	str	r3, [r4, #0]
 800e464:	2000      	movs	r0, #0
 800e466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e46a:	462a      	mov	r2, r5
 800e46c:	f000 fbfe 	bl	800ec6c <_realloc_r>
 800e470:	4606      	mov	r6, r0
 800e472:	2800      	cmp	r0, #0
 800e474:	d1e0      	bne.n	800e438 <__ssputs_r+0x5c>
 800e476:	6921      	ldr	r1, [r4, #16]
 800e478:	4650      	mov	r0, sl
 800e47a:	f7ff fb2d 	bl	800dad8 <_free_r>
 800e47e:	230c      	movs	r3, #12
 800e480:	f8ca 3000 	str.w	r3, [sl]
 800e484:	89a3      	ldrh	r3, [r4, #12]
 800e486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e48a:	81a3      	strh	r3, [r4, #12]
 800e48c:	f04f 30ff 	mov.w	r0, #4294967295
 800e490:	e7e9      	b.n	800e466 <__ssputs_r+0x8a>
	...

0800e494 <_svfiprintf_r>:
 800e494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e498:	4698      	mov	r8, r3
 800e49a:	898b      	ldrh	r3, [r1, #12]
 800e49c:	061b      	lsls	r3, r3, #24
 800e49e:	b09d      	sub	sp, #116	@ 0x74
 800e4a0:	4607      	mov	r7, r0
 800e4a2:	460d      	mov	r5, r1
 800e4a4:	4614      	mov	r4, r2
 800e4a6:	d510      	bpl.n	800e4ca <_svfiprintf_r+0x36>
 800e4a8:	690b      	ldr	r3, [r1, #16]
 800e4aa:	b973      	cbnz	r3, 800e4ca <_svfiprintf_r+0x36>
 800e4ac:	2140      	movs	r1, #64	@ 0x40
 800e4ae:	f7ff fb87 	bl	800dbc0 <_malloc_r>
 800e4b2:	6028      	str	r0, [r5, #0]
 800e4b4:	6128      	str	r0, [r5, #16]
 800e4b6:	b930      	cbnz	r0, 800e4c6 <_svfiprintf_r+0x32>
 800e4b8:	230c      	movs	r3, #12
 800e4ba:	603b      	str	r3, [r7, #0]
 800e4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c0:	b01d      	add	sp, #116	@ 0x74
 800e4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c6:	2340      	movs	r3, #64	@ 0x40
 800e4c8:	616b      	str	r3, [r5, #20]
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4ce:	2320      	movs	r3, #32
 800e4d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e4d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4d8:	2330      	movs	r3, #48	@ 0x30
 800e4da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e678 <_svfiprintf_r+0x1e4>
 800e4de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4e2:	f04f 0901 	mov.w	r9, #1
 800e4e6:	4623      	mov	r3, r4
 800e4e8:	469a      	mov	sl, r3
 800e4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4ee:	b10a      	cbz	r2, 800e4f4 <_svfiprintf_r+0x60>
 800e4f0:	2a25      	cmp	r2, #37	@ 0x25
 800e4f2:	d1f9      	bne.n	800e4e8 <_svfiprintf_r+0x54>
 800e4f4:	ebba 0b04 	subs.w	fp, sl, r4
 800e4f8:	d00b      	beq.n	800e512 <_svfiprintf_r+0x7e>
 800e4fa:	465b      	mov	r3, fp
 800e4fc:	4622      	mov	r2, r4
 800e4fe:	4629      	mov	r1, r5
 800e500:	4638      	mov	r0, r7
 800e502:	f7ff ff6b 	bl	800e3dc <__ssputs_r>
 800e506:	3001      	adds	r0, #1
 800e508:	f000 80a7 	beq.w	800e65a <_svfiprintf_r+0x1c6>
 800e50c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e50e:	445a      	add	r2, fp
 800e510:	9209      	str	r2, [sp, #36]	@ 0x24
 800e512:	f89a 3000 	ldrb.w	r3, [sl]
 800e516:	2b00      	cmp	r3, #0
 800e518:	f000 809f 	beq.w	800e65a <_svfiprintf_r+0x1c6>
 800e51c:	2300      	movs	r3, #0
 800e51e:	f04f 32ff 	mov.w	r2, #4294967295
 800e522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e526:	f10a 0a01 	add.w	sl, sl, #1
 800e52a:	9304      	str	r3, [sp, #16]
 800e52c:	9307      	str	r3, [sp, #28]
 800e52e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e532:	931a      	str	r3, [sp, #104]	@ 0x68
 800e534:	4654      	mov	r4, sl
 800e536:	2205      	movs	r2, #5
 800e538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e53c:	484e      	ldr	r0, [pc, #312]	@ (800e678 <_svfiprintf_r+0x1e4>)
 800e53e:	f7f1 fe1f 	bl	8000180 <memchr>
 800e542:	9a04      	ldr	r2, [sp, #16]
 800e544:	b9d8      	cbnz	r0, 800e57e <_svfiprintf_r+0xea>
 800e546:	06d0      	lsls	r0, r2, #27
 800e548:	bf44      	itt	mi
 800e54a:	2320      	movmi	r3, #32
 800e54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e550:	0711      	lsls	r1, r2, #28
 800e552:	bf44      	itt	mi
 800e554:	232b      	movmi	r3, #43	@ 0x2b
 800e556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e55a:	f89a 3000 	ldrb.w	r3, [sl]
 800e55e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e560:	d015      	beq.n	800e58e <_svfiprintf_r+0xfa>
 800e562:	9a07      	ldr	r2, [sp, #28]
 800e564:	4654      	mov	r4, sl
 800e566:	2000      	movs	r0, #0
 800e568:	f04f 0c0a 	mov.w	ip, #10
 800e56c:	4621      	mov	r1, r4
 800e56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e572:	3b30      	subs	r3, #48	@ 0x30
 800e574:	2b09      	cmp	r3, #9
 800e576:	d94b      	bls.n	800e610 <_svfiprintf_r+0x17c>
 800e578:	b1b0      	cbz	r0, 800e5a8 <_svfiprintf_r+0x114>
 800e57a:	9207      	str	r2, [sp, #28]
 800e57c:	e014      	b.n	800e5a8 <_svfiprintf_r+0x114>
 800e57e:	eba0 0308 	sub.w	r3, r0, r8
 800e582:	fa09 f303 	lsl.w	r3, r9, r3
 800e586:	4313      	orrs	r3, r2
 800e588:	9304      	str	r3, [sp, #16]
 800e58a:	46a2      	mov	sl, r4
 800e58c:	e7d2      	b.n	800e534 <_svfiprintf_r+0xa0>
 800e58e:	9b03      	ldr	r3, [sp, #12]
 800e590:	1d19      	adds	r1, r3, #4
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	9103      	str	r1, [sp, #12]
 800e596:	2b00      	cmp	r3, #0
 800e598:	bfbb      	ittet	lt
 800e59a:	425b      	neglt	r3, r3
 800e59c:	f042 0202 	orrlt.w	r2, r2, #2
 800e5a0:	9307      	strge	r3, [sp, #28]
 800e5a2:	9307      	strlt	r3, [sp, #28]
 800e5a4:	bfb8      	it	lt
 800e5a6:	9204      	strlt	r2, [sp, #16]
 800e5a8:	7823      	ldrb	r3, [r4, #0]
 800e5aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5ac:	d10a      	bne.n	800e5c4 <_svfiprintf_r+0x130>
 800e5ae:	7863      	ldrb	r3, [r4, #1]
 800e5b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5b2:	d132      	bne.n	800e61a <_svfiprintf_r+0x186>
 800e5b4:	9b03      	ldr	r3, [sp, #12]
 800e5b6:	1d1a      	adds	r2, r3, #4
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	9203      	str	r2, [sp, #12]
 800e5bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5c0:	3402      	adds	r4, #2
 800e5c2:	9305      	str	r3, [sp, #20]
 800e5c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e688 <_svfiprintf_r+0x1f4>
 800e5c8:	7821      	ldrb	r1, [r4, #0]
 800e5ca:	2203      	movs	r2, #3
 800e5cc:	4650      	mov	r0, sl
 800e5ce:	f7f1 fdd7 	bl	8000180 <memchr>
 800e5d2:	b138      	cbz	r0, 800e5e4 <_svfiprintf_r+0x150>
 800e5d4:	9b04      	ldr	r3, [sp, #16]
 800e5d6:	eba0 000a 	sub.w	r0, r0, sl
 800e5da:	2240      	movs	r2, #64	@ 0x40
 800e5dc:	4082      	lsls	r2, r0
 800e5de:	4313      	orrs	r3, r2
 800e5e0:	3401      	adds	r4, #1
 800e5e2:	9304      	str	r3, [sp, #16]
 800e5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5e8:	4824      	ldr	r0, [pc, #144]	@ (800e67c <_svfiprintf_r+0x1e8>)
 800e5ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e5ee:	2206      	movs	r2, #6
 800e5f0:	f7f1 fdc6 	bl	8000180 <memchr>
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	d036      	beq.n	800e666 <_svfiprintf_r+0x1d2>
 800e5f8:	4b21      	ldr	r3, [pc, #132]	@ (800e680 <_svfiprintf_r+0x1ec>)
 800e5fa:	bb1b      	cbnz	r3, 800e644 <_svfiprintf_r+0x1b0>
 800e5fc:	9b03      	ldr	r3, [sp, #12]
 800e5fe:	3307      	adds	r3, #7
 800e600:	f023 0307 	bic.w	r3, r3, #7
 800e604:	3308      	adds	r3, #8
 800e606:	9303      	str	r3, [sp, #12]
 800e608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e60a:	4433      	add	r3, r6
 800e60c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e60e:	e76a      	b.n	800e4e6 <_svfiprintf_r+0x52>
 800e610:	fb0c 3202 	mla	r2, ip, r2, r3
 800e614:	460c      	mov	r4, r1
 800e616:	2001      	movs	r0, #1
 800e618:	e7a8      	b.n	800e56c <_svfiprintf_r+0xd8>
 800e61a:	2300      	movs	r3, #0
 800e61c:	3401      	adds	r4, #1
 800e61e:	9305      	str	r3, [sp, #20]
 800e620:	4619      	mov	r1, r3
 800e622:	f04f 0c0a 	mov.w	ip, #10
 800e626:	4620      	mov	r0, r4
 800e628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e62c:	3a30      	subs	r2, #48	@ 0x30
 800e62e:	2a09      	cmp	r2, #9
 800e630:	d903      	bls.n	800e63a <_svfiprintf_r+0x1a6>
 800e632:	2b00      	cmp	r3, #0
 800e634:	d0c6      	beq.n	800e5c4 <_svfiprintf_r+0x130>
 800e636:	9105      	str	r1, [sp, #20]
 800e638:	e7c4      	b.n	800e5c4 <_svfiprintf_r+0x130>
 800e63a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e63e:	4604      	mov	r4, r0
 800e640:	2301      	movs	r3, #1
 800e642:	e7f0      	b.n	800e626 <_svfiprintf_r+0x192>
 800e644:	ab03      	add	r3, sp, #12
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	462a      	mov	r2, r5
 800e64a:	4b0e      	ldr	r3, [pc, #56]	@ (800e684 <_svfiprintf_r+0x1f0>)
 800e64c:	a904      	add	r1, sp, #16
 800e64e:	4638      	mov	r0, r7
 800e650:	f7fd fe74 	bl	800c33c <_printf_float>
 800e654:	1c42      	adds	r2, r0, #1
 800e656:	4606      	mov	r6, r0
 800e658:	d1d6      	bne.n	800e608 <_svfiprintf_r+0x174>
 800e65a:	89ab      	ldrh	r3, [r5, #12]
 800e65c:	065b      	lsls	r3, r3, #25
 800e65e:	f53f af2d 	bmi.w	800e4bc <_svfiprintf_r+0x28>
 800e662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e664:	e72c      	b.n	800e4c0 <_svfiprintf_r+0x2c>
 800e666:	ab03      	add	r3, sp, #12
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	462a      	mov	r2, r5
 800e66c:	4b05      	ldr	r3, [pc, #20]	@ (800e684 <_svfiprintf_r+0x1f0>)
 800e66e:	a904      	add	r1, sp, #16
 800e670:	4638      	mov	r0, r7
 800e672:	f7fe f8fb 	bl	800c86c <_printf_i>
 800e676:	e7ed      	b.n	800e654 <_svfiprintf_r+0x1c0>
 800e678:	0800fb48 	.word	0x0800fb48
 800e67c:	0800fb52 	.word	0x0800fb52
 800e680:	0800c33d 	.word	0x0800c33d
 800e684:	0800e3dd 	.word	0x0800e3dd
 800e688:	0800fb4e 	.word	0x0800fb4e

0800e68c <__sfputc_r>:
 800e68c:	6893      	ldr	r3, [r2, #8]
 800e68e:	3b01      	subs	r3, #1
 800e690:	2b00      	cmp	r3, #0
 800e692:	b410      	push	{r4}
 800e694:	6093      	str	r3, [r2, #8]
 800e696:	da08      	bge.n	800e6aa <__sfputc_r+0x1e>
 800e698:	6994      	ldr	r4, [r2, #24]
 800e69a:	42a3      	cmp	r3, r4
 800e69c:	db01      	blt.n	800e6a2 <__sfputc_r+0x16>
 800e69e:	290a      	cmp	r1, #10
 800e6a0:	d103      	bne.n	800e6aa <__sfputc_r+0x1e>
 800e6a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6a6:	f000 b9df 	b.w	800ea68 <__swbuf_r>
 800e6aa:	6813      	ldr	r3, [r2, #0]
 800e6ac:	1c58      	adds	r0, r3, #1
 800e6ae:	6010      	str	r0, [r2, #0]
 800e6b0:	7019      	strb	r1, [r3, #0]
 800e6b2:	4608      	mov	r0, r1
 800e6b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <__sfputs_r>:
 800e6ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6bc:	4606      	mov	r6, r0
 800e6be:	460f      	mov	r7, r1
 800e6c0:	4614      	mov	r4, r2
 800e6c2:	18d5      	adds	r5, r2, r3
 800e6c4:	42ac      	cmp	r4, r5
 800e6c6:	d101      	bne.n	800e6cc <__sfputs_r+0x12>
 800e6c8:	2000      	movs	r0, #0
 800e6ca:	e007      	b.n	800e6dc <__sfputs_r+0x22>
 800e6cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6d0:	463a      	mov	r2, r7
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	f7ff ffda 	bl	800e68c <__sfputc_r>
 800e6d8:	1c43      	adds	r3, r0, #1
 800e6da:	d1f3      	bne.n	800e6c4 <__sfputs_r+0xa>
 800e6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e6e0 <_vfiprintf_r>:
 800e6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e4:	460d      	mov	r5, r1
 800e6e6:	b09d      	sub	sp, #116	@ 0x74
 800e6e8:	4614      	mov	r4, r2
 800e6ea:	4698      	mov	r8, r3
 800e6ec:	4606      	mov	r6, r0
 800e6ee:	b118      	cbz	r0, 800e6f8 <_vfiprintf_r+0x18>
 800e6f0:	6a03      	ldr	r3, [r0, #32]
 800e6f2:	b90b      	cbnz	r3, 800e6f8 <_vfiprintf_r+0x18>
 800e6f4:	f7fe fa66 	bl	800cbc4 <__sinit>
 800e6f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e6fa:	07d9      	lsls	r1, r3, #31
 800e6fc:	d405      	bmi.n	800e70a <_vfiprintf_r+0x2a>
 800e6fe:	89ab      	ldrh	r3, [r5, #12]
 800e700:	059a      	lsls	r2, r3, #22
 800e702:	d402      	bmi.n	800e70a <_vfiprintf_r+0x2a>
 800e704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e706:	f7fe fb88 	bl	800ce1a <__retarget_lock_acquire_recursive>
 800e70a:	89ab      	ldrh	r3, [r5, #12]
 800e70c:	071b      	lsls	r3, r3, #28
 800e70e:	d501      	bpl.n	800e714 <_vfiprintf_r+0x34>
 800e710:	692b      	ldr	r3, [r5, #16]
 800e712:	b99b      	cbnz	r3, 800e73c <_vfiprintf_r+0x5c>
 800e714:	4629      	mov	r1, r5
 800e716:	4630      	mov	r0, r6
 800e718:	f000 f9e4 	bl	800eae4 <__swsetup_r>
 800e71c:	b170      	cbz	r0, 800e73c <_vfiprintf_r+0x5c>
 800e71e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e720:	07dc      	lsls	r4, r3, #31
 800e722:	d504      	bpl.n	800e72e <_vfiprintf_r+0x4e>
 800e724:	f04f 30ff 	mov.w	r0, #4294967295
 800e728:	b01d      	add	sp, #116	@ 0x74
 800e72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72e:	89ab      	ldrh	r3, [r5, #12]
 800e730:	0598      	lsls	r0, r3, #22
 800e732:	d4f7      	bmi.n	800e724 <_vfiprintf_r+0x44>
 800e734:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e736:	f7fe fb71 	bl	800ce1c <__retarget_lock_release_recursive>
 800e73a:	e7f3      	b.n	800e724 <_vfiprintf_r+0x44>
 800e73c:	2300      	movs	r3, #0
 800e73e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e740:	2320      	movs	r3, #32
 800e742:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e746:	f8cd 800c 	str.w	r8, [sp, #12]
 800e74a:	2330      	movs	r3, #48	@ 0x30
 800e74c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e8fc <_vfiprintf_r+0x21c>
 800e750:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e754:	f04f 0901 	mov.w	r9, #1
 800e758:	4623      	mov	r3, r4
 800e75a:	469a      	mov	sl, r3
 800e75c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e760:	b10a      	cbz	r2, 800e766 <_vfiprintf_r+0x86>
 800e762:	2a25      	cmp	r2, #37	@ 0x25
 800e764:	d1f9      	bne.n	800e75a <_vfiprintf_r+0x7a>
 800e766:	ebba 0b04 	subs.w	fp, sl, r4
 800e76a:	d00b      	beq.n	800e784 <_vfiprintf_r+0xa4>
 800e76c:	465b      	mov	r3, fp
 800e76e:	4622      	mov	r2, r4
 800e770:	4629      	mov	r1, r5
 800e772:	4630      	mov	r0, r6
 800e774:	f7ff ffa1 	bl	800e6ba <__sfputs_r>
 800e778:	3001      	adds	r0, #1
 800e77a:	f000 80a7 	beq.w	800e8cc <_vfiprintf_r+0x1ec>
 800e77e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e780:	445a      	add	r2, fp
 800e782:	9209      	str	r2, [sp, #36]	@ 0x24
 800e784:	f89a 3000 	ldrb.w	r3, [sl]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f000 809f 	beq.w	800e8cc <_vfiprintf_r+0x1ec>
 800e78e:	2300      	movs	r3, #0
 800e790:	f04f 32ff 	mov.w	r2, #4294967295
 800e794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e798:	f10a 0a01 	add.w	sl, sl, #1
 800e79c:	9304      	str	r3, [sp, #16]
 800e79e:	9307      	str	r3, [sp, #28]
 800e7a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e7a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e7a6:	4654      	mov	r4, sl
 800e7a8:	2205      	movs	r2, #5
 800e7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ae:	4853      	ldr	r0, [pc, #332]	@ (800e8fc <_vfiprintf_r+0x21c>)
 800e7b0:	f7f1 fce6 	bl	8000180 <memchr>
 800e7b4:	9a04      	ldr	r2, [sp, #16]
 800e7b6:	b9d8      	cbnz	r0, 800e7f0 <_vfiprintf_r+0x110>
 800e7b8:	06d1      	lsls	r1, r2, #27
 800e7ba:	bf44      	itt	mi
 800e7bc:	2320      	movmi	r3, #32
 800e7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7c2:	0713      	lsls	r3, r2, #28
 800e7c4:	bf44      	itt	mi
 800e7c6:	232b      	movmi	r3, #43	@ 0x2b
 800e7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800e7d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7d2:	d015      	beq.n	800e800 <_vfiprintf_r+0x120>
 800e7d4:	9a07      	ldr	r2, [sp, #28]
 800e7d6:	4654      	mov	r4, sl
 800e7d8:	2000      	movs	r0, #0
 800e7da:	f04f 0c0a 	mov.w	ip, #10
 800e7de:	4621      	mov	r1, r4
 800e7e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7e4:	3b30      	subs	r3, #48	@ 0x30
 800e7e6:	2b09      	cmp	r3, #9
 800e7e8:	d94b      	bls.n	800e882 <_vfiprintf_r+0x1a2>
 800e7ea:	b1b0      	cbz	r0, 800e81a <_vfiprintf_r+0x13a>
 800e7ec:	9207      	str	r2, [sp, #28]
 800e7ee:	e014      	b.n	800e81a <_vfiprintf_r+0x13a>
 800e7f0:	eba0 0308 	sub.w	r3, r0, r8
 800e7f4:	fa09 f303 	lsl.w	r3, r9, r3
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	9304      	str	r3, [sp, #16]
 800e7fc:	46a2      	mov	sl, r4
 800e7fe:	e7d2      	b.n	800e7a6 <_vfiprintf_r+0xc6>
 800e800:	9b03      	ldr	r3, [sp, #12]
 800e802:	1d19      	adds	r1, r3, #4
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	9103      	str	r1, [sp, #12]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	bfbb      	ittet	lt
 800e80c:	425b      	neglt	r3, r3
 800e80e:	f042 0202 	orrlt.w	r2, r2, #2
 800e812:	9307      	strge	r3, [sp, #28]
 800e814:	9307      	strlt	r3, [sp, #28]
 800e816:	bfb8      	it	lt
 800e818:	9204      	strlt	r2, [sp, #16]
 800e81a:	7823      	ldrb	r3, [r4, #0]
 800e81c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e81e:	d10a      	bne.n	800e836 <_vfiprintf_r+0x156>
 800e820:	7863      	ldrb	r3, [r4, #1]
 800e822:	2b2a      	cmp	r3, #42	@ 0x2a
 800e824:	d132      	bne.n	800e88c <_vfiprintf_r+0x1ac>
 800e826:	9b03      	ldr	r3, [sp, #12]
 800e828:	1d1a      	adds	r2, r3, #4
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	9203      	str	r2, [sp, #12]
 800e82e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e832:	3402      	adds	r4, #2
 800e834:	9305      	str	r3, [sp, #20]
 800e836:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e90c <_vfiprintf_r+0x22c>
 800e83a:	7821      	ldrb	r1, [r4, #0]
 800e83c:	2203      	movs	r2, #3
 800e83e:	4650      	mov	r0, sl
 800e840:	f7f1 fc9e 	bl	8000180 <memchr>
 800e844:	b138      	cbz	r0, 800e856 <_vfiprintf_r+0x176>
 800e846:	9b04      	ldr	r3, [sp, #16]
 800e848:	eba0 000a 	sub.w	r0, r0, sl
 800e84c:	2240      	movs	r2, #64	@ 0x40
 800e84e:	4082      	lsls	r2, r0
 800e850:	4313      	orrs	r3, r2
 800e852:	3401      	adds	r4, #1
 800e854:	9304      	str	r3, [sp, #16]
 800e856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e85a:	4829      	ldr	r0, [pc, #164]	@ (800e900 <_vfiprintf_r+0x220>)
 800e85c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e860:	2206      	movs	r2, #6
 800e862:	f7f1 fc8d 	bl	8000180 <memchr>
 800e866:	2800      	cmp	r0, #0
 800e868:	d03f      	beq.n	800e8ea <_vfiprintf_r+0x20a>
 800e86a:	4b26      	ldr	r3, [pc, #152]	@ (800e904 <_vfiprintf_r+0x224>)
 800e86c:	bb1b      	cbnz	r3, 800e8b6 <_vfiprintf_r+0x1d6>
 800e86e:	9b03      	ldr	r3, [sp, #12]
 800e870:	3307      	adds	r3, #7
 800e872:	f023 0307 	bic.w	r3, r3, #7
 800e876:	3308      	adds	r3, #8
 800e878:	9303      	str	r3, [sp, #12]
 800e87a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e87c:	443b      	add	r3, r7
 800e87e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e880:	e76a      	b.n	800e758 <_vfiprintf_r+0x78>
 800e882:	fb0c 3202 	mla	r2, ip, r2, r3
 800e886:	460c      	mov	r4, r1
 800e888:	2001      	movs	r0, #1
 800e88a:	e7a8      	b.n	800e7de <_vfiprintf_r+0xfe>
 800e88c:	2300      	movs	r3, #0
 800e88e:	3401      	adds	r4, #1
 800e890:	9305      	str	r3, [sp, #20]
 800e892:	4619      	mov	r1, r3
 800e894:	f04f 0c0a 	mov.w	ip, #10
 800e898:	4620      	mov	r0, r4
 800e89a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e89e:	3a30      	subs	r2, #48	@ 0x30
 800e8a0:	2a09      	cmp	r2, #9
 800e8a2:	d903      	bls.n	800e8ac <_vfiprintf_r+0x1cc>
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d0c6      	beq.n	800e836 <_vfiprintf_r+0x156>
 800e8a8:	9105      	str	r1, [sp, #20]
 800e8aa:	e7c4      	b.n	800e836 <_vfiprintf_r+0x156>
 800e8ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e7f0      	b.n	800e898 <_vfiprintf_r+0x1b8>
 800e8b6:	ab03      	add	r3, sp, #12
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	462a      	mov	r2, r5
 800e8bc:	4b12      	ldr	r3, [pc, #72]	@ (800e908 <_vfiprintf_r+0x228>)
 800e8be:	a904      	add	r1, sp, #16
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	f7fd fd3b 	bl	800c33c <_printf_float>
 800e8c6:	4607      	mov	r7, r0
 800e8c8:	1c78      	adds	r0, r7, #1
 800e8ca:	d1d6      	bne.n	800e87a <_vfiprintf_r+0x19a>
 800e8cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8ce:	07d9      	lsls	r1, r3, #31
 800e8d0:	d405      	bmi.n	800e8de <_vfiprintf_r+0x1fe>
 800e8d2:	89ab      	ldrh	r3, [r5, #12]
 800e8d4:	059a      	lsls	r2, r3, #22
 800e8d6:	d402      	bmi.n	800e8de <_vfiprintf_r+0x1fe>
 800e8d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8da:	f7fe fa9f 	bl	800ce1c <__retarget_lock_release_recursive>
 800e8de:	89ab      	ldrh	r3, [r5, #12]
 800e8e0:	065b      	lsls	r3, r3, #25
 800e8e2:	f53f af1f 	bmi.w	800e724 <_vfiprintf_r+0x44>
 800e8e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8e8:	e71e      	b.n	800e728 <_vfiprintf_r+0x48>
 800e8ea:	ab03      	add	r3, sp, #12
 800e8ec:	9300      	str	r3, [sp, #0]
 800e8ee:	462a      	mov	r2, r5
 800e8f0:	4b05      	ldr	r3, [pc, #20]	@ (800e908 <_vfiprintf_r+0x228>)
 800e8f2:	a904      	add	r1, sp, #16
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	f7fd ffb9 	bl	800c86c <_printf_i>
 800e8fa:	e7e4      	b.n	800e8c6 <_vfiprintf_r+0x1e6>
 800e8fc:	0800fb48 	.word	0x0800fb48
 800e900:	0800fb52 	.word	0x0800fb52
 800e904:	0800c33d 	.word	0x0800c33d
 800e908:	0800e6bb 	.word	0x0800e6bb
 800e90c:	0800fb4e 	.word	0x0800fb4e

0800e910 <__sflush_r>:
 800e910:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e918:	0716      	lsls	r6, r2, #28
 800e91a:	4605      	mov	r5, r0
 800e91c:	460c      	mov	r4, r1
 800e91e:	d454      	bmi.n	800e9ca <__sflush_r+0xba>
 800e920:	684b      	ldr	r3, [r1, #4]
 800e922:	2b00      	cmp	r3, #0
 800e924:	dc02      	bgt.n	800e92c <__sflush_r+0x1c>
 800e926:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e928:	2b00      	cmp	r3, #0
 800e92a:	dd48      	ble.n	800e9be <__sflush_r+0xae>
 800e92c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e92e:	2e00      	cmp	r6, #0
 800e930:	d045      	beq.n	800e9be <__sflush_r+0xae>
 800e932:	2300      	movs	r3, #0
 800e934:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e938:	682f      	ldr	r7, [r5, #0]
 800e93a:	6a21      	ldr	r1, [r4, #32]
 800e93c:	602b      	str	r3, [r5, #0]
 800e93e:	d030      	beq.n	800e9a2 <__sflush_r+0x92>
 800e940:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e942:	89a3      	ldrh	r3, [r4, #12]
 800e944:	0759      	lsls	r1, r3, #29
 800e946:	d505      	bpl.n	800e954 <__sflush_r+0x44>
 800e948:	6863      	ldr	r3, [r4, #4]
 800e94a:	1ad2      	subs	r2, r2, r3
 800e94c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e94e:	b10b      	cbz	r3, 800e954 <__sflush_r+0x44>
 800e950:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e952:	1ad2      	subs	r2, r2, r3
 800e954:	2300      	movs	r3, #0
 800e956:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e958:	6a21      	ldr	r1, [r4, #32]
 800e95a:	4628      	mov	r0, r5
 800e95c:	47b0      	blx	r6
 800e95e:	1c43      	adds	r3, r0, #1
 800e960:	89a3      	ldrh	r3, [r4, #12]
 800e962:	d106      	bne.n	800e972 <__sflush_r+0x62>
 800e964:	6829      	ldr	r1, [r5, #0]
 800e966:	291d      	cmp	r1, #29
 800e968:	d82b      	bhi.n	800e9c2 <__sflush_r+0xb2>
 800e96a:	4a2a      	ldr	r2, [pc, #168]	@ (800ea14 <__sflush_r+0x104>)
 800e96c:	410a      	asrs	r2, r1
 800e96e:	07d6      	lsls	r6, r2, #31
 800e970:	d427      	bmi.n	800e9c2 <__sflush_r+0xb2>
 800e972:	2200      	movs	r2, #0
 800e974:	6062      	str	r2, [r4, #4]
 800e976:	04d9      	lsls	r1, r3, #19
 800e978:	6922      	ldr	r2, [r4, #16]
 800e97a:	6022      	str	r2, [r4, #0]
 800e97c:	d504      	bpl.n	800e988 <__sflush_r+0x78>
 800e97e:	1c42      	adds	r2, r0, #1
 800e980:	d101      	bne.n	800e986 <__sflush_r+0x76>
 800e982:	682b      	ldr	r3, [r5, #0]
 800e984:	b903      	cbnz	r3, 800e988 <__sflush_r+0x78>
 800e986:	6560      	str	r0, [r4, #84]	@ 0x54
 800e988:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e98a:	602f      	str	r7, [r5, #0]
 800e98c:	b1b9      	cbz	r1, 800e9be <__sflush_r+0xae>
 800e98e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e992:	4299      	cmp	r1, r3
 800e994:	d002      	beq.n	800e99c <__sflush_r+0x8c>
 800e996:	4628      	mov	r0, r5
 800e998:	f7ff f89e 	bl	800dad8 <_free_r>
 800e99c:	2300      	movs	r3, #0
 800e99e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e9a0:	e00d      	b.n	800e9be <__sflush_r+0xae>
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	4628      	mov	r0, r5
 800e9a6:	47b0      	blx	r6
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	1c50      	adds	r0, r2, #1
 800e9ac:	d1c9      	bne.n	800e942 <__sflush_r+0x32>
 800e9ae:	682b      	ldr	r3, [r5, #0]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d0c6      	beq.n	800e942 <__sflush_r+0x32>
 800e9b4:	2b1d      	cmp	r3, #29
 800e9b6:	d001      	beq.n	800e9bc <__sflush_r+0xac>
 800e9b8:	2b16      	cmp	r3, #22
 800e9ba:	d11e      	bne.n	800e9fa <__sflush_r+0xea>
 800e9bc:	602f      	str	r7, [r5, #0]
 800e9be:	2000      	movs	r0, #0
 800e9c0:	e022      	b.n	800ea08 <__sflush_r+0xf8>
 800e9c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9c6:	b21b      	sxth	r3, r3
 800e9c8:	e01b      	b.n	800ea02 <__sflush_r+0xf2>
 800e9ca:	690f      	ldr	r7, [r1, #16]
 800e9cc:	2f00      	cmp	r7, #0
 800e9ce:	d0f6      	beq.n	800e9be <__sflush_r+0xae>
 800e9d0:	0793      	lsls	r3, r2, #30
 800e9d2:	680e      	ldr	r6, [r1, #0]
 800e9d4:	bf08      	it	eq
 800e9d6:	694b      	ldreq	r3, [r1, #20]
 800e9d8:	600f      	str	r7, [r1, #0]
 800e9da:	bf18      	it	ne
 800e9dc:	2300      	movne	r3, #0
 800e9de:	eba6 0807 	sub.w	r8, r6, r7
 800e9e2:	608b      	str	r3, [r1, #8]
 800e9e4:	f1b8 0f00 	cmp.w	r8, #0
 800e9e8:	dde9      	ble.n	800e9be <__sflush_r+0xae>
 800e9ea:	6a21      	ldr	r1, [r4, #32]
 800e9ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e9ee:	4643      	mov	r3, r8
 800e9f0:	463a      	mov	r2, r7
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	47b0      	blx	r6
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	dc08      	bgt.n	800ea0c <__sflush_r+0xfc>
 800e9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea02:	81a3      	strh	r3, [r4, #12]
 800ea04:	f04f 30ff 	mov.w	r0, #4294967295
 800ea08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea0c:	4407      	add	r7, r0
 800ea0e:	eba8 0800 	sub.w	r8, r8, r0
 800ea12:	e7e7      	b.n	800e9e4 <__sflush_r+0xd4>
 800ea14:	dfbffffe 	.word	0xdfbffffe

0800ea18 <_fflush_r>:
 800ea18:	b538      	push	{r3, r4, r5, lr}
 800ea1a:	690b      	ldr	r3, [r1, #16]
 800ea1c:	4605      	mov	r5, r0
 800ea1e:	460c      	mov	r4, r1
 800ea20:	b913      	cbnz	r3, 800ea28 <_fflush_r+0x10>
 800ea22:	2500      	movs	r5, #0
 800ea24:	4628      	mov	r0, r5
 800ea26:	bd38      	pop	{r3, r4, r5, pc}
 800ea28:	b118      	cbz	r0, 800ea32 <_fflush_r+0x1a>
 800ea2a:	6a03      	ldr	r3, [r0, #32]
 800ea2c:	b90b      	cbnz	r3, 800ea32 <_fflush_r+0x1a>
 800ea2e:	f7fe f8c9 	bl	800cbc4 <__sinit>
 800ea32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d0f3      	beq.n	800ea22 <_fflush_r+0xa>
 800ea3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ea3c:	07d0      	lsls	r0, r2, #31
 800ea3e:	d404      	bmi.n	800ea4a <_fflush_r+0x32>
 800ea40:	0599      	lsls	r1, r3, #22
 800ea42:	d402      	bmi.n	800ea4a <_fflush_r+0x32>
 800ea44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea46:	f7fe f9e8 	bl	800ce1a <__retarget_lock_acquire_recursive>
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	4621      	mov	r1, r4
 800ea4e:	f7ff ff5f 	bl	800e910 <__sflush_r>
 800ea52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea54:	07da      	lsls	r2, r3, #31
 800ea56:	4605      	mov	r5, r0
 800ea58:	d4e4      	bmi.n	800ea24 <_fflush_r+0xc>
 800ea5a:	89a3      	ldrh	r3, [r4, #12]
 800ea5c:	059b      	lsls	r3, r3, #22
 800ea5e:	d4e1      	bmi.n	800ea24 <_fflush_r+0xc>
 800ea60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea62:	f7fe f9db 	bl	800ce1c <__retarget_lock_release_recursive>
 800ea66:	e7dd      	b.n	800ea24 <_fflush_r+0xc>

0800ea68 <__swbuf_r>:
 800ea68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea6a:	460e      	mov	r6, r1
 800ea6c:	4614      	mov	r4, r2
 800ea6e:	4605      	mov	r5, r0
 800ea70:	b118      	cbz	r0, 800ea7a <__swbuf_r+0x12>
 800ea72:	6a03      	ldr	r3, [r0, #32]
 800ea74:	b90b      	cbnz	r3, 800ea7a <__swbuf_r+0x12>
 800ea76:	f7fe f8a5 	bl	800cbc4 <__sinit>
 800ea7a:	69a3      	ldr	r3, [r4, #24]
 800ea7c:	60a3      	str	r3, [r4, #8]
 800ea7e:	89a3      	ldrh	r3, [r4, #12]
 800ea80:	071a      	lsls	r2, r3, #28
 800ea82:	d501      	bpl.n	800ea88 <__swbuf_r+0x20>
 800ea84:	6923      	ldr	r3, [r4, #16]
 800ea86:	b943      	cbnz	r3, 800ea9a <__swbuf_r+0x32>
 800ea88:	4621      	mov	r1, r4
 800ea8a:	4628      	mov	r0, r5
 800ea8c:	f000 f82a 	bl	800eae4 <__swsetup_r>
 800ea90:	b118      	cbz	r0, 800ea9a <__swbuf_r+0x32>
 800ea92:	f04f 37ff 	mov.w	r7, #4294967295
 800ea96:	4638      	mov	r0, r7
 800ea98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea9a:	6823      	ldr	r3, [r4, #0]
 800ea9c:	6922      	ldr	r2, [r4, #16]
 800ea9e:	1a98      	subs	r0, r3, r2
 800eaa0:	6963      	ldr	r3, [r4, #20]
 800eaa2:	b2f6      	uxtb	r6, r6
 800eaa4:	4283      	cmp	r3, r0
 800eaa6:	4637      	mov	r7, r6
 800eaa8:	dc05      	bgt.n	800eab6 <__swbuf_r+0x4e>
 800eaaa:	4621      	mov	r1, r4
 800eaac:	4628      	mov	r0, r5
 800eaae:	f7ff ffb3 	bl	800ea18 <_fflush_r>
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d1ed      	bne.n	800ea92 <__swbuf_r+0x2a>
 800eab6:	68a3      	ldr	r3, [r4, #8]
 800eab8:	3b01      	subs	r3, #1
 800eaba:	60a3      	str	r3, [r4, #8]
 800eabc:	6823      	ldr	r3, [r4, #0]
 800eabe:	1c5a      	adds	r2, r3, #1
 800eac0:	6022      	str	r2, [r4, #0]
 800eac2:	701e      	strb	r6, [r3, #0]
 800eac4:	6962      	ldr	r2, [r4, #20]
 800eac6:	1c43      	adds	r3, r0, #1
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d004      	beq.n	800ead6 <__swbuf_r+0x6e>
 800eacc:	89a3      	ldrh	r3, [r4, #12]
 800eace:	07db      	lsls	r3, r3, #31
 800ead0:	d5e1      	bpl.n	800ea96 <__swbuf_r+0x2e>
 800ead2:	2e0a      	cmp	r6, #10
 800ead4:	d1df      	bne.n	800ea96 <__swbuf_r+0x2e>
 800ead6:	4621      	mov	r1, r4
 800ead8:	4628      	mov	r0, r5
 800eada:	f7ff ff9d 	bl	800ea18 <_fflush_r>
 800eade:	2800      	cmp	r0, #0
 800eae0:	d0d9      	beq.n	800ea96 <__swbuf_r+0x2e>
 800eae2:	e7d6      	b.n	800ea92 <__swbuf_r+0x2a>

0800eae4 <__swsetup_r>:
 800eae4:	b538      	push	{r3, r4, r5, lr}
 800eae6:	4b29      	ldr	r3, [pc, #164]	@ (800eb8c <__swsetup_r+0xa8>)
 800eae8:	4605      	mov	r5, r0
 800eaea:	6818      	ldr	r0, [r3, #0]
 800eaec:	460c      	mov	r4, r1
 800eaee:	b118      	cbz	r0, 800eaf8 <__swsetup_r+0x14>
 800eaf0:	6a03      	ldr	r3, [r0, #32]
 800eaf2:	b90b      	cbnz	r3, 800eaf8 <__swsetup_r+0x14>
 800eaf4:	f7fe f866 	bl	800cbc4 <__sinit>
 800eaf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eafc:	0719      	lsls	r1, r3, #28
 800eafe:	d422      	bmi.n	800eb46 <__swsetup_r+0x62>
 800eb00:	06da      	lsls	r2, r3, #27
 800eb02:	d407      	bmi.n	800eb14 <__swsetup_r+0x30>
 800eb04:	2209      	movs	r2, #9
 800eb06:	602a      	str	r2, [r5, #0]
 800eb08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb0c:	81a3      	strh	r3, [r4, #12]
 800eb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb12:	e033      	b.n	800eb7c <__swsetup_r+0x98>
 800eb14:	0758      	lsls	r0, r3, #29
 800eb16:	d512      	bpl.n	800eb3e <__swsetup_r+0x5a>
 800eb18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb1a:	b141      	cbz	r1, 800eb2e <__swsetup_r+0x4a>
 800eb1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb20:	4299      	cmp	r1, r3
 800eb22:	d002      	beq.n	800eb2a <__swsetup_r+0x46>
 800eb24:	4628      	mov	r0, r5
 800eb26:	f7fe ffd7 	bl	800dad8 <_free_r>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb2e:	89a3      	ldrh	r3, [r4, #12]
 800eb30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eb34:	81a3      	strh	r3, [r4, #12]
 800eb36:	2300      	movs	r3, #0
 800eb38:	6063      	str	r3, [r4, #4]
 800eb3a:	6923      	ldr	r3, [r4, #16]
 800eb3c:	6023      	str	r3, [r4, #0]
 800eb3e:	89a3      	ldrh	r3, [r4, #12]
 800eb40:	f043 0308 	orr.w	r3, r3, #8
 800eb44:	81a3      	strh	r3, [r4, #12]
 800eb46:	6923      	ldr	r3, [r4, #16]
 800eb48:	b94b      	cbnz	r3, 800eb5e <__swsetup_r+0x7a>
 800eb4a:	89a3      	ldrh	r3, [r4, #12]
 800eb4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eb50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb54:	d003      	beq.n	800eb5e <__swsetup_r+0x7a>
 800eb56:	4621      	mov	r1, r4
 800eb58:	4628      	mov	r0, r5
 800eb5a:	f000 f8fb 	bl	800ed54 <__smakebuf_r>
 800eb5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb62:	f013 0201 	ands.w	r2, r3, #1
 800eb66:	d00a      	beq.n	800eb7e <__swsetup_r+0x9a>
 800eb68:	2200      	movs	r2, #0
 800eb6a:	60a2      	str	r2, [r4, #8]
 800eb6c:	6962      	ldr	r2, [r4, #20]
 800eb6e:	4252      	negs	r2, r2
 800eb70:	61a2      	str	r2, [r4, #24]
 800eb72:	6922      	ldr	r2, [r4, #16]
 800eb74:	b942      	cbnz	r2, 800eb88 <__swsetup_r+0xa4>
 800eb76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eb7a:	d1c5      	bne.n	800eb08 <__swsetup_r+0x24>
 800eb7c:	bd38      	pop	{r3, r4, r5, pc}
 800eb7e:	0799      	lsls	r1, r3, #30
 800eb80:	bf58      	it	pl
 800eb82:	6962      	ldrpl	r2, [r4, #20]
 800eb84:	60a2      	str	r2, [r4, #8]
 800eb86:	e7f4      	b.n	800eb72 <__swsetup_r+0x8e>
 800eb88:	2000      	movs	r0, #0
 800eb8a:	e7f7      	b.n	800eb7c <__swsetup_r+0x98>
 800eb8c:	20000044 	.word	0x20000044

0800eb90 <memmove>:
 800eb90:	4288      	cmp	r0, r1
 800eb92:	b510      	push	{r4, lr}
 800eb94:	eb01 0402 	add.w	r4, r1, r2
 800eb98:	d902      	bls.n	800eba0 <memmove+0x10>
 800eb9a:	4284      	cmp	r4, r0
 800eb9c:	4623      	mov	r3, r4
 800eb9e:	d807      	bhi.n	800ebb0 <memmove+0x20>
 800eba0:	1e43      	subs	r3, r0, #1
 800eba2:	42a1      	cmp	r1, r4
 800eba4:	d008      	beq.n	800ebb8 <memmove+0x28>
 800eba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebae:	e7f8      	b.n	800eba2 <memmove+0x12>
 800ebb0:	4402      	add	r2, r0
 800ebb2:	4601      	mov	r1, r0
 800ebb4:	428a      	cmp	r2, r1
 800ebb6:	d100      	bne.n	800ebba <memmove+0x2a>
 800ebb8:	bd10      	pop	{r4, pc}
 800ebba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebc2:	e7f7      	b.n	800ebb4 <memmove+0x24>

0800ebc4 <_sbrk_r>:
 800ebc4:	b538      	push	{r3, r4, r5, lr}
 800ebc6:	4d06      	ldr	r5, [pc, #24]	@ (800ebe0 <_sbrk_r+0x1c>)
 800ebc8:	2300      	movs	r3, #0
 800ebca:	4604      	mov	r4, r0
 800ebcc:	4608      	mov	r0, r1
 800ebce:	602b      	str	r3, [r5, #0]
 800ebd0:	f7f4 fc4c 	bl	800346c <_sbrk>
 800ebd4:	1c43      	adds	r3, r0, #1
 800ebd6:	d102      	bne.n	800ebde <_sbrk_r+0x1a>
 800ebd8:	682b      	ldr	r3, [r5, #0]
 800ebda:	b103      	cbz	r3, 800ebde <_sbrk_r+0x1a>
 800ebdc:	6023      	str	r3, [r4, #0]
 800ebde:	bd38      	pop	{r3, r4, r5, pc}
 800ebe0:	20000efc 	.word	0x20000efc

0800ebe4 <__assert_func>:
 800ebe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebe6:	4614      	mov	r4, r2
 800ebe8:	461a      	mov	r2, r3
 800ebea:	4b09      	ldr	r3, [pc, #36]	@ (800ec10 <__assert_func+0x2c>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4605      	mov	r5, r0
 800ebf0:	68d8      	ldr	r0, [r3, #12]
 800ebf2:	b954      	cbnz	r4, 800ec0a <__assert_func+0x26>
 800ebf4:	4b07      	ldr	r3, [pc, #28]	@ (800ec14 <__assert_func+0x30>)
 800ebf6:	461c      	mov	r4, r3
 800ebf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ebfc:	9100      	str	r1, [sp, #0]
 800ebfe:	462b      	mov	r3, r5
 800ec00:	4905      	ldr	r1, [pc, #20]	@ (800ec18 <__assert_func+0x34>)
 800ec02:	f000 f86f 	bl	800ece4 <fiprintf>
 800ec06:	f000 f903 	bl	800ee10 <abort>
 800ec0a:	4b04      	ldr	r3, [pc, #16]	@ (800ec1c <__assert_func+0x38>)
 800ec0c:	e7f4      	b.n	800ebf8 <__assert_func+0x14>
 800ec0e:	bf00      	nop
 800ec10:	20000044 	.word	0x20000044
 800ec14:	0800fb9e 	.word	0x0800fb9e
 800ec18:	0800fb70 	.word	0x0800fb70
 800ec1c:	0800fb63 	.word	0x0800fb63

0800ec20 <_calloc_r>:
 800ec20:	b570      	push	{r4, r5, r6, lr}
 800ec22:	fba1 5402 	umull	r5, r4, r1, r2
 800ec26:	b93c      	cbnz	r4, 800ec38 <_calloc_r+0x18>
 800ec28:	4629      	mov	r1, r5
 800ec2a:	f7fe ffc9 	bl	800dbc0 <_malloc_r>
 800ec2e:	4606      	mov	r6, r0
 800ec30:	b928      	cbnz	r0, 800ec3e <_calloc_r+0x1e>
 800ec32:	2600      	movs	r6, #0
 800ec34:	4630      	mov	r0, r6
 800ec36:	bd70      	pop	{r4, r5, r6, pc}
 800ec38:	220c      	movs	r2, #12
 800ec3a:	6002      	str	r2, [r0, #0]
 800ec3c:	e7f9      	b.n	800ec32 <_calloc_r+0x12>
 800ec3e:	462a      	mov	r2, r5
 800ec40:	4621      	mov	r1, r4
 800ec42:	f7fe f86c 	bl	800cd1e <memset>
 800ec46:	e7f5      	b.n	800ec34 <_calloc_r+0x14>

0800ec48 <__ascii_mbtowc>:
 800ec48:	b082      	sub	sp, #8
 800ec4a:	b901      	cbnz	r1, 800ec4e <__ascii_mbtowc+0x6>
 800ec4c:	a901      	add	r1, sp, #4
 800ec4e:	b142      	cbz	r2, 800ec62 <__ascii_mbtowc+0x1a>
 800ec50:	b14b      	cbz	r3, 800ec66 <__ascii_mbtowc+0x1e>
 800ec52:	7813      	ldrb	r3, [r2, #0]
 800ec54:	600b      	str	r3, [r1, #0]
 800ec56:	7812      	ldrb	r2, [r2, #0]
 800ec58:	1e10      	subs	r0, r2, #0
 800ec5a:	bf18      	it	ne
 800ec5c:	2001      	movne	r0, #1
 800ec5e:	b002      	add	sp, #8
 800ec60:	4770      	bx	lr
 800ec62:	4610      	mov	r0, r2
 800ec64:	e7fb      	b.n	800ec5e <__ascii_mbtowc+0x16>
 800ec66:	f06f 0001 	mvn.w	r0, #1
 800ec6a:	e7f8      	b.n	800ec5e <__ascii_mbtowc+0x16>

0800ec6c <_realloc_r>:
 800ec6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec70:	4680      	mov	r8, r0
 800ec72:	4615      	mov	r5, r2
 800ec74:	460c      	mov	r4, r1
 800ec76:	b921      	cbnz	r1, 800ec82 <_realloc_r+0x16>
 800ec78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec7c:	4611      	mov	r1, r2
 800ec7e:	f7fe bf9f 	b.w	800dbc0 <_malloc_r>
 800ec82:	b92a      	cbnz	r2, 800ec90 <_realloc_r+0x24>
 800ec84:	f7fe ff28 	bl	800dad8 <_free_r>
 800ec88:	2400      	movs	r4, #0
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec90:	f000 f8c5 	bl	800ee1e <_malloc_usable_size_r>
 800ec94:	4285      	cmp	r5, r0
 800ec96:	4606      	mov	r6, r0
 800ec98:	d802      	bhi.n	800eca0 <_realloc_r+0x34>
 800ec9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ec9e:	d8f4      	bhi.n	800ec8a <_realloc_r+0x1e>
 800eca0:	4629      	mov	r1, r5
 800eca2:	4640      	mov	r0, r8
 800eca4:	f7fe ff8c 	bl	800dbc0 <_malloc_r>
 800eca8:	4607      	mov	r7, r0
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	d0ec      	beq.n	800ec88 <_realloc_r+0x1c>
 800ecae:	42b5      	cmp	r5, r6
 800ecb0:	462a      	mov	r2, r5
 800ecb2:	4621      	mov	r1, r4
 800ecb4:	bf28      	it	cs
 800ecb6:	4632      	movcs	r2, r6
 800ecb8:	f7fe f8b1 	bl	800ce1e <memcpy>
 800ecbc:	4621      	mov	r1, r4
 800ecbe:	4640      	mov	r0, r8
 800ecc0:	f7fe ff0a 	bl	800dad8 <_free_r>
 800ecc4:	463c      	mov	r4, r7
 800ecc6:	e7e0      	b.n	800ec8a <_realloc_r+0x1e>

0800ecc8 <__ascii_wctomb>:
 800ecc8:	4603      	mov	r3, r0
 800ecca:	4608      	mov	r0, r1
 800eccc:	b141      	cbz	r1, 800ece0 <__ascii_wctomb+0x18>
 800ecce:	2aff      	cmp	r2, #255	@ 0xff
 800ecd0:	d904      	bls.n	800ecdc <__ascii_wctomb+0x14>
 800ecd2:	228a      	movs	r2, #138	@ 0x8a
 800ecd4:	601a      	str	r2, [r3, #0]
 800ecd6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecda:	4770      	bx	lr
 800ecdc:	700a      	strb	r2, [r1, #0]
 800ecde:	2001      	movs	r0, #1
 800ece0:	4770      	bx	lr
	...

0800ece4 <fiprintf>:
 800ece4:	b40e      	push	{r1, r2, r3}
 800ece6:	b503      	push	{r0, r1, lr}
 800ece8:	4601      	mov	r1, r0
 800ecea:	ab03      	add	r3, sp, #12
 800ecec:	4805      	ldr	r0, [pc, #20]	@ (800ed04 <fiprintf+0x20>)
 800ecee:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecf2:	6800      	ldr	r0, [r0, #0]
 800ecf4:	9301      	str	r3, [sp, #4]
 800ecf6:	f7ff fcf3 	bl	800e6e0 <_vfiprintf_r>
 800ecfa:	b002      	add	sp, #8
 800ecfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed00:	b003      	add	sp, #12
 800ed02:	4770      	bx	lr
 800ed04:	20000044 	.word	0x20000044

0800ed08 <__swhatbuf_r>:
 800ed08:	b570      	push	{r4, r5, r6, lr}
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed10:	2900      	cmp	r1, #0
 800ed12:	b096      	sub	sp, #88	@ 0x58
 800ed14:	4615      	mov	r5, r2
 800ed16:	461e      	mov	r6, r3
 800ed18:	da0d      	bge.n	800ed36 <__swhatbuf_r+0x2e>
 800ed1a:	89a3      	ldrh	r3, [r4, #12]
 800ed1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed20:	f04f 0100 	mov.w	r1, #0
 800ed24:	bf14      	ite	ne
 800ed26:	2340      	movne	r3, #64	@ 0x40
 800ed28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	6031      	str	r1, [r6, #0]
 800ed30:	602b      	str	r3, [r5, #0]
 800ed32:	b016      	add	sp, #88	@ 0x58
 800ed34:	bd70      	pop	{r4, r5, r6, pc}
 800ed36:	466a      	mov	r2, sp
 800ed38:	f000 f848 	bl	800edcc <_fstat_r>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	dbec      	blt.n	800ed1a <__swhatbuf_r+0x12>
 800ed40:	9901      	ldr	r1, [sp, #4]
 800ed42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed4a:	4259      	negs	r1, r3
 800ed4c:	4159      	adcs	r1, r3
 800ed4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed52:	e7eb      	b.n	800ed2c <__swhatbuf_r+0x24>

0800ed54 <__smakebuf_r>:
 800ed54:	898b      	ldrh	r3, [r1, #12]
 800ed56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed58:	079d      	lsls	r5, r3, #30
 800ed5a:	4606      	mov	r6, r0
 800ed5c:	460c      	mov	r4, r1
 800ed5e:	d507      	bpl.n	800ed70 <__smakebuf_r+0x1c>
 800ed60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed64:	6023      	str	r3, [r4, #0]
 800ed66:	6123      	str	r3, [r4, #16]
 800ed68:	2301      	movs	r3, #1
 800ed6a:	6163      	str	r3, [r4, #20]
 800ed6c:	b003      	add	sp, #12
 800ed6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed70:	ab01      	add	r3, sp, #4
 800ed72:	466a      	mov	r2, sp
 800ed74:	f7ff ffc8 	bl	800ed08 <__swhatbuf_r>
 800ed78:	9f00      	ldr	r7, [sp, #0]
 800ed7a:	4605      	mov	r5, r0
 800ed7c:	4639      	mov	r1, r7
 800ed7e:	4630      	mov	r0, r6
 800ed80:	f7fe ff1e 	bl	800dbc0 <_malloc_r>
 800ed84:	b948      	cbnz	r0, 800ed9a <__smakebuf_r+0x46>
 800ed86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed8a:	059a      	lsls	r2, r3, #22
 800ed8c:	d4ee      	bmi.n	800ed6c <__smakebuf_r+0x18>
 800ed8e:	f023 0303 	bic.w	r3, r3, #3
 800ed92:	f043 0302 	orr.w	r3, r3, #2
 800ed96:	81a3      	strh	r3, [r4, #12]
 800ed98:	e7e2      	b.n	800ed60 <__smakebuf_r+0xc>
 800ed9a:	89a3      	ldrh	r3, [r4, #12]
 800ed9c:	6020      	str	r0, [r4, #0]
 800ed9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eda2:	81a3      	strh	r3, [r4, #12]
 800eda4:	9b01      	ldr	r3, [sp, #4]
 800eda6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800edaa:	b15b      	cbz	r3, 800edc4 <__smakebuf_r+0x70>
 800edac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edb0:	4630      	mov	r0, r6
 800edb2:	f000 f81d 	bl	800edf0 <_isatty_r>
 800edb6:	b128      	cbz	r0, 800edc4 <__smakebuf_r+0x70>
 800edb8:	89a3      	ldrh	r3, [r4, #12]
 800edba:	f023 0303 	bic.w	r3, r3, #3
 800edbe:	f043 0301 	orr.w	r3, r3, #1
 800edc2:	81a3      	strh	r3, [r4, #12]
 800edc4:	89a3      	ldrh	r3, [r4, #12]
 800edc6:	431d      	orrs	r5, r3
 800edc8:	81a5      	strh	r5, [r4, #12]
 800edca:	e7cf      	b.n	800ed6c <__smakebuf_r+0x18>

0800edcc <_fstat_r>:
 800edcc:	b538      	push	{r3, r4, r5, lr}
 800edce:	4d07      	ldr	r5, [pc, #28]	@ (800edec <_fstat_r+0x20>)
 800edd0:	2300      	movs	r3, #0
 800edd2:	4604      	mov	r4, r0
 800edd4:	4608      	mov	r0, r1
 800edd6:	4611      	mov	r1, r2
 800edd8:	602b      	str	r3, [r5, #0]
 800edda:	f7f4 fb1f 	bl	800341c <_fstat>
 800edde:	1c43      	adds	r3, r0, #1
 800ede0:	d102      	bne.n	800ede8 <_fstat_r+0x1c>
 800ede2:	682b      	ldr	r3, [r5, #0]
 800ede4:	b103      	cbz	r3, 800ede8 <_fstat_r+0x1c>
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	bd38      	pop	{r3, r4, r5, pc}
 800edea:	bf00      	nop
 800edec:	20000efc 	.word	0x20000efc

0800edf0 <_isatty_r>:
 800edf0:	b538      	push	{r3, r4, r5, lr}
 800edf2:	4d06      	ldr	r5, [pc, #24]	@ (800ee0c <_isatty_r+0x1c>)
 800edf4:	2300      	movs	r3, #0
 800edf6:	4604      	mov	r4, r0
 800edf8:	4608      	mov	r0, r1
 800edfa:	602b      	str	r3, [r5, #0]
 800edfc:	f7f4 fb1e 	bl	800343c <_isatty>
 800ee00:	1c43      	adds	r3, r0, #1
 800ee02:	d102      	bne.n	800ee0a <_isatty_r+0x1a>
 800ee04:	682b      	ldr	r3, [r5, #0]
 800ee06:	b103      	cbz	r3, 800ee0a <_isatty_r+0x1a>
 800ee08:	6023      	str	r3, [r4, #0]
 800ee0a:	bd38      	pop	{r3, r4, r5, pc}
 800ee0c:	20000efc 	.word	0x20000efc

0800ee10 <abort>:
 800ee10:	b508      	push	{r3, lr}
 800ee12:	2006      	movs	r0, #6
 800ee14:	f000 f834 	bl	800ee80 <raise>
 800ee18:	2001      	movs	r0, #1
 800ee1a:	f7f4 faaf 	bl	800337c <_exit>

0800ee1e <_malloc_usable_size_r>:
 800ee1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee22:	1f18      	subs	r0, r3, #4
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	bfbc      	itt	lt
 800ee28:	580b      	ldrlt	r3, [r1, r0]
 800ee2a:	18c0      	addlt	r0, r0, r3
 800ee2c:	4770      	bx	lr

0800ee2e <_raise_r>:
 800ee2e:	291f      	cmp	r1, #31
 800ee30:	b538      	push	{r3, r4, r5, lr}
 800ee32:	4605      	mov	r5, r0
 800ee34:	460c      	mov	r4, r1
 800ee36:	d904      	bls.n	800ee42 <_raise_r+0x14>
 800ee38:	2316      	movs	r3, #22
 800ee3a:	6003      	str	r3, [r0, #0]
 800ee3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee40:	bd38      	pop	{r3, r4, r5, pc}
 800ee42:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ee44:	b112      	cbz	r2, 800ee4c <_raise_r+0x1e>
 800ee46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee4a:	b94b      	cbnz	r3, 800ee60 <_raise_r+0x32>
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	f000 f831 	bl	800eeb4 <_getpid_r>
 800ee52:	4622      	mov	r2, r4
 800ee54:	4601      	mov	r1, r0
 800ee56:	4628      	mov	r0, r5
 800ee58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee5c:	f000 b818 	b.w	800ee90 <_kill_r>
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d00a      	beq.n	800ee7a <_raise_r+0x4c>
 800ee64:	1c59      	adds	r1, r3, #1
 800ee66:	d103      	bne.n	800ee70 <_raise_r+0x42>
 800ee68:	2316      	movs	r3, #22
 800ee6a:	6003      	str	r3, [r0, #0]
 800ee6c:	2001      	movs	r0, #1
 800ee6e:	e7e7      	b.n	800ee40 <_raise_r+0x12>
 800ee70:	2100      	movs	r1, #0
 800ee72:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ee76:	4620      	mov	r0, r4
 800ee78:	4798      	blx	r3
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	e7e0      	b.n	800ee40 <_raise_r+0x12>
	...

0800ee80 <raise>:
 800ee80:	4b02      	ldr	r3, [pc, #8]	@ (800ee8c <raise+0xc>)
 800ee82:	4601      	mov	r1, r0
 800ee84:	6818      	ldr	r0, [r3, #0]
 800ee86:	f7ff bfd2 	b.w	800ee2e <_raise_r>
 800ee8a:	bf00      	nop
 800ee8c:	20000044 	.word	0x20000044

0800ee90 <_kill_r>:
 800ee90:	b538      	push	{r3, r4, r5, lr}
 800ee92:	4d07      	ldr	r5, [pc, #28]	@ (800eeb0 <_kill_r+0x20>)
 800ee94:	2300      	movs	r3, #0
 800ee96:	4604      	mov	r4, r0
 800ee98:	4608      	mov	r0, r1
 800ee9a:	4611      	mov	r1, r2
 800ee9c:	602b      	str	r3, [r5, #0]
 800ee9e:	f7f4 fa5d 	bl	800335c <_kill>
 800eea2:	1c43      	adds	r3, r0, #1
 800eea4:	d102      	bne.n	800eeac <_kill_r+0x1c>
 800eea6:	682b      	ldr	r3, [r5, #0]
 800eea8:	b103      	cbz	r3, 800eeac <_kill_r+0x1c>
 800eeaa:	6023      	str	r3, [r4, #0]
 800eeac:	bd38      	pop	{r3, r4, r5, pc}
 800eeae:	bf00      	nop
 800eeb0:	20000efc 	.word	0x20000efc

0800eeb4 <_getpid_r>:
 800eeb4:	f7f4 ba4a 	b.w	800334c <_getpid>

0800eeb8 <_init>:
 800eeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeba:	bf00      	nop
 800eebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eebe:	bc08      	pop	{r3}
 800eec0:	469e      	mov	lr, r3
 800eec2:	4770      	bx	lr

0800eec4 <_fini>:
 800eec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec6:	bf00      	nop
 800eec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeca:	bc08      	pop	{r3}
 800eecc:	469e      	mov	lr, r3
 800eece:	4770      	bx	lr
