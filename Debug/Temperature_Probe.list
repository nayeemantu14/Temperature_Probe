
Temperature_Probe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a324  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  0800a460  0800a460  0000b460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a6e4  0800a6e4  0000b6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a6ec  0800a6ec  0000b6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a6f0  0800a6f0  0000b6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000030  20000008  0800a6f4  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000038  0800a724  0000c038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000070  0800a759  0000c070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  20000084  0800a76a  0000c084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  0800a76a  0000c798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ca67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000d000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800a76a  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00030470  00000000  00000000  0000ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006a3c  00000000  00000000  0003cf07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000029e8  00000000  00000000  00043948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001ff0  00000000  00000000  00046330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028bd9  00000000  00000000  00048320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002fd46  00000000  00000000  00070ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000df409  00000000  00000000  000a0c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00180048  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000adc8  00000000  00000000  0018008c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005e  00000000  00000000  0018ae54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000084 	.word	0x20000084
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a448 	.word	0x0800a448

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000088 	.word	0x20000088
 8000178:	0800a448 	.word	0x0800a448

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800019a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	4313      	orrs	r3, r2
 80001a2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	4013      	ands	r3, r2
 80001ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001b0:	68fb      	ldr	r3, [r7, #12]
}
 80001b2:	bf00      	nop
 80001b4:	3714      	adds	r7, #20
 80001b6:	46bd      	mov	sp, r7
 80001b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001bc:	4770      	bx	lr

080001be <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 80001be:	b480      	push	{r7}
 80001c0:	b083      	sub	sp, #12
 80001c2:	af00      	add	r7, sp, #0
 80001c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80001c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	43db      	mvns	r3, r3
 80001d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80001d4:	4013      	ands	r3, r2
 80001d6:	64cb      	str	r3, [r1, #76]	@ 0x4c
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80001ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001f0:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80001f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	4313      	orrs	r3, r2
 80001fc:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000204:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4013      	ands	r3, r2
 800020c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800020e:	68fb      	ldr	r3, [r7, #12]
}
 8000210:	bf00      	nop
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);

#else
  GPIO_InitTypeDef gpio_config = {0};
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]

  gpio_config.Pull = GPIO_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_ANALOG;
 8000234:	2303      	movs	r3, #3
 8000236:	60bb      	str	r3, [r7, #8]

  gpio_config.Pin = GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13;
 8000238:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800023c:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800023e:	2001      	movs	r0, #1
 8000240:	f7ff ffa4 	bl	800018c <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &gpio_config);
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	4619      	mov	r1, r3
 8000248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800024c:	f004 f872 	bl	8004334 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000250:	2001      	movs	r0, #1
 8000252:	f7ff ffb4 	bl	80001be <LL_AHB2_GRP1_DisableClock>

  gpio_config.Pin = GPIO_PIN_4 | GPIO_PIN_3;
 8000256:	2318      	movs	r3, #24
 8000258:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	2002      	movs	r0, #2
 800025c:	f7ff ff96 	bl	800018c <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &gpio_config);
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	4619      	mov	r1, r3
 8000264:	4809      	ldr	r0, [pc, #36]	@ (800028c <APPD_Init+0x70>)
 8000266:	f004 f865 	bl	8004334 <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800026a:	2002      	movs	r0, #2
 800026c:	f7ff ffa7 	bl	80001be <LL_AHB2_GRP1_DisableClock>

  HAL_DBGMCU_DisableDBGSleepMode();
 8000270:	f002 fbd4 	bl	8002a1c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000274:	f002 fbd8 	bl	8002a28 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000278:	f002 fbdc 	bl	8002a34 <HAL_DBGMCU_DisableDBGStandbyMode>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 800027c:	f000 f844 	bl	8000308 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000280:	f000 f902 	bl	8000488 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000284:	bf00      	nop
}
 8000286:	3718      	adds	r7, #24
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	48000400 	.word	0x48000400

08000290 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000290:	b5b0      	push	{r4, r5, r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000296:	4b15      	ldr	r3, [pc, #84]	@ (80002ec <APPD_EnableCPU2+0x5c>)
 8000298:	881a      	ldrh	r2, [r3, #0]
 800029a:	4b15      	ldr	r3, [pc, #84]	@ (80002f0 <APPD_EnableCPU2+0x60>)
 800029c:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800029e:	4b15      	ldr	r3, [pc, #84]	@ (80002f4 <APPD_EnableCPU2+0x64>)
 80002a0:	881a      	ldrh	r2, [r3, #0]
 80002a2:	4b13      	ldr	r3, [pc, #76]	@ (80002f0 <APPD_EnableCPU2+0x60>)
 80002a4:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 80002a6:	4b14      	ldr	r3, [pc, #80]	@ (80002f8 <APPD_EnableCPU2+0x68>)
 80002a8:	881a      	ldrh	r2, [r3, #0]
 80002aa:	4b11      	ldr	r3, [pc, #68]	@ (80002f0 <APPD_EnableCPU2+0x60>)
 80002ac:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 80002ae:	4b13      	ldr	r3, [pc, #76]	@ (80002fc <APPD_EnableCPU2+0x6c>)
 80002b0:	881a      	ldrh	r2, [r3, #0]
 80002b2:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <APPD_EnableCPU2+0x60>)
 80002b4:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 80002b6:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <APPD_EnableCPU2+0x70>)
 80002b8:	881a      	ldrh	r2, [r3, #0]
 80002ba:	4b0d      	ldr	r3, [pc, #52]	@ (80002f0 <APPD_EnableCPU2+0x60>)
 80002bc:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80002be:	4b11      	ldr	r3, [pc, #68]	@ (8000304 <APPD_EnableCPU2+0x74>)
 80002c0:	1d3c      	adds	r4, r7, #4
 80002c2:	461d      	mov	r5, r3
 80002c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002cc:	c403      	stmia	r4!, {r0, r1}
 80002ce:	8022      	strh	r2, [r4, #0]
 80002d0:	3402      	adds	r4, #2
 80002d2:	0c13      	lsrs	r3, r2, #16
 80002d4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80002d6:	f008 fc01 	bl	8008adc <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4618      	mov	r0, r3
 80002de:	f007 fe92 	bl	8008006 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80002e2:	bf00      	nop
}
 80002e4:	3720      	adds	r7, #32
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bdb0      	pop	{r4, r5, r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000008 	.word	0x20000008
 80002f0:	200301e8 	.word	0x200301e8
 80002f4:	2000000a 	.word	0x2000000a
 80002f8:	2000000c 	.word	0x2000000c
 80002fc:	2000000e 	.word	0x2000000e
 8000300:	20000010 	.word	0x20000010
 8000304:	0800a460 	.word	0x0800a460

08000308 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = STBY_DebugGpioaPinList;
 800031c:	4b54      	ldr	r3, [pc, #336]	@ (8000470 <APPD_SetCPU2GpioConfig+0x168>)
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = STBY_DebugGpiobPinList;
 8000322:	4b54      	ldr	r3, [pc, #336]	@ (8000474 <APPD_SetCPU2GpioConfig+0x16c>)
 8000324:	881b      	ldrh	r3, [r3, #0]
 8000326:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = STBY_DebugGpiocPinList;
 8000328:	4b53      	ldr	r3, [pc, #332]	@ (8000478 <APPD_SetCPU2GpioConfig+0x170>)
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	833b      	strh	r3, [r7, #24]

  if(gpioa_pin_list == UINT16_MAX)
 800032e:	8bbb      	ldrh	r3, [r7, #28]
 8000330:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000334:	4293      	cmp	r3, r2
 8000336:	d14b      	bne.n	80003d0 <APPD_SetCPU2GpioConfig+0xc8>
  {
    gpioa_pin_list = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	83bb      	strh	r3, [r7, #28]
    gpiob_pin_list = 0;
 800033c:	2300      	movs	r3, #0
 800033e:	837b      	strh	r3, [r7, #26]
    gpioc_pin_list = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	833b      	strh	r3, [r7, #24]

    for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000344:	2300      	movs	r3, #0
 8000346:	77fb      	strb	r3, [r7, #31]
 8000348:	e036      	b.n	80003b8 <APPD_SetCPU2GpioConfig+0xb0>
    {
      if( aGpioConfigList[local_loop].enable != 0)
 800034a:	7ffb      	ldrb	r3, [r7, #31]
 800034c:	4a4b      	ldr	r2, [pc, #300]	@ (800047c <APPD_SetCPU2GpioConfig+0x174>)
 800034e:	00db      	lsls	r3, r3, #3
 8000350:	4413      	add	r3, r2
 8000352:	799b      	ldrb	r3, [r3, #6]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d02c      	beq.n	80003b2 <APPD_SetCPU2GpioConfig+0xaa>
      {
        switch((uint32_t)aGpioConfigList[local_loop].port)
 8000358:	7ffb      	ldrb	r3, [r7, #31]
 800035a:	4a48      	ldr	r2, [pc, #288]	@ (800047c <APPD_SetCPU2GpioConfig+0x174>)
 800035c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000360:	4a47      	ldr	r2, [pc, #284]	@ (8000480 <APPD_SetCPU2GpioConfig+0x178>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d01b      	beq.n	800039e <APPD_SetCPU2GpioConfig+0x96>
 8000366:	4a46      	ldr	r2, [pc, #280]	@ (8000480 <APPD_SetCPU2GpioConfig+0x178>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d821      	bhi.n	80003b0 <APPD_SetCPU2GpioConfig+0xa8>
 800036c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000370:	d003      	beq.n	800037a <APPD_SetCPU2GpioConfig+0x72>
 8000372:	4a44      	ldr	r2, [pc, #272]	@ (8000484 <APPD_SetCPU2GpioConfig+0x17c>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d009      	beq.n	800038c <APPD_SetCPU2GpioConfig+0x84>
            break;
          case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
            break;
          default:
            break;
 8000378:	e01a      	b.n	80003b0 <APPD_SetCPU2GpioConfig+0xa8>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800037a:	7ffb      	ldrb	r3, [r7, #31]
 800037c:	4a3f      	ldr	r2, [pc, #252]	@ (800047c <APPD_SetCPU2GpioConfig+0x174>)
 800037e:	00db      	lsls	r3, r3, #3
 8000380:	4413      	add	r3, r2
 8000382:	889a      	ldrh	r2, [r3, #4]
 8000384:	8bbb      	ldrh	r3, [r7, #28]
 8000386:	4313      	orrs	r3, r2
 8000388:	83bb      	strh	r3, [r7, #28]
            break;
 800038a:	e012      	b.n	80003b2 <APPD_SetCPU2GpioConfig+0xaa>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800038c:	7ffb      	ldrb	r3, [r7, #31]
 800038e:	4a3b      	ldr	r2, [pc, #236]	@ (800047c <APPD_SetCPU2GpioConfig+0x174>)
 8000390:	00db      	lsls	r3, r3, #3
 8000392:	4413      	add	r3, r2
 8000394:	889a      	ldrh	r2, [r3, #4]
 8000396:	8b7b      	ldrh	r3, [r7, #26]
 8000398:	4313      	orrs	r3, r2
 800039a:	837b      	strh	r3, [r7, #26]
            break;
 800039c:	e009      	b.n	80003b2 <APPD_SetCPU2GpioConfig+0xaa>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800039e:	7ffb      	ldrb	r3, [r7, #31]
 80003a0:	4a36      	ldr	r2, [pc, #216]	@ (800047c <APPD_SetCPU2GpioConfig+0x174>)
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	4413      	add	r3, r2
 80003a6:	889a      	ldrh	r2, [r3, #4]
 80003a8:	8b3b      	ldrh	r3, [r7, #24]
 80003aa:	4313      	orrs	r3, r2
 80003ac:	833b      	strh	r3, [r7, #24]
            break;
 80003ae:	e000      	b.n	80003b2 <APPD_SetCPU2GpioConfig+0xaa>
            break;
 80003b0:	bf00      	nop
    for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80003b2:	7ffb      	ldrb	r3, [r7, #31]
 80003b4:	3301      	adds	r3, #1
 80003b6:	77fb      	strb	r3, [r7, #31]
 80003b8:	7ffb      	ldrb	r3, [r7, #31]
 80003ba:	2b25      	cmp	r3, #37	@ 0x25
 80003bc:	d9c5      	bls.n	800034a <APPD_SetCPU2GpioConfig+0x42>
        }
      }
    }

    STBY_DebugGpioaPinList = gpioa_pin_list;
 80003be:	4a2c      	ldr	r2, [pc, #176]	@ (8000470 <APPD_SetCPU2GpioConfig+0x168>)
 80003c0:	8bbb      	ldrh	r3, [r7, #28]
 80003c2:	8013      	strh	r3, [r2, #0]
    STBY_DebugGpiobPinList = gpiob_pin_list;
 80003c4:	4a2b      	ldr	r2, [pc, #172]	@ (8000474 <APPD_SetCPU2GpioConfig+0x16c>)
 80003c6:	8b7b      	ldrh	r3, [r7, #26]
 80003c8:	8013      	strh	r3, [r2, #0]
    STBY_DebugGpiocPinList = gpioc_pin_list;
 80003ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000478 <APPD_SetCPU2GpioConfig+0x170>)
 80003cc:	8b3b      	ldrh	r3, [r7, #24]
 80003ce:	8013      	strh	r3, [r2, #0]
  }

  gpio_config.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003d8:	2303      	movs	r3, #3
 80003da:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80003dc:	8bbb      	ldrh	r3, [r7, #28]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d014      	beq.n	800040c <APPD_SetCPU2GpioConfig+0x104>
  {
    gpio_config.Pin = gpioa_pin_list;
 80003e2:	8bbb      	ldrh	r3, [r7, #28]
 80003e4:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e6:	2001      	movs	r0, #1
 80003e8:	f7ff fed0 	bl	800018c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80003ec:	2001      	movs	r0, #1
 80003ee:	f7ff fef9 	bl	80001e4 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	4619      	mov	r1, r3
 80003f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003fa:	f003 ff9b 	bl	8004334 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80003fe:	8bbb      	ldrh	r3, [r7, #28]
 8000400:	2200      	movs	r2, #0
 8000402:	4619      	mov	r1, r3
 8000404:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000408:	f004 f8fc 	bl	8004604 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800040c:	8b7b      	ldrh	r3, [r7, #26]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d012      	beq.n	8000438 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000412:	8b7b      	ldrh	r3, [r7, #26]
 8000414:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000416:	2002      	movs	r0, #2
 8000418:	f7ff feb8 	bl	800018c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800041c:	2002      	movs	r0, #2
 800041e:	f7ff fee1 	bl	80001e4 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4619      	mov	r1, r3
 8000426:	4817      	ldr	r0, [pc, #92]	@ (8000484 <APPD_SetCPU2GpioConfig+0x17c>)
 8000428:	f003 ff84 	bl	8004334 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800042c:	8b7b      	ldrh	r3, [r7, #26]
 800042e:	2200      	movs	r2, #0
 8000430:	4619      	mov	r1, r3
 8000432:	4814      	ldr	r0, [pc, #80]	@ (8000484 <APPD_SetCPU2GpioConfig+0x17c>)
 8000434:	f004 f8e6 	bl	8004604 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000438:	8b3b      	ldrh	r3, [r7, #24]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d013      	beq.n	8000466 <APPD_SetCPU2GpioConfig+0x15e>
  {
    gpio_config.Pin = gpioc_pin_list;
 800043e:	8b3b      	ldrh	r3, [r7, #24]
 8000440:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	2004      	movs	r0, #4
 8000444:	f7ff fea2 	bl	800018c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000448:	2004      	movs	r0, #4
 800044a:	f7ff fecb 	bl	80001e4 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4619      	mov	r1, r3
 8000452:	480b      	ldr	r0, [pc, #44]	@ (8000480 <APPD_SetCPU2GpioConfig+0x178>)
 8000454:	f003 ff6e 	bl	8004334 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000458:	8b3b      	ldrh	r3, [r7, #24]
 800045a:	2200      	movs	r2, #0
 800045c:	4619      	mov	r1, r3
 800045e:	4808      	ldr	r0, [pc, #32]	@ (8000480 <APPD_SetCPU2GpioConfig+0x178>)
 8000460:	f004 f8d0 	bl	8004604 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000464:	bf00      	nop
 8000466:	bf00      	nop
}
 8000468:	3720      	adds	r7, #32
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000008 	.word	0x20000008
 8000474:	2000000a 	.word	0x2000000a
 8000478:	2000000c 	.word	0x2000000c
 800047c:	0800a4e4 	.word	0x0800a4e4
 8000480:	48000800 	.word	0x48000800
 8000484:	48000400 	.word	0x48000400

08000488 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#else
  STBY_DtbGpioaPinList = 0;
 800048c:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <APPD_BleDtbCfg+0x1c>)
 800048e:	2200      	movs	r2, #0
 8000490:	801a      	strh	r2, [r3, #0]
  STBY_DtbGpiobPinList = 0;
 8000492:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <APPD_BleDtbCfg+0x20>)
 8000494:	2200      	movs	r2, #0
 8000496:	801a      	strh	r2, [r3, #0]
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000498:	bf00      	nop
}
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	2000000e 	.word	0x2000000e
 80004a8:	20000010 	.word	0x20000010

080004ac <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004b4:	4b07      	ldr	r3, [pc, #28]	@ (80004d4 <LL_C2_PWR_SetPowerMode+0x28>)
 80004b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004ba:	f023 0207 	bic.w	r2, r3, #7
 80004be:	4905      	ldr	r1, [pc, #20]	@ (80004d4 <LL_C2_PWR_SetPowerMode+0x28>)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	58000400 	.word	0x58000400

080004d8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80004e0:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <LL_EXTI_EnableIT_32_63+0x24>)
 80004e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80004e6:	4905      	ldr	r1, [pc, #20]	@ (80004fc <LL_EXTI_EnableIT_32_63+0x24>)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	58000800 	.word	0x58000800

08000500 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800050c:	4a0a      	ldr	r2, [pc, #40]	@ (8000538 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800050e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000516:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800051a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	021b      	lsls	r3, r3, #8
 8000522:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000526:	4313      	orrs	r3, r2
 8000528:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	cafecafe 	.word	0xcafecafe

0800053c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800054e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4313      	orrs	r3, r2
 8000556:	608b      	str	r3, [r1, #8]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800056c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000570:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800058a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800058e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800059a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80005ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80005bc:	d101      	bne.n	80005c2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80005be:	2301      	movs	r3, #1
 80005c0:	e000      	b.n	80005c4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80005d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80005e2:	d101      	bne.n	80005e8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80005e4:	2301      	movs	r3, #1
 80005e6:	e000      	b.n	80005ea <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <LL_AHB3_GRP1_EnableClock>:
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80005fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000600:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000602:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4313      	orrs	r3, r2
 800060a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800060c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000610:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4013      	ands	r3, r2
 8000616:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000618:	68fb      	ldr	r3, [r7, #12]
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800062c:	4b04      	ldr	r3, [pc, #16]	@ (8000640 <LL_DBGMCU_GetDeviceID+0x18>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e0042000 	.word	0xe0042000

08000644 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <LL_DBGMCU_GetRevisionID+0x18>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	0c1b      	lsrs	r3, r3, #16
 800064e:	b29b      	uxth	r3, r3
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e0042000 	.word	0xe0042000

08000660 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	685a      	ldr	r2, [r3, #4]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	041b      	lsls	r3, r3, #16
 8000672:	431a      	orrs	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	605a      	str	r2, [r3, #4]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	431a      	orrs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	605a      	str	r2, [r3, #4]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	041b      	lsls	r3, r3, #16
 80006b8:	431a      	orrs	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	615a      	str	r2, [r3, #20]
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80006ca:	b480      	push	{r7}
 80006cc:	b083      	sub	sp, #12
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	695a      	ldr	r2, [r3, #20]
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	431a      	orrs	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	615a      	str	r2, [r3, #20]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	609a      	str	r2, [r3, #8]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	619a      	str	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	22ff      	movs	r2, #255	@ 0xff
 8000730:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	22ca      	movs	r2, #202	@ 0xca
 800074a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2253      	movs	r2, #83	@ 0x53
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f023 0207 	bic.w	r2, r3, #7
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	431a      	orrs	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	609a      	str	r2, [r3, #8]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000788:	4b04      	ldr	r3, [pc, #16]	@ (800079c <MX_APPE_Config+0x18>)
 800078a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800078e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000790:	f000 f82a 	bl	80007e8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000794:	f000 f86a 	bl	800086c <Config_HSE>

  return;
 8000798:	bf00      	nop
}
 800079a:	bd80      	pop	{r7, pc}
 800079c:	58004000 	.word	0x58004000

080007a0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80007a4:	f000 f876 	bl	8000894 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80007a8:	f000 f88e 	bl	80008c8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80007ac:	4906      	ldr	r1, [pc, #24]	@ (80007c8 <MX_APPE_Init+0x28>)
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 fdb6 	bl	8001320 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80007b4:	f7ff fd32 	bl	800021c <APPD_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80007b8:	2101      	movs	r1, #1
 80007ba:	2002      	movs	r0, #2
 80007bc:	f009 fb6a 	bl	8009e94 <UTIL_LPM_SetOffMode>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80007c0:	f000 f892 	bl	80008e8 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80007c4:	bf00      	nop
}
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000248 	.word	0x20000248

080007cc <Init_Smps>:

void Init_Smps(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80007d0:	bf00      	nop
}
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <Init_Exti>:

void Init_Exti(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80007de:	2050      	movs	r0, #80	@ 0x50
 80007e0:	f7ff fe7a 	bl	80004d8 <LL_EXTI_EnableIT_32_63>

  return;
 80007e4:	bf00      	nop
}
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80007ec:	f000 f804 	bl	80007f8 <Reset_BackupDomain>

  Reset_IPCC();
 80007f0:	f000 f81a 	bl	8000828 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80007f4:	bf00      	nop
}
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80007fc:	f7ff fed4 	bl	80005a8 <LL_RCC_IsActiveFlag_PINRST>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d00d      	beq.n	8000822 <Reset_BackupDomain+0x2a>
 8000806:	f7ff fee2 	bl	80005ce <LL_RCC_IsActiveFlag_SFTRST>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d108      	bne.n	8000822 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000810:	f003 ffba 	bl	8004788 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000814:	f003 ffb8 	bl	8004788 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000818:	f7ff fea4 	bl	8000564 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800081c:	f7ff feb3 	bl	8000586 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000820:	bf00      	nop
 8000822:	bf00      	nop
}
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800082c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000830:	f7ff fee0 	bl	80005f4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000834:	213f      	movs	r1, #63	@ 0x3f
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <Reset_IPCC+0x40>)
 8000838:	f7ff ff58 	bl	80006ec <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800083c:	213f      	movs	r1, #63	@ 0x3f
 800083e:	480a      	ldr	r0, [pc, #40]	@ (8000868 <Reset_IPCC+0x40>)
 8000840:	f7ff ff62 	bl	8000708 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000844:	213f      	movs	r1, #63	@ 0x3f
 8000846:	4808      	ldr	r0, [pc, #32]	@ (8000868 <Reset_IPCC+0x40>)
 8000848:	f7ff ff0a 	bl	8000660 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800084c:	213f      	movs	r1, #63	@ 0x3f
 800084e:	4806      	ldr	r0, [pc, #24]	@ (8000868 <Reset_IPCC+0x40>)
 8000850:	f7ff ff29 	bl	80006a6 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000854:	213f      	movs	r1, #63	@ 0x3f
 8000856:	4804      	ldr	r0, [pc, #16]	@ (8000868 <Reset_IPCC+0x40>)
 8000858:	f7ff ff14 	bl	8000684 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800085c:	213f      	movs	r1, #63	@ 0x3f
 800085e:	4802      	ldr	r0, [pc, #8]	@ (8000868 <Reset_IPCC+0x40>)
 8000860:	f7ff ff33 	bl	80006ca <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000864:	bf00      	nop
}
 8000866:	bd80      	pop	{r7, pc}
 8000868:	58000c00 	.word	0x58000c00

0800086c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000872:	2000      	movs	r0, #0
 8000874:	f008 f9be 	bl	8008bf4 <OTP_Read>
 8000878:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d005      	beq.n	800088c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	799b      	ldrb	r3, [r3, #6]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe3b 	bl	8000500 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800088a:	bf00      	nop
 800088c:	bf00      	nop
}
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <System_Init>:

static void System_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  Init_Smps();
 8000898:	f7ff ff98 	bl	80007cc <Init_Smps>

  Init_Exti();
 800089c:	f7ff ff9d 	bl	80007da <Init_Exti>

  Init_Rtc();
 80008a0:	f000 f802 	bl	80008a8 <Init_Rtc>

  return;
 80008a4:	bf00      	nop
}
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80008ac:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <Init_Rtc+0x1c>)
 80008ae:	f7ff ff46 	bl	800073e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80008b2:	2100      	movs	r1, #0
 80008b4:	4803      	ldr	r0, [pc, #12]	@ (80008c4 <Init_Rtc+0x1c>)
 80008b6:	f7ff ff52 	bl	800075e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80008ba:	4802      	ldr	r0, [pc, #8]	@ (80008c4 <Init_Rtc+0x1c>)
 80008bc:	f7ff ff32 	bl	8000724 <LL_RTC_EnableWriteProtection>

  return;
 80008c0:	bf00      	nop
}
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40002800 	.word	0x40002800

080008c8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80008cc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80008d0:	f7ff fe34 	bl	800053c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80008d4:	f009 facc 	bl	8009e70 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80008d8:	2004      	movs	r0, #4
 80008da:	f7ff fde7 	bl	80004ac <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 80008de:	f003 ff73 	bl	80047c8 <HAL_PWREx_EnableSRAMRetention>

  return;
 80008e2:	bf00      	nop
}
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80008ee:	f007 ff3f 	bl	8008770 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80008f2:	4a11      	ldr	r2, [pc, #68]	@ (8000938 <appe_Tl_Init+0x50>)
 80008f4:	2100      	movs	r1, #0
 80008f6:	2004      	movs	r0, #4
 80008f8:	f009 fc2e 	bl	800a158 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <appe_Tl_Init+0x54>)
 80008fe:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <appe_Tl_Init+0x58>)
 8000902:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	480e      	ldr	r0, [pc, #56]	@ (8000944 <appe_Tl_Init+0x5c>)
 800090a:	f007 fdf3 	bl	80084f4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <appe_Tl_Init+0x60>)
 8000910:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <appe_Tl_Init+0x64>)
 8000914:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <appe_Tl_Init+0x68>)
 8000918:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800091a:	f240 533c 	movw	r3, #1340	@ 0x53c
 800091e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	4618      	mov	r0, r3
 8000926:	f008 f865 	bl	80089f4 <TL_MM_Init>

  TL_Enable();
 800092a:	f007 ff1b 	bl	8008764 <TL_Enable>

  return;
 800092e:	bf00      	nop
}
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	0800852d 	.word	0x0800852d
 800093c:	20030734 	.word	0x20030734
 8000940:	08000955 	.word	0x08000955
 8000944:	0800096d 	.word	0x0800096d
 8000948:	2003094c 	.word	0x2003094c
 800094c:	20030840 	.word	0x20030840
 8000950:	200301f8 	.word	0x200301f8

08000954 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800095e:	bf00      	nop
}
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	330b      	adds	r3, #11
 800097a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	b29b      	uxth	r3, r3
 8000982:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000986:	2b07      	cmp	r3, #7
 8000988:	d81f      	bhi.n	80009ca <APPE_SysUserEvtRx+0x5e>
 800098a:	a201      	add	r2, pc, #4	@ (adr r2, 8000990 <APPE_SysUserEvtRx+0x24>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	080009b1 	.word	0x080009b1
 8000994:	080009c3 	.word	0x080009c3
 8000998:	080009cb 	.word	0x080009cb
 800099c:	080009cb 	.word	0x080009cb
 80009a0:	080009cb 	.word	0x080009cb
 80009a4:	080009cb 	.word	0x080009cb
 80009a8:	080009cb 	.word	0x080009cb
 80009ac:	080009cb 	.word	0x080009cb
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4618      	mov	r0, r3
 80009b6:	f007 fb53 	bl	8008060 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f81b 	bl	80009f6 <APPE_SysEvtReadyProcessing>
    break;
 80009c0:	e004      	b.n	80009cc <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 f806 	bl	80009d4 <APPE_SysEvtError>
    break;
 80009c8:	e000      	b.n	80009cc <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80009ca:	bf00      	nop
  }

  return;
 80009cc:	bf00      	nop
}
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	330b      	adds	r3, #11
 80009e2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3302      	adds	r3, #2
 80009e8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80009ea:	bf00      	nop
}
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b08a      	sub	sp, #40	@ 0x28
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	330b      	adds	r3, #11
 8000a1a:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	3302      	adds	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d11d      	bne.n	8000a66 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000a2a:	f7ff fc31 	bl	8000290 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000a2e:	230f      	movs	r3, #15
 8000a30:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000a32:	237f      	movs	r3, #127	@ 0x7f
 8000a34:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000a36:	f7ff fe05 	bl	8000644 <LL_DBGMCU_GetRevisionID>
 8000a3a:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000a42:	f7ff fdf1 	bl	8000628 <LL_DBGMCU_GetDeviceID>
 8000a46:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000a48:	6a3b      	ldr	r3, [r7, #32]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4618      	mov	r0, r3
 8000a54:	f007 faee 	bl	8008034 <SHCI_C2_Config>

    APP_BLE_Init();
 8000a58:	f008 f9d6 	bl	8008e08 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f009 fa18 	bl	8009e94 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000a64:	e007      	b.n	8000a76 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d103      	bne.n	8000a76 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
  return;
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
}
 8000a78:	3728      	adds	r7, #40	@ 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000a82:	f04f 30ff 	mov.w	r0, #4294967295
 8000a86:	f009 fa6b 	bl	8009f60 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8000a92:	f009 fa2f 	bl	8009ef4 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000a96:	bf00      	nop
}
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f009 fa5a 	bl	8009f60 <UTIL_SEQ_Run>
  return;
 8000aac:	bf00      	nop
}
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000abc:	2100      	movs	r1, #0
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f009 fb6c 	bl	800a19c <UTIL_SEQ_SetTask>
  return;
 8000ac4:	bf00      	nop
}
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f009 fbcd 	bl	800a274 <UTIL_SEQ_SetEvt>
  return;
 8000ada:	bf00      	nop
}
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000aea:	2002      	movs	r0, #2
 8000aec:	f009 fbe2 	bl	800a2b4 <UTIL_SEQ_WaitEvt>
  return;
 8000af0:	bf00      	nop
}
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <LL_EXTI_EnableIT_0_31>:
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <LL_EXTI_EnableIT_0_31+0x24>)
 8000b02:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000b06:	4905      	ldr	r1, [pc, #20]	@ (8000b1c <LL_EXTI_EnableIT_0_31+0x24>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	58000800 	.word	0x58000800

08000b20 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000b28:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4904      	ldr	r1, [pc, #16]	@ (8000b40 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	600b      	str	r3, [r1, #0]

}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	58000800 	.word	0x58000800

08000b44 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <ReadRtcSsrValue+0x3c>)
 8000b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <ReadRtcSsrValue+0x3c>)
 8000b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000b5a:	e005      	b.n	8000b68 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000b60:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <ReadRtcSsrValue+0x3c>)
 8000b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d1f5      	bne.n	8000b5c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000b70:	683b      	ldr	r3, [r7, #0]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40002800 	.word	0x40002800

08000b84 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	4613      	mov	r3, r2
 8000b92:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000b94:	79ba      	ldrb	r2, [r7, #6]
 8000b96:	491d      	ldr	r1, [pc, #116]	@ (8000c0c <LinkTimerAfter+0x88>)
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	440b      	add	r3, r1
 8000ba2:	3315      	adds	r3, #21
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d009      	beq.n	8000bc2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000bae:	7bfa      	ldrb	r2, [r7, #15]
 8000bb0:	4916      	ldr	r1, [pc, #88]	@ (8000c0c <LinkTimerAfter+0x88>)
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	440b      	add	r3, r1
 8000bbc:	3314      	adds	r3, #20
 8000bbe:	79fa      	ldrb	r2, [r7, #7]
 8000bc0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000bc2:	79fa      	ldrb	r2, [r7, #7]
 8000bc4:	4911      	ldr	r1, [pc, #68]	@ (8000c0c <LinkTimerAfter+0x88>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	440b      	add	r3, r1
 8000bd0:	3315      	adds	r3, #21
 8000bd2:	7bfa      	ldrb	r2, [r7, #15]
 8000bd4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000bd6:	79fa      	ldrb	r2, [r7, #7]
 8000bd8:	490c      	ldr	r1, [pc, #48]	@ (8000c0c <LinkTimerAfter+0x88>)
 8000bda:	4613      	mov	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	440b      	add	r3, r1
 8000be4:	3314      	adds	r3, #20
 8000be6:	79ba      	ldrb	r2, [r7, #6]
 8000be8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000bea:	79ba      	ldrb	r2, [r7, #6]
 8000bec:	4907      	ldr	r1, [pc, #28]	@ (8000c0c <LinkTimerAfter+0x88>)
 8000bee:	4613      	mov	r3, r2
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	4413      	add	r3, r2
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	440b      	add	r3, r1
 8000bf8:	3315      	adds	r3, #21
 8000bfa:	79fa      	ldrb	r2, [r7, #7]
 8000bfc:	701a      	strb	r2, [r3, #0]

  return;
 8000bfe:	bf00      	nop
}
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200000a0 	.word	0x200000a0

08000c10 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	460a      	mov	r2, r1
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000c20:	4b29      	ldr	r3, [pc, #164]	@ (8000cc8 <LinkTimerBefore+0xb8>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	79ba      	ldrb	r2, [r7, #6]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d032      	beq.n	8000c92 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000c2c:	79ba      	ldrb	r2, [r7, #6]
 8000c2e:	4927      	ldr	r1, [pc, #156]	@ (8000ccc <LinkTimerBefore+0xbc>)
 8000c30:	4613      	mov	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	4413      	add	r3, r2
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	440b      	add	r3, r1
 8000c3a:	3314      	adds	r3, #20
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000c40:	7bfa      	ldrb	r2, [r7, #15]
 8000c42:	4922      	ldr	r1, [pc, #136]	@ (8000ccc <LinkTimerBefore+0xbc>)
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	440b      	add	r3, r1
 8000c4e:	3315      	adds	r3, #21
 8000c50:	79fa      	ldrb	r2, [r7, #7]
 8000c52:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000c54:	79fa      	ldrb	r2, [r7, #7]
 8000c56:	491d      	ldr	r1, [pc, #116]	@ (8000ccc <LinkTimerBefore+0xbc>)
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	440b      	add	r3, r1
 8000c62:	3315      	adds	r3, #21
 8000c64:	79ba      	ldrb	r2, [r7, #6]
 8000c66:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000c68:	79fa      	ldrb	r2, [r7, #7]
 8000c6a:	4918      	ldr	r1, [pc, #96]	@ (8000ccc <LinkTimerBefore+0xbc>)
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	440b      	add	r3, r1
 8000c76:	3314      	adds	r3, #20
 8000c78:	7bfa      	ldrb	r2, [r7, #15]
 8000c7a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000c7c:	79ba      	ldrb	r2, [r7, #6]
 8000c7e:	4913      	ldr	r1, [pc, #76]	@ (8000ccc <LinkTimerBefore+0xbc>)
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	440b      	add	r3, r1
 8000c8a:	3314      	adds	r3, #20
 8000c8c:	79fa      	ldrb	r2, [r7, #7]
 8000c8e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000c90:	e014      	b.n	8000cbc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000c92:	79fa      	ldrb	r2, [r7, #7]
 8000c94:	490d      	ldr	r1, [pc, #52]	@ (8000ccc <LinkTimerBefore+0xbc>)
 8000c96:	4613      	mov	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4413      	add	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	440b      	add	r3, r1
 8000ca0:	3315      	adds	r3, #21
 8000ca2:	79ba      	ldrb	r2, [r7, #6]
 8000ca4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000ca6:	79ba      	ldrb	r2, [r7, #6]
 8000ca8:	4908      	ldr	r1, [pc, #32]	@ (8000ccc <LinkTimerBefore+0xbc>)
 8000caa:	4613      	mov	r3, r2
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	4413      	add	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	440b      	add	r3, r1
 8000cb4:	3314      	adds	r3, #20
 8000cb6:	79fa      	ldrb	r2, [r7, #7]
 8000cb8:	701a      	strb	r2, [r3, #0]
  return;
 8000cba:	bf00      	nop
}
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000130 	.word	0x20000130
 8000ccc:	200000a0 	.word	0x200000a0

08000cd0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cda:	4b4e      	ldr	r3, [pc, #312]	@ (8000e14 <linkTimer+0x144>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b06      	cmp	r3, #6
 8000ce2:	d118      	bne.n	8000d16 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8000e14 <linkTimer+0x144>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b4b      	ldr	r3, [pc, #300]	@ (8000e18 <linkTimer+0x148>)
 8000cec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000cee:	4a49      	ldr	r2, [pc, #292]	@ (8000e14 <linkTimer+0x144>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	4949      	ldr	r1, [pc, #292]	@ (8000e1c <linkTimer+0x14c>)
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	3315      	adds	r3, #21
 8000d04:	2206      	movs	r2, #6
 8000d06:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d08:	4b45      	ldr	r3, [pc, #276]	@ (8000e20 <linkTimer+0x150>)
 8000d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	81fb      	strh	r3, [r7, #14]
 8000d14:	e078      	b.n	8000e08 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000d16:	f000 f909 	bl	8000f2c <ReturnTimeElapsed>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000d1e:	79fa      	ldrb	r2, [r7, #7]
 8000d20:	493e      	ldr	r1, [pc, #248]	@ (8000e1c <linkTimer+0x14c>)
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
 8000d2c:	3308      	adds	r3, #8
 8000d2e:	6819      	ldr	r1, [r3, #0]
 8000d30:	89fb      	ldrh	r3, [r7, #14]
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	4419      	add	r1, r3
 8000d36:	4839      	ldr	r0, [pc, #228]	@ (8000e1c <linkTimer+0x14c>)
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	4403      	add	r3, r0
 8000d42:	3308      	adds	r3, #8
 8000d44:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000d46:	79fa      	ldrb	r2, [r7, #7]
 8000d48:	4934      	ldr	r1, [pc, #208]	@ (8000e1c <linkTimer+0x14c>)
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	440b      	add	r3, r1
 8000d54:	3308      	adds	r3, #8
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e14 <linkTimer+0x144>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	4619      	mov	r1, r3
 8000d62:	4a2e      	ldr	r2, [pc, #184]	@ (8000e1c <linkTimer+0x14c>)
 8000d64:	460b      	mov	r3, r1
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	440b      	add	r3, r1
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3308      	adds	r3, #8
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d337      	bcc.n	8000de8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000d78:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <linkTimer+0x144>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000d7e:	7b7a      	ldrb	r2, [r7, #13]
 8000d80:	4926      	ldr	r1, [pc, #152]	@ (8000e1c <linkTimer+0x14c>)
 8000d82:	4613      	mov	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4413      	add	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	440b      	add	r3, r1
 8000d8c:	3315      	adds	r3, #21
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000d92:	e013      	b.n	8000dbc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000d94:	7b7a      	ldrb	r2, [r7, #13]
 8000d96:	4921      	ldr	r1, [pc, #132]	@ (8000e1c <linkTimer+0x14c>)
 8000d98:	4613      	mov	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	440b      	add	r3, r1
 8000da2:	3315      	adds	r3, #21
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000da8:	7b7a      	ldrb	r2, [r7, #13]
 8000daa:	491c      	ldr	r1, [pc, #112]	@ (8000e1c <linkTimer+0x14c>)
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	440b      	add	r3, r1
 8000db6:	3315      	adds	r3, #21
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000dbc:	7b3b      	ldrb	r3, [r7, #12]
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d00b      	beq.n	8000dda <linkTimer+0x10a>
 8000dc2:	7b3a      	ldrb	r2, [r7, #12]
 8000dc4:	4915      	ldr	r1, [pc, #84]	@ (8000e1c <linkTimer+0x14c>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	440b      	add	r3, r1
 8000dd0:	3308      	adds	r3, #8
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d2dc      	bcs.n	8000d94 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000dda:	7b7a      	ldrb	r2, [r7, #13]
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fecf 	bl	8000b84 <LinkTimerAfter>
 8000de6:	e00f      	b.n	8000e08 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000de8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <linkTimer+0x144>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff0c 	bl	8000c10 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <linkTimer+0x144>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <linkTimer+0x148>)
 8000e00:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000e02:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <linkTimer+0x144>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000e08:	89fb      	ldrh	r3, [r7, #14]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000130 	.word	0x20000130
 8000e18:	20000131 	.word	0x20000131
 8000e1c:	200000a0 	.word	0x200000a0
 8000e20:	20000134 	.word	0x20000134

08000e24 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000e34:	4b39      	ldr	r3, [pc, #228]	@ (8000f1c <UnlinkTimer+0xf8>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	79fa      	ldrb	r2, [r7, #7]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d111      	bne.n	8000e64 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000e40:	4b36      	ldr	r3, [pc, #216]	@ (8000f1c <UnlinkTimer+0xf8>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b36      	ldr	r3, [pc, #216]	@ (8000f20 <UnlinkTimer+0xfc>)
 8000e48:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000e4a:	79fa      	ldrb	r2, [r7, #7]
 8000e4c:	4935      	ldr	r1, [pc, #212]	@ (8000f24 <UnlinkTimer+0x100>)
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	440b      	add	r3, r1
 8000e58:	3315      	adds	r3, #21
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f1c <UnlinkTimer+0xf8>)
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	e03e      	b.n	8000ee2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000e64:	79fa      	ldrb	r2, [r7, #7]
 8000e66:	492f      	ldr	r1, [pc, #188]	@ (8000f24 <UnlinkTimer+0x100>)
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	3314      	adds	r3, #20
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000e78:	79fa      	ldrb	r2, [r7, #7]
 8000e7a:	492a      	ldr	r1, [pc, #168]	@ (8000f24 <UnlinkTimer+0x100>)
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	440b      	add	r3, r1
 8000e86:	3315      	adds	r3, #21
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000e8c:	79f9      	ldrb	r1, [r7, #7]
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	4824      	ldr	r0, [pc, #144]	@ (8000f24 <UnlinkTimer+0x100>)
 8000e92:	460b      	mov	r3, r1
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	440b      	add	r3, r1
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4403      	add	r3, r0
 8000e9c:	3315      	adds	r3, #21
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2d8      	uxtb	r0, r3
 8000ea2:	4920      	ldr	r1, [pc, #128]	@ (8000f24 <UnlinkTimer+0x100>)
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	440b      	add	r3, r1
 8000eae:	3315      	adds	r3, #21
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d013      	beq.n	8000ee2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000eba:	79f9      	ldrb	r1, [r7, #7]
 8000ebc:	7bba      	ldrb	r2, [r7, #14]
 8000ebe:	4819      	ldr	r0, [pc, #100]	@ (8000f24 <UnlinkTimer+0x100>)
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	440b      	add	r3, r1
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4403      	add	r3, r0
 8000eca:	3314      	adds	r3, #20
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b2d8      	uxtb	r0, r3
 8000ed0:	4914      	ldr	r1, [pc, #80]	@ (8000f24 <UnlinkTimer+0x100>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	3314      	adds	r3, #20
 8000ede:	4602      	mov	r2, r0
 8000ee0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000ee2:	79fa      	ldrb	r2, [r7, #7]
 8000ee4:	490f      	ldr	r1, [pc, #60]	@ (8000f24 <UnlinkTimer+0x100>)
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	330c      	adds	r3, #12
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <UnlinkTimer+0xf8>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b06      	cmp	r3, #6
 8000efe:	d107      	bne.n	8000f10 <UnlinkTimer+0xec>
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d104      	bne.n	8000f10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <UnlinkTimer+0x104>)
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
}
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	20000130 	.word	0x20000130
 8000f20:	20000131 	.word	0x20000131
 8000f24:	200000a0 	.word	0x200000a0
 8000f28:	20000134 	.word	0x20000134

08000f2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000f32:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <ReturnTimeElapsed+0x70>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3a:	d026      	beq.n	8000f8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000f3c:	f7ff fe02 	bl	8000b44 <ReadRtcSsrValue>
 8000f40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000f42:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <ReturnTimeElapsed+0x70>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d805      	bhi.n	8000f58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <ReturnTimeElapsed+0x70>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	e00a      	b.n	8000f6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <ReturnTimeElapsed+0x74>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000f64:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <ReturnTimeElapsed+0x70>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <ReturnTimeElapsed+0x78>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	fb02 f303 	mul.w	r3, r2, r3
 8000f7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <ReturnTimeElapsed+0x7c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	40d3      	lsrs	r3, r2
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	e001      	b.n	8000f8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	b29b      	uxth	r3, r3
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000134 	.word	0x20000134
 8000fa0:	2000013c 	.word	0x2000013c
 8000fa4:	2000013a 	.word	0x2000013a
 8000fa8:	20000139 	.word	0x20000139

08000fac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d108      	bne.n	8000fce <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000fbc:	f7ff fdc2 	bl	8000b44 <ReadRtcSsrValue>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a21      	ldr	r2, [pc, #132]	@ (8001048 <RestartWakeupCounter+0x9c>)
 8000fc4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	f002 fe93 	bl	8003cf2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000fcc:	e039      	b.n	8001042 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d803      	bhi.n	8000fdc <RestartWakeupCounter+0x30>
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <RestartWakeupCounter+0xa0>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d002      	beq.n	8000fe2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000fe2:	bf00      	nop
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <RestartWakeupCounter+0xa4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d0f8      	beq.n	8000fe4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000ff2:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <RestartWakeupCounter+0xa4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <RestartWakeupCounter+0xa4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001002:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <RestartWakeupCounter+0xa8>)
 8001006:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800100a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800100c:	2003      	movs	r0, #3
 800100e:	f002 fe7e 	bl	8003d0e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <RestartWakeupCounter+0xac>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	0c1b      	lsrs	r3, r3, #16
 8001018:	041b      	lsls	r3, r3, #16
 800101a:	88fa      	ldrh	r2, [r7, #6]
 800101c:	490e      	ldr	r1, [pc, #56]	@ (8001058 <RestartWakeupCounter+0xac>)
 800101e:	4313      	orrs	r3, r2
 8001020:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001022:	f7ff fd8f 	bl	8000b44 <ReadRtcSsrValue>
 8001026:	4603      	mov	r3, r0
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <RestartWakeupCounter+0x9c>)
 800102a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800102c:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <RestartWakeupCounter+0xa4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <RestartWakeupCounter+0xa4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800103a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800103c:	f3af 8000 	nop.w
  return ;
 8001040:	bf00      	nop
}
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000134 	.word	0x20000134
 800104c:	20000139 	.word	0x20000139
 8001050:	20000248 	.word	0x20000248
 8001054:	58000800 	.word	0x58000800
 8001058:	40002800 	.word	0x40002800

0800105c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001062:	4b45      	ldr	r3, [pc, #276]	@ (8001178 <RescheduleTimerList+0x11c>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800106a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800106e:	d107      	bne.n	8001080 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001070:	bf00      	nop
 8001072:	4b42      	ldr	r3, [pc, #264]	@ (800117c <RescheduleTimerList+0x120>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f8      	bne.n	8001072 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001080:	4b3e      	ldr	r3, [pc, #248]	@ (800117c <RescheduleTimerList+0x120>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	4b3d      	ldr	r3, [pc, #244]	@ (800117c <RescheduleTimerList+0x120>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800108e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001090:	4b3b      	ldr	r3, [pc, #236]	@ (8001180 <RescheduleTimerList+0x124>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	493a      	ldr	r1, [pc, #232]	@ (8001184 <RescheduleTimerList+0x128>)
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	440b      	add	r3, r1
 80010a4:	3308      	adds	r3, #8
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80010aa:	f7ff ff3f 	bl	8000f2c <ReturnTimeElapsed>
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d205      	bcs.n	80010c6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80010be:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <RescheduleTimerList+0x12c>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e04d      	b.n	8001162 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	4a30      	ldr	r2, [pc, #192]	@ (800118c <RescheduleTimerList+0x130>)
 80010ca:	8812      	ldrh	r2, [r2, #0]
 80010cc:	b292      	uxth	r2, r2
 80010ce:	4413      	add	r3, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d906      	bls.n	80010e6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80010d8:	4b2c      	ldr	r3, [pc, #176]	@ (800118c <RescheduleTimerList+0x130>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80010de:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <RescheduleTimerList+0x12c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e03d      	b.n	8001162 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80010f0:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <RescheduleTimerList+0x12c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010f6:	e034      	b.n	8001162 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	4922      	ldr	r1, [pc, #136]	@ (8001184 <RescheduleTimerList+0x128>)
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	440b      	add	r3, r1
 8001106:	3308      	adds	r3, #8
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	429a      	cmp	r2, r3
 800110e:	d20a      	bcs.n	8001126 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	491c      	ldr	r1, [pc, #112]	@ (8001184 <RescheduleTimerList+0x128>)
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	440b      	add	r3, r1
 800111e:	3308      	adds	r3, #8
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e013      	b.n	800114e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	4916      	ldr	r1, [pc, #88]	@ (8001184 <RescheduleTimerList+0x128>)
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	440b      	add	r3, r1
 8001134:	3308      	adds	r3, #8
 8001136:	6819      	ldr	r1, [r3, #0]
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	1ac9      	subs	r1, r1, r3
 800113e:	4811      	ldr	r0, [pc, #68]	@ (8001184 <RescheduleTimerList+0x128>)
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4403      	add	r3, r0
 800114a:	3308      	adds	r3, #8
 800114c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	490c      	ldr	r1, [pc, #48]	@ (8001184 <RescheduleTimerList+0x128>)
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	440b      	add	r3, r1
 800115c:	3315      	adds	r3, #21
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	2b06      	cmp	r3, #6
 8001166:	d1c7      	bne.n	80010f8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001168:	89bb      	ldrh	r3, [r7, #12]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff1e 	bl	8000fac <RestartWakeupCounter>

  return ;
 8001170:	bf00      	nop
}
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40002800 	.word	0x40002800
 800117c:	20000248 	.word	0x20000248
 8001180:	20000130 	.word	0x20000130
 8001184:	200000a0 	.word	0x200000a0
 8001188:	20000138 	.word	0x20000138
 800118c:	2000013e 	.word	0x2000013e

08001190 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001196:	f3ef 8310 	mrs	r3, PRIMASK
 800119a:	617b      	str	r3, [r7, #20]
  return(result);
 800119c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011a4:	4b59      	ldr	r3, [pc, #356]	@ (800130c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	22ca      	movs	r2, #202	@ 0xca
 80011aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80011ac:	4b57      	ldr	r3, [pc, #348]	@ (800130c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2253      	movs	r2, #83	@ 0x53
 80011b2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80011b4:	4b55      	ldr	r3, [pc, #340]	@ (800130c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	4b54      	ldr	r3, [pc, #336]	@ (800130c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011c2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80011c4:	4b52      	ldr	r3, [pc, #328]	@ (8001310 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80011cc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80011d0:	4950      	ldr	r1, [pc, #320]	@ (8001314 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80011d2:	4613      	mov	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	440b      	add	r3, r1
 80011dc:	330c      	adds	r3, #12
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d16e      	bne.n	80012c4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80011e6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80011ea:	494a      	ldr	r1, [pc, #296]	@ (8001314 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80011fa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80011fe:	4945      	ldr	r1, [pc, #276]	@ (8001314 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	3310      	adds	r3, #16
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001210:	4b41      	ldr	r3, [pc, #260]	@ (8001318 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d04c      	beq.n	80012b4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800121a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800121e:	493d      	ldr	r1, [pc, #244]	@ (8001314 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	440b      	add	r3, r1
 800122a:	330d      	adds	r3, #13
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d124      	bne.n	800127e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001234:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001238:	2101      	movs	r1, #1
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fdf2 	bl	8000e24 <UnlinkTimer>
 8001240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001242:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	f383 8810 	msr	PRIMASK, r3
}
 800124a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800124c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001250:	4930      	ldr	r1, [pc, #192]	@ (8001314 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	3304      	adds	r3, #4
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fa32 	bl	80016d0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800126c:	4b27      	ldr	r3, [pc, #156]	@ (800130c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	22ca      	movs	r2, #202	@ 0xca
 8001272:	625a      	str	r2, [r3, #36]	@ 0x24
 8001274:	4b25      	ldr	r3, [pc, #148]	@ (800130c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2253      	movs	r2, #83	@ 0x53
 800127a:	625a      	str	r2, [r3, #36]	@ 0x24
 800127c:	e012      	b.n	80012a4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f383 8810 	msr	PRIMASK, r3
}
 8001288:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800128a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f99a 	bl	80015c8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001294:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	22ca      	movs	r2, #202	@ 0xca
 800129a:	625a      	str	r2, [r3, #36]	@ 0x24
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2253      	movs	r2, #83	@ 0x53
 80012a2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80012a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	4619      	mov	r1, r3
 80012ac:	69b8      	ldr	r0, [r7, #24]
 80012ae:	f000 fa95 	bl	80017dc <HW_TS_RTC_Int_AppNot>
 80012b2:	e022      	b.n	80012fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80012b4:	f7ff fed2 	bl	800105c <RescheduleTimerList>
 80012b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	f383 8810 	msr	PRIMASK, r3
}
 80012c2:	e01a      	b.n	80012fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80012c4:	bf00      	nop
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f8      	beq.n	80012c6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80012d4:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80012e4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80012e6:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80012e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f383 8810 	msr	PRIMASK, r3
}
 80012f8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	22ff      	movs	r2, #255	@ 0xff
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001302:	bf00      	nop
}
 8001304:	3728      	adds	r7, #40	@ 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000248 	.word	0x20000248
 8001310:	20000130 	.word	0x20000130
 8001314:	200000a0 	.word	0x200000a0
 8001318:	20000138 	.word	0x20000138
 800131c:	58000800 	.word	0x58000800

08001320 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800132c:	4b5e      	ldr	r3, [pc, #376]	@ (80014a8 <HW_TS_Init+0x188>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	22ca      	movs	r2, #202	@ 0xca
 8001332:	625a      	str	r2, [r3, #36]	@ 0x24
 8001334:	4b5c      	ldr	r3, [pc, #368]	@ (80014a8 <HW_TS_Init+0x188>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2253      	movs	r2, #83	@ 0x53
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800133c:	4b5b      	ldr	r3, [pc, #364]	@ (80014ac <HW_TS_Init+0x18c>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	4a5a      	ldr	r2, [pc, #360]	@ (80014ac <HW_TS_Init+0x18c>)
 8001342:	f043 0320 	orr.w	r3, r3, #32
 8001346:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001348:	4b58      	ldr	r3, [pc, #352]	@ (80014ac <HW_TS_Init+0x18c>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	b2db      	uxtb	r3, r3
 8001354:	f1c3 0304 	rsb	r3, r3, #4
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b55      	ldr	r3, [pc, #340]	@ (80014b0 <HW_TS_Init+0x190>)
 800135c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800135e:	4b53      	ldr	r3, [pc, #332]	@ (80014ac <HW_TS_Init+0x18c>)
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001366:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800136a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	fa92 f2a2 	rbit	r2, r2
 8001372:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	2a00      	cmp	r2, #0
 800137c:	d101      	bne.n	8001382 <HW_TS_Init+0x62>
  {
    return 32U;
 800137e:	2220      	movs	r2, #32
 8001380:	e003      	b.n	800138a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	fab2 f282 	clz	r2, r2
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	40d3      	lsrs	r3, r2
 800138c:	b2db      	uxtb	r3, r3
 800138e:	3301      	adds	r3, #1
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b48      	ldr	r3, [pc, #288]	@ (80014b4 <HW_TS_Init+0x194>)
 8001394:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001396:	4b45      	ldr	r3, [pc, #276]	@ (80014ac <HW_TS_Init+0x18c>)
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	b29b      	uxth	r3, r3
 800139c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	3301      	adds	r3, #1
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4b44      	ldr	r3, [pc, #272]	@ (80014b8 <HW_TS_Init+0x198>)
 80013a8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80013aa:	4b43      	ldr	r3, [pc, #268]	@ (80014b8 <HW_TS_Init+0x198>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	4a40      	ldr	r2, [pc, #256]	@ (80014b4 <HW_TS_Init+0x194>)
 80013b2:	7812      	ldrb	r2, [r2, #0]
 80013b4:	fb02 f303 	mul.w	r3, r2, r3
 80013b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80013bc:	4a3c      	ldr	r2, [pc, #240]	@ (80014b0 <HW_TS_Init+0x190>)
 80013be:	7812      	ldrb	r2, [r2, #0]
 80013c0:	40d3      	lsrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d904      	bls.n	80013d8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80013ce:	4b3b      	ldr	r3, [pc, #236]	@ (80014bc <HW_TS_Init+0x19c>)
 80013d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013d4:	801a      	strh	r2, [r3, #0]
 80013d6:	e003      	b.n	80013e0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b37      	ldr	r3, [pc, #220]	@ (80014bc <HW_TS_Init+0x19c>)
 80013de:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80013e0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80013e4:	f7ff fb9c 	bl	8000b20 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80013e8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80013ec:	f7ff fb84 	bl	8000af8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d13d      	bne.n	8001472 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80013f6:	4b32      	ldr	r3, [pc, #200]	@ (80014c0 <HW_TS_Init+0x1a0>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80013fc:	4b31      	ldr	r3, [pc, #196]	@ (80014c4 <HW_TS_Init+0x1a4>)
 80013fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001402:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001404:	2300      	movs	r3, #0
 8001406:	77fb      	strb	r3, [r7, #31]
 8001408:	e00c      	b.n	8001424 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800140a:	7ffa      	ldrb	r2, [r7, #31]
 800140c:	492e      	ldr	r1, [pc, #184]	@ (80014c8 <HW_TS_Init+0x1a8>)
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	440b      	add	r3, r1
 8001418:	330c      	adds	r3, #12
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800141e:	7ffb      	ldrb	r3, [r7, #31]
 8001420:	3301      	adds	r3, #1
 8001422:	77fb      	strb	r3, [r7, #31]
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	2b05      	cmp	r3, #5
 8001428:	d9ef      	bls.n	800140a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <HW_TS_Init+0x1ac>)
 800142c:	2206      	movs	r2, #6
 800142e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001430:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <HW_TS_Init+0x188>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <HW_TS_Init+0x188>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800143e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <HW_TS_Init+0x188>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <HW_TS_Init+0x188>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001450:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001452:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <HW_TS_Init+0x1b0>)
 8001454:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001458:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800145a:	2003      	movs	r0, #3
 800145c:	f002 fc57 	bl	8003d0e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HW_TS_Init+0x188>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HW_TS_Init+0x188>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	e009      	b.n	8001486 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <HW_TS_Init+0x188>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001480:	2003      	movs	r0, #3
 8001482:	f002 fc36 	bl	8003cf2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HW_TS_Init+0x188>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	22ff      	movs	r2, #255	@ 0xff
 800148c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800148e:	2200      	movs	r2, #0
 8001490:	2103      	movs	r1, #3
 8001492:	2003      	movs	r0, #3
 8001494:	f002 fbeb 	bl	8003c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001498:	2003      	movs	r0, #3
 800149a:	f002 fc02 	bl	8003ca2 <HAL_NVIC_EnableIRQ>

  return;
 800149e:	bf00      	nop
}
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000248 	.word	0x20000248
 80014ac:	40002800 	.word	0x40002800
 80014b0:	20000139 	.word	0x20000139
 80014b4:	2000013a 	.word	0x2000013a
 80014b8:	2000013c 	.word	0x2000013c
 80014bc:	2000013e 	.word	0x2000013e
 80014c0:	20000138 	.word	0x20000138
 80014c4:	20000134 	.word	0x20000134
 80014c8:	200000a0 	.word	0x200000a0
 80014cc:	20000130 	.word	0x20000130
 80014d0:	58000800 	.word	0x58000800

080014d4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b08b      	sub	sp, #44	@ 0x2c
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	4613      	mov	r3, r2
 80014e2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014ea:	f3ef 8310 	mrs	r3, PRIMASK
 80014ee:	61fb      	str	r3, [r7, #28]
  return(result);
 80014f0:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80014f8:	e004      	b.n	8001504 <HW_TS_Create+0x30>
  {
    loop++;
 80014fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014fe:	3301      	adds	r3, #1
 8001500:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001504:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001508:	2b05      	cmp	r3, #5
 800150a:	d80c      	bhi.n	8001526 <HW_TS_Create+0x52>
 800150c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001510:	492c      	ldr	r1, [pc, #176]	@ (80015c4 <HW_TS_Create+0xf0>)
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	440b      	add	r3, r1
 800151c:	330c      	adds	r3, #12
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1e9      	bne.n	80014fa <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001526:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800152a:	2b06      	cmp	r3, #6
 800152c:	d038      	beq.n	80015a0 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800152e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001532:	4924      	ldr	r1, [pc, #144]	@ (80015c4 <HW_TS_Create+0xf0>)
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	330c      	adds	r3, #12
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	f383 8810 	msr	PRIMASK, r3
}
 800154e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001550:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001554:	491b      	ldr	r1, [pc, #108]	@ (80015c4 <HW_TS_Create+0xf0>)
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	440b      	add	r3, r1
 8001560:	3310      	adds	r3, #16
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001566:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800156a:	4916      	ldr	r1, [pc, #88]	@ (80015c4 <HW_TS_Create+0xf0>)
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	440b      	add	r3, r1
 8001576:	330d      	adds	r3, #13
 8001578:	79fa      	ldrb	r2, [r7, #7]
 800157a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800157c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001580:	4910      	ldr	r1, [pc, #64]	@ (80015c4 <HW_TS_Create+0xf0>)
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001596:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001598:	2300      	movs	r3, #0
 800159a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800159e:	e008      	b.n	80015b2 <HW_TS_Create+0xde>
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f383 8810 	msr	PRIMASK, r3
}
 80015aa:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80015ac:	2301      	movs	r3, #1
 80015ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 80015b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	372c      	adds	r7, #44	@ 0x2c
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200000a0 	.word	0x200000a0

080015c8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015d2:	f3ef 8310 	mrs	r3, PRIMASK
 80015d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80015d8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80015da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80015e0:	2003      	movs	r0, #3
 80015e2:	f002 fb6c 	bl	8003cbe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80015e6:	4b34      	ldr	r3, [pc, #208]	@ (80016b8 <HW_TS_Stop+0xf0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	22ca      	movs	r2, #202	@ 0xca
 80015ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80015ee:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <HW_TS_Stop+0xf0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2253      	movs	r2, #83	@ 0x53
 80015f4:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	4930      	ldr	r1, [pc, #192]	@ (80016bc <HW_TS_Stop+0xf4>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	330c      	adds	r3, #12
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d142      	bne.n	8001694 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fc06 	bl	8000e24 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001618:	4b29      	ldr	r3, [pc, #164]	@ (80016c0 <HW_TS_Stop+0xf8>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800161e:	7cfb      	ldrb	r3, [r7, #19]
 8001620:	2b06      	cmp	r3, #6
 8001622:	d12f      	bne.n	8001684 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001624:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <HW_TS_Stop+0xfc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800162c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001630:	d107      	bne.n	8001642 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001632:	bf00      	nop
 8001634:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HW_TS_Stop+0xf0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f8      	bne.n	8001634 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001642:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <HW_TS_Stop+0xf0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <HW_TS_Stop+0xf0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001650:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001652:	bf00      	nop
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <HW_TS_Stop+0xf0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f8      	beq.n	8001654 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HW_TS_Stop+0xf0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <HW_TS_Stop+0xf0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001672:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <HW_TS_Stop+0x100>)
 8001676:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800167a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800167c:	2003      	movs	r0, #3
 800167e:	f002 fb46 	bl	8003d0e <HAL_NVIC_ClearPendingIRQ>
 8001682:	e007      	b.n	8001694 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <HW_TS_Stop+0x104>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	7cfa      	ldrb	r2, [r7, #19]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001690:	f7ff fce4 	bl	800105c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <HW_TS_Stop+0xf0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	22ff      	movs	r2, #255	@ 0xff
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800169c:	2003      	movs	r0, #3
 800169e:	f002 fb00 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f383 8810 	msr	PRIMASK, r3
}
 80016ac:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016ae:	bf00      	nop
}
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000248 	.word	0x20000248
 80016bc:	200000a0 	.word	0x200000a0
 80016c0:	20000130 	.word	0x20000130
 80016c4:	40002800 	.word	0x40002800
 80016c8:	58000800 	.word	0x58000800
 80016cc:	20000131 	.word	0x20000131

080016d0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80016dc:	79fa      	ldrb	r2, [r7, #7]
 80016de:	493b      	ldr	r1, [pc, #236]	@ (80017cc <HW_TS_Start+0xfc>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	330c      	adds	r3, #12
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d103      	bne.n	80016fc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff66 	bl	80015c8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016fc:	f3ef 8310 	mrs	r3, PRIMASK
 8001700:	60fb      	str	r3, [r7, #12]
  return(result);
 8001702:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001704:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001706:	b672      	cpsid	i
}
 8001708:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800170a:	2003      	movs	r0, #3
 800170c:	f002 fad7 	bl	8003cbe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001710:	4b2f      	ldr	r3, [pc, #188]	@ (80017d0 <HW_TS_Start+0x100>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	22ca      	movs	r2, #202	@ 0xca
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24
 8001718:	4b2d      	ldr	r3, [pc, #180]	@ (80017d0 <HW_TS_Start+0x100>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2253      	movs	r2, #83	@ 0x53
 800171e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001720:	79fa      	ldrb	r2, [r7, #7]
 8001722:	492a      	ldr	r1, [pc, #168]	@ (80017cc <HW_TS_Start+0xfc>)
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	330c      	adds	r3, #12
 8001730:	2202      	movs	r2, #2
 8001732:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001734:	79fa      	ldrb	r2, [r7, #7]
 8001736:	4925      	ldr	r1, [pc, #148]	@ (80017cc <HW_TS_Start+0xfc>)
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	3308      	adds	r3, #8
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001748:	79fa      	ldrb	r2, [r7, #7]
 800174a:	4920      	ldr	r1, [pc, #128]	@ (80017cc <HW_TS_Start+0xfc>)
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	3304      	adds	r3, #4
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fab6 	bl	8000cd0 <linkTimer>
 8001764:	4603      	mov	r3, r0
 8001766:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001768:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <HW_TS_Start+0x104>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <HW_TS_Start+0x108>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	7c7a      	ldrb	r2, [r7, #17]
 8001776:	429a      	cmp	r2, r3
 8001778:	d002      	beq.n	8001780 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800177a:	f7ff fc6f 	bl	800105c <RescheduleTimerList>
 800177e:	e013      	b.n	80017a8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001780:	79fa      	ldrb	r2, [r7, #7]
 8001782:	4912      	ldr	r1, [pc, #72]	@ (80017cc <HW_TS_Start+0xfc>)
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	3308      	adds	r3, #8
 8001790:	6819      	ldr	r1, [r3, #0]
 8001792:	8a7b      	ldrh	r3, [r7, #18]
 8001794:	79fa      	ldrb	r2, [r7, #7]
 8001796:	1ac9      	subs	r1, r1, r3
 8001798:	480c      	ldr	r0, [pc, #48]	@ (80017cc <HW_TS_Start+0xfc>)
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4403      	add	r3, r0
 80017a4:	3308      	adds	r3, #8
 80017a6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80017a8:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <HW_TS_Start+0x100>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	22ff      	movs	r2, #255	@ 0xff
 80017ae:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017b0:	2003      	movs	r0, #3
 80017b2:	f002 fa76 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f383 8810 	msr	PRIMASK, r3
}
 80017c0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80017c2:	bf00      	nop
}
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200000a0 	.word	0x200000a0
 80017d0:	20000248 	.word	0x20000248
 80017d4:	20000130 	.word	0x20000130
 80017d8:	20000131 	.word	0x20000131

080017dc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	460b      	mov	r3, r1
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4798      	blx	r3

  return;
 80017ee:	bf00      	nop
}
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b09      	ldr	r3, [pc, #36]	@ (800182c <HAL_UART_TxCpltCallback+0x34>)
 8001808:	429a      	cmp	r2, r3
 800180a:	d107      	bne.n	800181c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_UART_TxCpltCallback+0x38>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_UART_TxCpltCallback+0x38>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4798      	blx	r3
            }
            break;
 800181a:	e001      	b.n	8001820 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800181c:	bf00      	nop
 800181e:	e000      	b.n	8001822 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001820:	bf00      	nop
    }

    return;
 8001822:	bf00      	nop
}
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40013800 	.word	0x40013800
 8001830:	20000140 	.word	0x20000140

08001834 <LL_RCC_LSE_SetDriveCapability>:
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001844:	f023 0218 	bic.w	r2, r3, #24
 8001848:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4313      	orrs	r3, r2
 8001850:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_AHB1_GRP1_EnableClock>:
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800186e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4313      	orrs	r3, r2
 8001876:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800187c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_AHB2_GRP1_EnableClock>:
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800189a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800189e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4013      	ands	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c8:	f001 f802 	bl	80028d0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80018cc:	f7fe ff5a 	bl	8000784 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d0:	f000 f815 	bl	80018fe <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80018d4:	f000 f85f 	bl	8001996 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80018d8:	f000 f8f0 	bl	8001abc <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018dc:	f000 f972 	bl	8001bc4 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e0:	f000 f94e 	bl	8001b80 <MX_DMA_Init>
  MX_ADC1_Init();
 80018e4:	f000 f878 	bl	80019d8 <MX_ADC1_Init>
  MX_RTC_Init();
 80018e8:	f000 f91a 	bl	8001b20 <MX_RTC_Init>
  MX_RNG_Init();
 80018ec:	f000 f902 	bl	8001af4 <MX_RNG_Init>
  MX_RF_Init();
 80018f0:	f000 f8f8 	bl	8001ae4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80018f4:	f7fe ff54 	bl	80007a0 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80018f8:	f7ff f8c1 	bl	8000a7e <MX_APPE_Process>
 80018fc:	e7fc      	b.n	80018f8 <main+0x34>

080018fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b098      	sub	sp, #96	@ 0x60
 8001902:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	2244      	movs	r2, #68	@ 0x44
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f008 fd61 	bl	800a3d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001912:	463b      	mov	r3, r7
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	615a      	str	r2, [r3, #20]
 8001922:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001924:	f002 ff30 	bl	8004788 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff ff83 	bl	8001834 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800192e:	2307      	movs	r3, #7
 8001930:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001932:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001938:	2301      	movs	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800193c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001940:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001946:	2300      	movs	r3, #0
 8001948:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4618      	mov	r0, r3
 8001950:	f003 faa2 	bl	8004e98 <HAL_RCC_OscConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0x60>
  {
    Error_Handler();
 800195a:	f000 f940 	bl	8001bde <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800195e:	236f      	movs	r3, #111	@ 0x6f
 8001960:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001962:	2302      	movs	r3, #2
 8001964:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800197a:	463b      	mov	r3, r7
 800197c:	2101      	movs	r1, #1
 800197e:	4618      	mov	r0, r3
 8001980:	f003 fdc0 	bl	8005504 <HAL_RCC_ClockConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0x90>
  {
    Error_Handler();
 800198a:	f000 f928 	bl	8001bde <Error_Handler>
  }
}
 800198e:	bf00      	nop
 8001990:	3760      	adds	r7, #96	@ 0x60
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b08c      	sub	sp, #48	@ 0x30
 800199a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800199c:	463b      	mov	r3, r7
 800199e:	2230      	movs	r2, #48	@ 0x30
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f008 fd16 	bl	800a3d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80019a8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019ac:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80019ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80019b4:	2302      	movs	r3, #2
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019bc:	463b      	mov	r3, r7
 80019be:	4618      	mov	r0, r3
 80019c0:	f004 f936 	bl	8005c30 <HAL_RCCEx_PeriphCLKConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80019ca:	f000 f908 	bl	8001bde <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80019ce:	bf00      	nop
 80019d0:	3730      	adds	r7, #48	@ 0x30
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019e8:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 80019ea:	4a30      	ldr	r2, [pc, #192]	@ (8001aac <MX_ADC1_Init+0xd4>)
 80019ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019ee:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019f4:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019fa:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a00:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a02:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a06:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a08:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	615a      	str	r2, [r3, #20]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001a0e:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a10:	2207      	movs	r2, #7
 8001a12:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001a14:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a16:	2207      	movs	r2, #7
 8001a18:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a1a:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a20:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 8001a26:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a34:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a40:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a48:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a4e:	4816      	ldr	r0, [pc, #88]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a50:	f001 f96e 	bl	8002d30 <HAL_ADC_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001a5a:	f000 f8c0 	bl	8001bde <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <MX_ADC1_Init+0xd8>)
 8001a60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480e      	ldr	r0, [pc, #56]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a70:	f001 fcbc 	bl	80033ec <HAL_ADC_ConfigChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001a7a:	f000 f8b0 	bl	8001bde <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <MX_ADC1_Init+0xdc>)
 8001a80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a82:	2304      	movs	r3, #4
 8001a84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
 8001a86:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <MX_ADC1_Init+0xe0>)
 8001a88:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <MX_ADC1_Init+0xd0>)
 8001a90:	f001 fcac 	bl	80033ec <HAL_ADC_ConfigChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001a9a:	f000 f8a0 	bl	8001bde <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000144 	.word	0x20000144
 8001aac:	40012400 	.word	0x40012400
 8001ab0:	14000020 	.word	0x14000020
 8001ab4:	24000200 	.word	0x24000200
 8001ab8:	07ffff04 	.word	0x07ffff04

08001abc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <MX_IPCC_Init+0x20>)
 8001ac2:	4a07      	ldr	r2, [pc, #28]	@ (8001ae0 <MX_IPCC_Init+0x24>)
 8001ac4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	@ (8001adc <MX_IPCC_Init+0x20>)
 8001ac8:	f002 fdd8 	bl	800467c <HAL_IPCC_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001ad2:	f000 f884 	bl	8001bde <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200001f8 	.word	0x200001f8
 8001ae0:	58000c00 	.word	0x58000c00

08001ae4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001af8:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <MX_RNG_Init+0x24>)
 8001afa:	4a08      	ldr	r2, [pc, #32]	@ (8001b1c <MX_RNG_Init+0x28>)
 8001afc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001afe:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <MX_RNG_Init+0x24>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001b04:	4804      	ldr	r0, [pc, #16]	@ (8001b18 <MX_RNG_Init+0x24>)
 8001b06:	f004 f989 	bl	8005e1c <HAL_RNG_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001b10:	f000 f865 	bl	8001bde <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000234 	.word	0x20000234
 8001b1c:	58001000 	.word	0x58001000

08001b20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b24:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <MX_RTC_Init+0x58>)
 8001b26:	4a15      	ldr	r2, [pc, #84]	@ (8001b7c <MX_RTC_Init+0x5c>)
 8001b28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <MX_RTC_Init+0x58>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <MX_RTC_Init+0x58>)
 8001b32:	220f      	movs	r2, #15
 8001b34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <MX_RTC_Init+0x58>)
 8001b38:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001b3c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <MX_RTC_Init+0x58>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <MX_RTC_Init+0x58>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <MX_RTC_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b50:	4809      	ldr	r0, [pc, #36]	@ (8001b78 <MX_RTC_Init+0x58>)
 8001b52:	f004 fa01 	bl	8005f58 <HAL_RTC_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001b5c:	f000 f83f 	bl	8001bde <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001b60:	2200      	movs	r2, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	4804      	ldr	r0, [pc, #16]	@ (8001b78 <MX_RTC_Init+0x58>)
 8001b66:	f004 faf7 	bl	8006158 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001b70:	f000 f835 	bl	8001bde <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000248 	.word	0x20000248
 8001b7c:	40002800 	.word	0x40002800

08001b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b84:	2004      	movs	r0, #4
 8001b86:	f7ff fe6b 	bl	8001860 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7ff fe68 	bl	8001860 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	200b      	movs	r0, #11
 8001b96:	f002 f86a 	bl	8003c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b9a:	200b      	movs	r0, #11
 8001b9c:	f002 f881 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	200c      	movs	r0, #12
 8001ba6:	f002 f862 	bl	8003c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001baa:	200c      	movs	r0, #12
 8001bac:	f002 f879 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	200d      	movs	r0, #13
 8001bb6:	f002 f85a 	bl	8003c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001bba:	200d      	movs	r0, #13
 8001bbc:	f002 f871 	bl	8003ca2 <HAL_NVIC_EnableIRQ>

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc8:	2004      	movs	r0, #4
 8001bca:	f7ff fe62 	bl	8001892 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7ff fe5f 	bl	8001892 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	f7ff fe5c 	bl	8001892 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001be2:	b672      	cpsid	i
}
 8001be4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be6:	bf00      	nop
 8001be8:	e7fd      	b.n	8001be6 <Error_Handler+0x8>
	...

08001bec <LL_PWR_EnableSRAM2Retention>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8001bf0:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	4a04      	ldr	r2, [pc, #16]	@ (8001c08 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8001bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bfa:	6093      	str	r3, [r2, #8]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	58000400 	.word	0x58000400

08001c0c <LL_EXTI_IsEnabledRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledRisingTrig_0_31(uint32_t ExtiLine)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->RTSR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001c14:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <LL_EXTI_IsEnabledRisingTrig_0_31+0x28>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d101      	bne.n	8001c26 <LL_EXTI_IsEnabledRisingTrig_0_31+0x1a>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <LL_EXTI_IsEnabledRisingTrig_0_31+0x1c>
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	58000800 	.word	0x58000800

08001c38 <LL_EXTI_IsEnabledFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsEnabledFallingTrig_0_31(uint32_t ExtiLine)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FTSR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001c40:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <LL_EXTI_IsEnabledFallingTrig_0_31+0x28>)
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4013      	ands	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d101      	bne.n	8001c52 <LL_EXTI_IsEnabledFallingTrig_0_31+0x1a>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <LL_EXTI_IsEnabledFallingTrig_0_31+0x1c>
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	58000800 	.word	0x58000800

08001c64 <LL_EXTI_GenerateSWI_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_GenerateSWI_0_31(uint32_t ExtiLine)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->SWIER1, ExtiLine);
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <LL_EXTI_GenerateSWI_0_31+0x20>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	4904      	ldr	r1, [pc, #16]	@ (8001c84 <LL_EXTI_GenerateSWI_0_31+0x20>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	58000800 	.word	0x58000800

08001c88 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001c9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_SYSCFG_GetEXTISource>:
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x03U], (Line >> 16U)) >> (POSITION_VAL(Line >> 16U) & 0x0000000FUL));
 8001cb8:	4a12      	ldr	r2, [pc, #72]	@ (8001d04 <LL_SYSCFG_GetEXTISource+0x54>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	401a      	ands	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	60fb      	str	r3, [r7, #12]
  return result;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <LL_SYSCFG_GetEXTISource+0x38>
    return 32U;
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	e003      	b.n	8001cf0 <LL_SYSCFG_GetEXTISource+0x40>
  return __builtin_clz(value);
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40010000 	.word	0x40010000

08001d08 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	3220      	adds	r2, #32
 8001d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1c:	4a05      	ldr	r2, [pc, #20]	@ (8001d34 <LL_HSEM_1StepLock+0x2c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d001      	beq.n	8001d26 <LL_HSEM_1StepLock+0x1e>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <LL_HSEM_1StepLock+0x20>
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	80000400 	.word	0x80000400

08001d38 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <STBY_AppHwSave>:
/*******************************************************************************
 * This part may be updated by the user
 ******************************************************************************/

void STBY_AppHwSave(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
/* In this function HW parameters lost in standby can de saved.
   All RAM memory is in retention */
  /* USER CODE BEGIN STBY_AppHwSave_1 */

  /* USER CODE END STBY_AppHwSave_1 */
  return;
 8001d62:	bf00      	nop
}
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <STBY_AppHwRestore>:

void STBY_AppHwRestore(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN STBY_AppHwRestore_1 */

  /* USER CODE END STBY_AppHwRestore_1 */

  HAL_Init();
 8001d70:	f000 fdae 	bl	80028d0 <HAL_Init>
  HAL_ResumeTick();
 8001d74:	f000 fe42 	bl	80029fc <HAL_ResumeTick>
  /* In this user section add MX init functions present in main.c, except MX_RTC_Init() */
  /* USER CODE BEGIN STBY_AppHwRestore_2 */

  /* USER CODE END STBY_AppHwRestore_2 */

  STBY_TriggerIT();
 8001d78:	f000 f858 	bl	8001e2c <STBY_TriggerIT>

  return;
 8001d7c:	bf00      	nop
}
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <STBY_SysHwSave>:
/*******************************************************************************
 * Do not update code from this limit.
 ******************************************************************************/

void STBY_SysHwSave(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  STBY_BackupIpccC1MR = READ_REG(IPCC->C1MR);
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <STBY_SysHwSave+0x20>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a06      	ldr	r2, [pc, #24]	@ (8001da4 <STBY_SysHwSave+0x24>)
 8001d8a:	6013      	str	r3, [r2, #0]
  STBY_BackupVTOR = SCB->VTOR;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <STBY_SysHwSave+0x28>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <STBY_SysHwSave+0x2c>)
 8001d92:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN STBY_SysHwSave_1 */

  /* USER CODE END STBY_SysHwSave_1 */
  return;
 8001d94:	bf00      	nop
}
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	58000c00 	.word	0x58000c00
 8001da4:	200003c0 	.word	0x200003c0
 8001da8:	e000ed00 	.word	0xe000ed00
 8001dac:	200003c4 	.word	0x200003c4

08001db0 <STBY_SysHwRestore>:

void STBY_SysHwRestore(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN STBY_SysHwRestore_1 */

  /* USER CODE END STBY_SysHwRestore_1 */
  APPD_Init();
 8001db4:	f7fe fa32 	bl	800021c <APPD_Init>

  Init_Smps();
 8001db8:	f7fe fd08 	bl	80007cc <Init_Smps>
  Init_Exti();
 8001dbc:	f7fe fd0d 	bl	80007da <Init_Exti>
  HAL_Init();
 8001dc0:	f000 fd86 	bl	80028d0 <HAL_Init>

  WRITE_REG(SCB->VTOR, STBY_BackupVTOR);
 8001dc4:	4a13      	ldr	r2, [pc, #76]	@ (8001e14 <STBY_SysHwRestore+0x64>)
 8001dc6:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <STBY_SysHwRestore+0x68>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6093      	str	r3, [r2, #8]

  HW_IPCC_Init();
 8001dcc:	f007 ff7a 	bl	8009cc4 <HW_IPCC_Init>
  WRITE_REG(IPCC->C1MR, STBY_BackupIpccC1MR);
 8001dd0:	4a12      	ldr	r2, [pc, #72]	@ (8001e1c <STBY_SysHwRestore+0x6c>)
 8001dd2:	4b13      	ldr	r3, [pc, #76]	@ (8001e20 <STBY_SysHwRestore+0x70>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6053      	str	r3, [r2, #4]

  if( !LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) )
 8001dd8:	2103      	movs	r1, #3
 8001dda:	4812      	ldr	r0, [pc, #72]	@ (8001e24 <STBY_SysHwRestore+0x74>)
 8001ddc:	f7ff ff94 	bl	8001d08 <LL_HSEM_1StepLock>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d108      	bne.n	8001df8 <STBY_SysHwRestore+0x48>
  {
    LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001de6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001dea:	f7ff ff4d 	bl	8001c88 <LL_RCC_SetClkAfterWakeFromStop>
    LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8001dee:	2200      	movs	r2, #0
 8001df0:	2103      	movs	r1, #3
 8001df2:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <STBY_SysHwRestore+0x74>)
 8001df4:	f7ff ffa0 	bl	8001d38 <LL_HSEM_ReleaseLock>
  }
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_PWR_STANDBY_SEMID, 0 );
 8001df8:	2200      	movs	r2, #0
 8001dfa:	210a      	movs	r1, #10
 8001dfc:	4809      	ldr	r0, [pc, #36]	@ (8001e24 <STBY_SysHwRestore+0x74>)
 8001dfe:	f7ff ff9b 	bl	8001d38 <LL_HSEM_ReleaseLock>

  HW_TS_Init(hw_ts_InitMode_Limited, &hrtc);
 8001e02:	4909      	ldr	r1, [pc, #36]	@ (8001e28 <STBY_SysHwRestore+0x78>)
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7ff fa8b 	bl	8001320 <HW_TS_Init>

  LL_PWR_EnableSRAM2Retention();
 8001e0a:	f7ff feef 	bl	8001bec <LL_PWR_EnableSRAM2Retention>

  /* USER CODE BEGIN STBY_SysHwRestore_2 */

  /* USER CODE END STBY_SysHwRestore_2 */

  return;
 8001e0e:	bf00      	nop
}
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000ed00 	.word	0xe000ed00
 8001e18:	200003c4 	.word	0x200003c4
 8001e1c:	58000c00 	.word	0x58000c00
 8001e20:	200003c0 	.word	0x200003c0
 8001e24:	58001400 	.word	0x58001400
 8001e28:	20000248 	.word	0x20000248

08001e2c <STBY_TriggerIT>:

  return STBY_BootStatus;
}

static void STBY_TriggerIT(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* If system has been woken-up by an RTC alarm,
   * a software event must be generated to trigger the IT.
   * NVIC and EXTI must be reconfigured properly before triggering the event.
   */
  if((__HAL_RTC_ALARM_GET_FLAG((RTC_HandleTypeDef *)&hrtc, RTC_FLAG_ALRAF) != 0) ||
 8001e30:	4b39      	ldr	r3, [pc, #228]	@ (8001f18 <STBY_TriggerIT+0xec>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <STBY_TriggerIT+0x20>
     (__HAL_RTC_ALARM_GET_FLAG((RTC_HandleTypeDef *)&hrtc, RTC_FLAG_ALRBF) != 0) )
 8001e3e:	4b36      	ldr	r3, [pc, #216]	@ (8001f18 <STBY_TriggerIT+0xec>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if((__HAL_RTC_ALARM_GET_FLAG((RTC_HandleTypeDef *)&hrtc, RTC_FLAG_ALRAF) != 0) ||
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <STBY_TriggerIT+0x2c>
  {
    __HAL_RTC_ALARM_EXTI_GENERATE_SWIT();
 8001e4c:	4b33      	ldr	r3, [pc, #204]	@ (8001f1c <STBY_TriggerIT+0xf0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a32      	ldr	r2, [pc, #200]	@ (8001f1c <STBY_TriggerIT+0xf0>)
 8001e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e56:	6093      	str	r3, [r2, #8]

  /* If system has been woken-up by a wake up pin,
   * a software event must be generated to trigger the IT.
   * NVIC and EXTI must be reconfigured properly before triggering the event.
   */
  if(HAL_PWREx_GetWakeupFlag(PWR_FLAG_WUF1) != 0)
 8001e58:	2020      	movs	r0, #32
 8001e5a:	f002 fcbb 	bl	80047d4 <HAL_PWREx_GetWakeupFlag>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d027      	beq.n	8001eb4 <STBY_TriggerIT+0x88>
  {
    if( (LL_SYSCFG_GetEXTISource(LL_SYSCFG_EXTI_LINE0) == LL_SYSCFG_EXTI_PORTA) )
 8001e64:	f44f 2070 	mov.w	r0, #983040	@ 0xf0000
 8001e68:	f7ff ff22 	bl	8001cb0 <LL_SYSCFG_GetEXTISource>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d11d      	bne.n	8001eae <STBY_TriggerIT+0x82>
    {
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP1) >> PWR_CR4_WP1_Pos) == 0) &&
 8001e72:	4b2b      	ldr	r3, [pc, #172]	@ (8001f20 <STBY_TriggerIT+0xf4>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d108      	bne.n	8001e90 <STBY_TriggerIT+0x64>
         (LL_EXTI_IsEnabledRisingTrig_0_31(LL_EXTI_LINE_0) == 1) )
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff fec4 	bl	8001c0c <LL_EXTI_IsEnabledRisingTrig_0_31>
 8001e84:	4603      	mov	r3, r0
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP1) >> PWR_CR4_WP1_Pos) == 0) &&
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d102      	bne.n	8001e90 <STBY_TriggerIT+0x64>
      {
        LL_EXTI_GenerateSWI_0_31(LL_EXTI_LINE_0);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f7ff feea 	bl	8001c64 <LL_EXTI_GenerateSWI_0_31>
      }
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP1) >> PWR_CR4_WP1_Pos) == 1) &&
 8001e90:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <STBY_TriggerIT+0xf4>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d108      	bne.n	8001eae <STBY_TriggerIT+0x82>
         (LL_EXTI_IsEnabledFallingTrig_0_31(LL_EXTI_LINE_0) == 1) )
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f7ff fecb 	bl	8001c38 <LL_EXTI_IsEnabledFallingTrig_0_31>
 8001ea2:	4603      	mov	r3, r0
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP1) >> PWR_CR4_WP1_Pos) == 1) &&
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d102      	bne.n	8001eae <STBY_TriggerIT+0x82>
      {
        LL_EXTI_GenerateSWI_0_31(LL_EXTI_LINE_0);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7ff fedb 	bl	8001c64 <LL_EXTI_GenerateSWI_0_31>
      }
    }
    HAL_PWREx_ClearWakeupFlag(PWR_FLAG_WUF1);
 8001eae:	2020      	movs	r0, #32
 8001eb0:	f002 fca6 	bl	8004800 <HAL_PWREx_ClearWakeupFlag>
  }

  if(HAL_PWREx_GetWakeupFlag(PWR_FLAG_WUF4) != 0)
 8001eb4:	2023      	movs	r0, #35	@ 0x23
 8001eb6:	f002 fc8d 	bl	80047d4 <HAL_PWREx_GetWakeupFlag>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d029      	beq.n	8001f14 <STBY_TriggerIT+0xe8>
  {
    if( (LL_SYSCFG_GetEXTISource(LL_SYSCFG_EXTI_LINE2) == LL_SYSCFG_EXTI_PORTA) )
 8001ec0:	f04f 6070 	mov.w	r0, #251658240	@ 0xf000000
 8001ec4:	f7ff fef4 	bl	8001cb0 <LL_SYSCFG_GetEXTISource>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d11e      	bne.n	8001f0c <STBY_TriggerIT+0xe0>
    {
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP4) >> PWR_CR4_WP4_Pos) == 0) &&
 8001ece:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <STBY_TriggerIT+0xf4>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d108      	bne.n	8001eec <STBY_TriggerIT+0xc0>
         (LL_EXTI_IsEnabledRisingTrig_0_31(LL_EXTI_LINE_2) == 1) )
 8001eda:	2004      	movs	r0, #4
 8001edc:	f7ff fe96 	bl	8001c0c <LL_EXTI_IsEnabledRisingTrig_0_31>
 8001ee0:	4603      	mov	r3, r0
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP4) >> PWR_CR4_WP4_Pos) == 0) &&
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d102      	bne.n	8001eec <STBY_TriggerIT+0xc0>
      {
        LL_EXTI_GenerateSWI_0_31(LL_EXTI_LINE_2);
 8001ee6:	2004      	movs	r0, #4
 8001ee8:	f7ff febc 	bl	8001c64 <LL_EXTI_GenerateSWI_0_31>
      }
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP4) >> PWR_CR4_WP4_Pos) == 1) &&
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <STBY_TriggerIT+0xf4>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <STBY_TriggerIT+0xe0>
         (LL_EXTI_IsEnabledFallingTrig_0_31(LL_EXTI_LINE_2) == 1) )
 8001efa:	2004      	movs	r0, #4
 8001efc:	f7ff fe9c 	bl	8001c38 <LL_EXTI_IsEnabledFallingTrig_0_31>
 8001f00:	4603      	mov	r3, r0
      if(((READ_BIT(PWR->CR4, PWR_CR4_WP4) >> PWR_CR4_WP4_Pos) == 1) &&
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d102      	bne.n	8001f0c <STBY_TriggerIT+0xe0>
      {
        LL_EXTI_GenerateSWI_0_31(LL_EXTI_LINE_2);
 8001f06:	2004      	movs	r0, #4
 8001f08:	f7ff feac 	bl	8001c64 <LL_EXTI_GenerateSWI_0_31>
      }
    }
    HAL_PWREx_ClearWakeupFlag(PWR_FLAG_WUF4);
 8001f0c:	2023      	movs	r0, #35	@ 0x23
 8001f0e:	f002 fc77 	bl	8004800 <HAL_PWREx_ClearWakeupFlag>
  }

  return;
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
}
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000248 	.word	0x20000248
 8001f1c:	58000800 	.word	0x58000800
 8001f20:	58000400 	.word	0x58000400

08001f24 <LL_PWR_SetPowerMode>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <LL_PWR_SetPowerMode+0x24>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 0207 	bic.w	r2, r3, #7
 8001f34:	4904      	ldr	r1, [pc, #16]	@ (8001f48 <LL_PWR_SetPowerMode+0x24>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	58000400 	.word	0x58000400

08001f4c <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001f50:	4b03      	ldr	r3, [pc, #12]	@ (8001f60 <LL_PWR_ClearFlag_WU+0x14>)
 8001f52:	2209      	movs	r2, #9
 8001f54:	619a      	str	r2, [r3, #24]
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	58000400 	.word	0x58000400

08001f64 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8001f68:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f76:	d101      	bne.n	8001f7c <LL_PWR_IsActiveFlag_C2SB+0x18>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	58000400 	.word	0x58000400

08001f8c <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001f90:	4b07      	ldr	r3, [pc, #28]	@ (8001fb0 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f9e:	d101      	bne.n	8001fa4 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	58000400 	.word	0x58000400

08001fb4 <LL_EXTI_EnableEvent_32_63>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <LL_EXTI_EnableEvent_32_63+0x24>)
 8001fbe:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8001fc2:	4905      	ldr	r1, [pc, #20]	@ (8001fd8 <LL_EXTI_EnableEvent_32_63+0x24>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	58000800 	.word	0x58000800

08001fdc <LL_EXTI_EnableRisingTrig_32_63>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001fe6:	6a1a      	ldr	r2, [r3, #32]
 8001fe8:	4904      	ldr	r1, [pc, #16]	@ (8001ffc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	620b      	str	r3, [r1, #32]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	58000800 	.word	0x58000800

08002000 <LL_RCC_HSI_Enable>:
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800200e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_RCC_HSI_IsReady>:
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800202c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002030:	d101      	bne.n	8002036 <LL_RCC_HSI_IsReady+0x18>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_RCC_HSI_IsReady+0x1a>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_RCC_SetSysClkSource>:
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 0203 	bic.w	r2, r3, #3
 8002054:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_RCC_GetSysClkSource>:
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 030c 	and.w	r3, r3, #12
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_RCC_SetSMPSClockSource>:
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800208a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	f023 0203 	bic.w	r2, r3, #3
 8002094:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4313      	orrs	r3, r2
 800209c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80020ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80020d0:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <LL_LPM_EnableSleep+0x1c>)
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <LL_LPM_EnableSleep+0x1c>)
 80020d6:	f023 0304 	bic.w	r3, r3, #4
 80020da:	6113      	str	r3, [r2, #16]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80020f0:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <LL_LPM_EnableDeepSleep+0x1c>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <LL_LPM_EnableDeepSleep+0x1c>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	6113      	str	r3, [r2, #16]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <LL_HSEM_1StepLock>:
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	3220      	adds	r2, #32
 800211c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002120:	4a05      	ldr	r2, [pc, #20]	@ (8002138 <LL_HSEM_1StepLock+0x2c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d001      	beq.n	800212a <LL_HSEM_1StepLock+0x1e>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <LL_HSEM_1StepLock+0x20>
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	80000400 	.word	0x80000400

0800213c <LL_HSEM_ReleaseLock>:
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8002166:	f000 fc39 	bl	80029dc <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 800216a:	f7ff ff9e 	bl	80020aa <LL_RCC_ClearResetFlags>

  EnterLowPower();
 800216e:	f000 f857 	bl	8002220 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8002172:	f7ff feeb 	bl	8001f4c <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8002176:	2003      	movs	r0, #3
 8002178:	f7ff fed4 	bl	8001f24 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 800217c:	f7ff ffb6 	bl	80020ec <LL_LPM_EnableDeepSleep>
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

#if (CFG_LPM_STANDBY_SUPPORTED != 0)
  LL_EXTI_EnableRisingTrig_32_63(LL_EXTI_LINE_40);
 8002180:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002184:	f7ff ff2a 	bl	8001fdc <LL_EXTI_EnableRisingTrig_32_63>
  LL_EXTI_EnableEvent_32_63(LL_EXTI_LINE_40);
 8002188:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800218c:	f7ff ff12 	bl	8001fb4 <LL_EXTI_EnableEvent_32_63>

  STBY_AppHwSave();
 8002190:	f7ff fde5 	bl	8001d5e <STBY_AppHwSave>
  STBY_SysHwSave();
 8002194:	f7ff fdf4 	bl	8001d80 <STBY_SysHwSave>

  CPUcontextSave();/* this function will call WFI instruction */
 8002198:	f000 f83b 	bl	8002212 <CPUcontextSave>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 800219c:	bf00      	nop
}
 800219e:	bd80      	pop	{r7, pc}

080021a0 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode_1 */

/* USER CODE END PWR_ExitOffMode_1 */
#if (CFG_LPM_STANDBY_SUPPORTED != 0)
  if(STBY_BootStatus != 0)
 80021a4:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <PWR_ExitOffMode+0x24>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <PWR_ExitOffMode+0x1a>
  {
    STBY_SysHwRestore();
 80021ac:	f7ff fe00 	bl	8001db0 <STBY_SysHwRestore>
    ExitLowPower_standby();
 80021b0:	f000 f892 	bl	80022d8 <ExitLowPower_standby>
    STBY_AppHwRestore();
 80021b4:	f7ff fdda 	bl	8001d6c <STBY_AppHwRestore>
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 80021b8:	e002      	b.n	80021c0 <PWR_ExitOffMode+0x20>
    ExitLowPower();
 80021ba:	f000 f86d 	bl	8002298 <ExitLowPower>
  return;
 80021be:	bf00      	nop
}
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200003c8 	.word	0x200003c8

080021c8 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 80021cc:	f000 fc06 	bl	80029dc <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 80021d0:	f000 f826 	bl	8002220 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff fea5 	bl	8001f24 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 80021da:	f7ff ff87 	bl	80020ec <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 80021de:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 80021e0:	bf00      	nop
}
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 80021e8:	f000 f856 	bl	8002298 <ExitLowPower>

  HAL_ResumeTick();
 80021ec:	f000 fc06 	bl	80029fc <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 80021f0:	bf00      	nop
}
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 80021f8:	f000 fbf0 	bl	80029dc <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80021fc:	f7ff ff66 	bl	80020cc <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 8002200:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8002202:	bf00      	nop
}
 8002204:	bd80      	pop	{r7, pc}

08002206 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 800220a:	f000 fbf7 	bl	80029fc <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 800220e:	bf00      	nop
}
 8002210:	bd80      	pop	{r7, pc}

08002212 <CPUcontextSave>:
* @brief Weak CPUcontextSave function definition to implement in startup file.
* @param none
* @retval none
*/
__WEAK void CPUcontextSave(void)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	af00      	add	r7, sp, #0
  /*
   * If you are here, you have to update your startup_stm32wb15xx_cm4.s file to
   * implement CPUcontextSave function like done in latest STM32CubeWB package
   * into STM32WB15 BLE applications.
   */
  Error_Handler();
 8002216:	f7ff fce2 	bl	8001bde <Error_Handler>
#endif

  return;
 800221a:	bf00      	nop
}
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8002224:	bf00      	nop
 8002226:	2103      	movs	r1, #3
 8002228:	4819      	ldr	r0, [pc, #100]	@ (8002290 <EnterLowPower+0x70>)
 800222a:	f7ff ff6f 	bl	800210c <LL_HSEM_1StepLock>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f8      	bne.n	8002226 <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8002234:	2104      	movs	r1, #4
 8002236:	4816      	ldr	r0, [pc, #88]	@ (8002290 <EnterLowPower+0x70>)
 8002238:	f7ff ff68 	bl	800210c <LL_HSEM_1StepLock>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d117      	bne.n	8002272 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8002242:	f7ff fea3 	bl	8001f8c <LL_PWR_IsActiveFlag_C2DS>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d104      	bne.n	8002256 <EnterLowPower+0x36>
 800224c:	f7ff fe8a 	bl	8001f64 <LL_PWR_IsActiveFlag_C2SB>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d015      	beq.n	8002282 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2104      	movs	r1, #4
 800225a:	480d      	ldr	r0, [pc, #52]	@ (8002290 <EnterLowPower+0x70>)
 800225c:	f7ff ff6e 	bl	800213c <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8002260:	f000 f858 	bl	8002314 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8002264:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <EnterLowPower+0x74>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0a      	ldr	r2, [pc, #40]	@ (8002294 <EnterLowPower+0x74>)
 800226a:	f023 0307 	bic.w	r3, r3, #7
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e007      	b.n	8002282 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8002272:	f000 f84f 	bl	8002314 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8002276:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <EnterLowPower+0x74>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a06      	ldr	r2, [pc, #24]	@ (8002294 <EnterLowPower+0x74>)
 800227c:	f023 0307 	bic.w	r3, r3, #7
 8002280:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2103      	movs	r1, #3
 8002286:	4802      	ldr	r0, [pc, #8]	@ (8002290 <EnterLowPower+0x70>)
 8002288:	f7ff ff58 	bl	800213c <LL_HSEM_ReleaseLock>

  return;
 800228c:	bf00      	nop
}
 800228e:	bd80      	pop	{r7, pc}
 8002290:	58001400 	.word	0x58001400
 8002294:	58004000 	.word	0x58004000

08002298 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	2104      	movs	r1, #4
 80022a0:	480b      	ldr	r0, [pc, #44]	@ (80022d0 <ExitLowPower+0x38>)
 80022a2:	f7ff ff4b 	bl	800213c <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 80022a6:	bf00      	nop
 80022a8:	2103      	movs	r1, #3
 80022aa:	4809      	ldr	r0, [pc, #36]	@ (80022d0 <ExitLowPower+0x38>)
 80022ac:	f7ff ff2e 	bl	800210c <LL_HSEM_1StepLock>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f8      	bne.n	80022a8 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80022b6:	f7ff fed8 	bl	800206a <LL_RCC_GetSysClkSource>

/* USER CODE END ExitLowPower_2 */
  }
#if (CFG_LPM_STANDBY_SUPPORTED != 0)

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <ExitLowPower+0x3c>)
 80022bc:	2201      	movs	r2, #1
 80022be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2103      	movs	r1, #3
 80022c6:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <ExitLowPower+0x38>)
 80022c8:	f7ff ff38 	bl	800213c <LL_HSEM_ReleaseLock>

  return;
 80022cc:	bf00      	nop
}
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	58001400 	.word	0x58001400
 80022d4:	58000400 	.word	0x58000400

080022d8 <ExitLowPower_standby>:
  * @brief Restore the system to exit standby mode
  * @param none
  * @retval none
  */
static void ExitLowPower_standby(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
/* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 80022dc:	2200      	movs	r2, #0
 80022de:	2104      	movs	r1, #4
 80022e0:	480a      	ldr	r0, [pc, #40]	@ (800230c <ExitLowPower_standby+0x34>)
 80022e2:	f7ff ff2b 	bl	800213c <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 80022e6:	bf00      	nop
 80022e8:	2103      	movs	r1, #3
 80022ea:	4808      	ldr	r0, [pc, #32]	@ (800230c <ExitLowPower_standby+0x34>)
 80022ec:	f7ff ff0e 	bl	800210c <LL_HSEM_1StepLock>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f8      	bne.n	80022e8 <ExitLowPower_standby+0x10>
/* USER CODE BEGIN ExitLowPower_standby */

/* USER CODE END ExitLowPower_standby */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <ExitLowPower_standby+0x38>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2103      	movs	r1, #3
 8002302:	4802      	ldr	r0, [pc, #8]	@ (800230c <ExitLowPower_standby+0x34>)
 8002304:	f7ff ff1a 	bl	800213c <LL_HSEM_ReleaseLock>

  return;
 8002308:	bf00      	nop
}
 800230a:	bd80      	pop	{r7, pc}
 800230c:	58001400 	.word	0x58001400
 8002310:	58000400 	.word	0x58000400

08002314 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8002318:	f7ff fe72 	bl	8002000 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 800231c:	bf00      	nop
 800231e:	f7ff fe7e 	bl	800201e <LL_RCC_HSI_IsReady>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0fa      	beq.n	800231e <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002328:	2001      	movs	r0, #1
 800232a:	f7ff fe8a 	bl	8002042 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff fea7 	bl	8002082 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8002334:	bf00      	nop
 8002336:	f7ff fe98 	bl	800206a <LL_RCC_GetSysClkSource>
 800233a:	4603      	mov	r3, r0
 800233c:	2b04      	cmp	r3, #4
 800233e:	d1fa      	bne.n	8002336 <Switch_On_HSI+0x22>
  return;
 8002340:	bf00      	nop
}
 8002342:	bd80      	pop	{r7, pc}

08002344 <LL_RCC_EnableRTC>:
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002350:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <LL_AHB2_GRP1_EnableClock>:
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800236e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002372:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002374:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4313      	orrs	r3, r2
 800237c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800237e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4013      	ands	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_AHB3_GRP1_EnableClock>:
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023bc:	68fb      	ldr	r3, [r7, #12]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_APB1_GRP1_EnableClock>:
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4313      	orrs	r3, r2
 80023e0:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4013      	ands	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_APB2_GRP1_EnableClock>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002408:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800240a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4313      	orrs	r3, r2
 8002412:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002418:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002420:	68fb      	ldr	r3, [r7, #12]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002432:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002436:	f7ff ffaf 	bl	8002398 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2100      	movs	r1, #0
 800243e:	202e      	movs	r0, #46	@ 0x2e
 8002440:	f001 fc15 	bl	8003c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002444:	202e      	movs	r0, #46	@ 0x2e
 8002446:	f001 fc2c 	bl	8003ca2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b094      	sub	sp, #80	@ 0x50
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002468:	f107 030c 	add.w	r3, r7, #12
 800246c:	2230      	movs	r2, #48	@ 0x30
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f007 ffaf 	bl	800a3d4 <memset>
  if(hadc->Instance==ADC1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a2f      	ldr	r2, [pc, #188]	@ (8002538 <HAL_ADC_MspInit+0xe8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d156      	bne.n	800252e <HAL_ADC_MspInit+0xde>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002480:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002484:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002486:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800248a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4618      	mov	r0, r3
 8002492:	f003 fbcd 	bl	8005c30 <HAL_RCCEx_PeriphCLKConfig>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800249c:	f7ff fb9f 	bl	8001bde <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80024a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80024a4:	f7ff ffaa 	bl	80023fc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a8:	2001      	movs	r0, #1
 80024aa:	f7ff ff5c 	bl	8002366 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80024ae:	2311      	movs	r3, #17
 80024b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024b2:	2303      	movs	r3, #3
 80024b4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024be:	4619      	mov	r1, r3
 80024c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024c4:	f001 ff36 	bl	8004334 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80024c8:	4b1c      	ldr	r3, [pc, #112]	@ (800253c <HAL_ADC_MspInit+0xec>)
 80024ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002540 <HAL_ADC_MspInit+0xf0>)
 80024cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80024ce:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_ADC_MspInit+0xec>)
 80024d0:	2205      	movs	r2, #5
 80024d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024d4:	4b19      	ldr	r3, [pc, #100]	@ (800253c <HAL_ADC_MspInit+0xec>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024da:	4b18      	ldr	r3, [pc, #96]	@ (800253c <HAL_ADC_MspInit+0xec>)
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024e0:	4b16      	ldr	r3, [pc, #88]	@ (800253c <HAL_ADC_MspInit+0xec>)
 80024e2:	2280      	movs	r2, #128	@ 0x80
 80024e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024e6:	4b15      	ldr	r3, [pc, #84]	@ (800253c <HAL_ADC_MspInit+0xec>)
 80024e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024ee:	4b13      	ldr	r3, [pc, #76]	@ (800253c <HAL_ADC_MspInit+0xec>)
 80024f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024f6:	4b11      	ldr	r3, [pc, #68]	@ (800253c <HAL_ADC_MspInit+0xec>)
 80024f8:	2220      	movs	r2, #32
 80024fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <HAL_ADC_MspInit+0xec>)
 80024fe:	2200      	movs	r2, #0
 8002500:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002502:	480e      	ldr	r0, [pc, #56]	@ (800253c <HAL_ADC_MspInit+0xec>)
 8002504:	f001 fc12 	bl	8003d2c <HAL_DMA_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800250e:	f7ff fb66 	bl	8001bde <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a09      	ldr	r2, [pc, #36]	@ (800253c <HAL_ADC_MspInit+0xec>)
 8002516:	641a      	str	r2, [r3, #64]	@ 0x40
 8002518:	4a08      	ldr	r2, [pc, #32]	@ (800253c <HAL_ADC_MspInit+0xec>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2101      	movs	r1, #1
 8002522:	2012      	movs	r0, #18
 8002524:	f001 fba3 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002528:	2012      	movs	r0, #18
 800252a:	f001 fbba 	bl	8003ca2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800252e:	bf00      	nop
 8002530:	3750      	adds	r7, #80	@ 0x50
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40012400 	.word	0x40012400
 800253c:	20000198 	.word	0x20000198
 8002540:	40020030 	.word	0x40020030

08002544 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0d      	ldr	r2, [pc, #52]	@ (8002588 <HAL_IPCC_MspInit+0x44>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d113      	bne.n	800257e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002556:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800255a:	f7ff ff1d 	bl	8002398 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2100      	movs	r1, #0
 8002562:	202c      	movs	r0, #44	@ 0x2c
 8002564:	f001 fb83 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002568:	202c      	movs	r0, #44	@ 0x2c
 800256a:	f001 fb9a 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	202d      	movs	r0, #45	@ 0x2d
 8002574:	f001 fb7b 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002578:	202d      	movs	r0, #45	@ 0x2d
 800257a:	f001 fb92 	bl	8003ca2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	58000c00 	.word	0x58000c00

0800258c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08e      	sub	sp, #56	@ 0x38
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002594:	f107 0308 	add.w	r3, r7, #8
 8002598:	2230      	movs	r2, #48	@ 0x30
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f007 ff19 	bl	800a3d4 <memset>
  if(hrng->Instance==RNG)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a11      	ldr	r2, [pc, #68]	@ (80025ec <HAL_RNG_MspInit+0x60>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d11b      	bne.n	80025e4 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80025ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025b0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 80025b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80025b6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 fb37 	bl	8005c30 <HAL_RCCEx_PeriphCLKConfig>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80025c8:	f7ff fb09 	bl	8001bde <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80025cc:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80025d0:	f7ff fee2 	bl	8002398 <LL_AHB3_GRP1_EnableClock>
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2100      	movs	r1, #0
 80025d8:	2035      	movs	r0, #53	@ 0x35
 80025da:	f001 fb48 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 80025de:	2035      	movs	r0, #53	@ 0x35
 80025e0:	f001 fb5f 	bl	8003ca2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80025e4:	bf00      	nop
 80025e6:	3738      	adds	r7, #56	@ 0x38
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	58001000 	.word	0x58001000

080025f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08e      	sub	sp, #56	@ 0x38
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025f8:	f107 0308 	add.w	r3, r7, #8
 80025fc:	2230      	movs	r2, #48	@ 0x30
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f007 fee7 	bl	800a3d4 <memset>
  if(hrtc->Instance==RTC)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a12      	ldr	r2, [pc, #72]	@ (8002654 <HAL_RTC_MspInit+0x64>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d11d      	bne.n	800264c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002610:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002614:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002616:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800261a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800261c:	f107 0308 	add.w	r3, r7, #8
 8002620:	4618      	mov	r0, r3
 8002622:	f003 fb05 	bl	8005c30 <HAL_RCCEx_PeriphCLKConfig>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800262c:	f7ff fad7 	bl	8001bde <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002630:	f7ff fe88 	bl	8002344 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002634:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002638:	f7ff fec7 	bl	80023ca <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2100      	movs	r1, #0
 8002640:	2003      	movs	r0, #3
 8002642:	f001 fb14 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002646:	2003      	movs	r0, #3
 8002648:	f001 fb2b 	bl	8003ca2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800264c:	bf00      	nop
 800264e:	3738      	adds	r7, #56	@ 0x38
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40002800 	.word	0x40002800

08002658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <NMI_Handler+0x4>

08002660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <HardFault_Handler+0x4>

08002668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <MemManage_Handler+0x4>

08002670 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <BusFault_Handler+0x4>

08002678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <UsageFault_Handler+0x4>

08002680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ae:	f000 f969 	bl	8002984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80026ba:	f7fe fd69 	bl	8001190 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026c8:	4802      	ldr	r0, [pc, #8]	@ (80026d4 <DMA1_Channel1_IRQHandler+0x10>)
 80026ca:	f001 fcf4 	bl	80040b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000300 	.word	0x20000300

080026d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80026dc:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <DMA1_Channel2_IRQHandler+0x10>)
 80026de:	f001 fcea 	bl	80040b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000360 	.word	0x20000360

080026ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026f0:	4802      	ldr	r0, [pc, #8]	@ (80026fc <DMA1_Channel3_IRQHandler+0x10>)
 80026f2:	f001 fce0 	bl	80040b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000198 	.word	0x20000198

08002700 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002704:	4802      	ldr	r0, [pc, #8]	@ (8002710 <ADC1_IRQHandler+0x10>)
 8002706:	f000 fd3f 	bl	8003188 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000144 	.word	0x20000144

08002714 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002718:	4802      	ldr	r0, [pc, #8]	@ (8002724 <USART1_IRQHandler+0x10>)
 800271a:	f003 fdd9 	bl	80062d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	2000026c 	.word	0x2000026c

08002728 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800272c:	f007 fa4a 	bl	8009bc4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}

08002734 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002738:	f007 fa7a 	bl	8009c30 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}

08002740 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002744:	f001 ff76 	bl	8004634 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}

0800274c <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <RNG_IRQHandler+0x10>)
 8002752:	f003 fb98 	bl	8005e86 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000234 	.word	0x20000234

08002760 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002764:	4b22      	ldr	r3, [pc, #136]	@ (80027f0 <SystemInit+0x90>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	4a21      	ldr	r2, [pc, #132]	@ (80027f0 <SystemInit+0x90>)
 800276c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002788:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800278c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800278e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002798:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <SystemInit+0x94>)
 800279a:	4013      	ands	r3, r2
 800279c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800279e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027aa:	f023 0305 	bic.w	r3, r3, #5
 80027ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80027b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80027c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ca:	4a0b      	ldr	r2, [pc, #44]	@ (80027f8 <SystemInit+0x98>)
 80027cc:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e2:	2200      	movs	r2, #0
 80027e4:	619a      	str	r2, [r3, #24]
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00
 80027f4:	faf6fefb 	.word	0xfaf6fefb
 80027f8:	22041000 	.word	0x22041000

080027fc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80027fc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027fe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002800:	3304      	adds	r3, #4

08002802 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002802:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002804:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002806:	d3f9      	bcc.n	80027fc <CopyDataInit>
  bx lr
 8002808:	4770      	bx	lr

0800280a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800280a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800280c:	3004      	adds	r0, #4

0800280e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800280e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002810:	d3fb      	bcc.n	800280a <FillZerobss>
  bx lr
 8002812:	4770      	bx	lr

08002814 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002814:	480c      	ldr	r0, [pc, #48]	@ (8002848 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002816:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002818:	f7ff ffa2 	bl	8002760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800281c:	480b      	ldr	r0, [pc, #44]	@ (800284c <LoopForever+0x6>)
 800281e:	490c      	ldr	r1, [pc, #48]	@ (8002850 <LoopForever+0xa>)
 8002820:	4a0c      	ldr	r2, [pc, #48]	@ (8002854 <LoopForever+0xe>)
 8002822:	2300      	movs	r3, #0
 8002824:	f7ff ffed 	bl	8002802 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002828:	480b      	ldr	r0, [pc, #44]	@ (8002858 <LoopForever+0x12>)
 800282a:	490c      	ldr	r1, [pc, #48]	@ (800285c <LoopForever+0x16>)
 800282c:	4a0c      	ldr	r2, [pc, #48]	@ (8002860 <LoopForever+0x1a>)
 800282e:	2300      	movs	r3, #0
 8002830:	f7ff ffe7 	bl	8002802 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002834:	480b      	ldr	r0, [pc, #44]	@ (8002864 <LoopForever+0x1e>)
 8002836:	490c      	ldr	r1, [pc, #48]	@ (8002868 <LoopForever+0x22>)
 8002838:	2300      	movs	r3, #0
 800283a:	f7ff ffe8 	bl	800280e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800283e:	f007 fdd1 	bl	800a3e4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002842:	f7ff f83f 	bl	80018c4 <main>

08002846 <LoopForever>:

LoopForever:
  b LoopForever
 8002846:	e7fe      	b.n	8002846 <LoopForever>
  ldr   r0, =_estack
 8002848:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 800284c:	20000008 	.word	0x20000008
 8002850:	20000038 	.word	0x20000038
 8002854:	0800a6f4 	.word	0x0800a6f4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002858:	200301e4 	.word	0x200301e4
 800285c:	20030a67 	.word	0x20030a67
 8002860:	0800a76a 	.word	0x0800a76a
  INIT_BSS _sbss, _ebss
 8002864:	20000084 	.word	0x20000084
 8002868:	20000798 	.word	0x20000798

0800286c <AES2_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800286c:	e7fe      	b.n	800286c <AES2_IRQHandler>
	...

08002870 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a04      	ldr	r2, [pc, #16]	@ (800288c <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	6053      	str	r3, [r2, #4]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e0042000 	.word	0xe0042000

08002890 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002894:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a04      	ldr	r2, [pc, #16]	@ (80028ac <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 800289a:	f023 0302 	bic.w	r3, r3, #2
 800289e:	6053      	str	r3, [r2, #4]
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e0042000 	.word	0xe0042000

080028b0 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a04      	ldr	r2, [pc, #16]	@ (80028cc <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	6053      	str	r3, [r2, #4]
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e0042000 	.word	0xe0042000

080028d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028da:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <HAL_Init+0x3c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a0b      	ldr	r2, [pc, #44]	@ (800290c <HAL_Init+0x3c>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e6:	2003      	movs	r0, #3
 80028e8:	f001 f9b6 	bl	8003c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ec:	200f      	movs	r0, #15
 80028ee:	f000 f80f 	bl	8002910 <HAL_InitTick>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	71fb      	strb	r3, [r7, #7]
 80028fc:	e001      	b.n	8002902 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028fe:	f7ff fd96 	bl	800242e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002902:	79fb      	ldrb	r3, [r7, #7]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	58004000 	.word	0x58004000

08002910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800291c:	4b17      	ldr	r3, [pc, #92]	@ (800297c <HAL_InitTick+0x6c>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d024      	beq.n	800296e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002924:	f002 ff9a 	bl	800585c <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b14      	ldr	r3, [pc, #80]	@ (800297c <HAL_InitTick+0x6c>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	4619      	mov	r1, r3
 8002930:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002934:	fbb3 f3f1 	udiv	r3, r3, r1
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	4618      	mov	r0, r3
 800293e:	f001 f9cc 	bl	8003cda <HAL_SYSTICK_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10f      	bne.n	8002968 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b0f      	cmp	r3, #15
 800294c:	d809      	bhi.n	8002962 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800294e:	2200      	movs	r2, #0
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	f04f 30ff 	mov.w	r0, #4294967295
 8002956:	f001 f98a 	bl	8003c6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800295a:	4a09      	ldr	r2, [pc, #36]	@ (8002980 <HAL_InitTick+0x70>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	e007      	b.n	8002972 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e004      	b.n	8002972 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	e001      	b.n	8002972 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002972:	7bfb      	ldrb	r3, [r7, #15]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	2000001c 	.word	0x2000001c
 8002980:	20000018 	.word	0x20000018

08002984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002988:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_IncTick+0x20>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <HAL_IncTick+0x24>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4413      	add	r3, r2
 8002994:	4a04      	ldr	r2, [pc, #16]	@ (80029a8 <HAL_IncTick+0x24>)
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	2000001c 	.word	0x2000001c
 80029a8:	200003cc 	.word	0x200003cc

080029ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return uwTick;
 80029b0:	4b03      	ldr	r3, [pc, #12]	@ (80029c0 <HAL_GetTick+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	200003cc 	.word	0x200003cc

080029c4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80029c8:	4b03      	ldr	r3, [pc, #12]	@ (80029d8 <HAL_GetTickPrio+0x14>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000018 	.word	0x20000018

080029dc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029e0:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <HAL_SuspendTick+0x1c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <HAL_SuspendTick+0x1c>)
 80029e6:	f023 0302 	bic.w	r3, r3, #2
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e010 	.word	0xe000e010

080029fc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a00:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_ResumeTick+0x1c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <HAL_ResumeTick+0x1c>)
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	e000e010 	.word	0xe000e010

08002a1c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002a20:	f7ff ff26 	bl	8002870 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002a2c:	f7ff ff30 	bl	8002890 <LL_DBGMCU_DisableDBGStopMode>
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002a38:	f7ff ff3a 	bl	80028b0 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	609a      	str	r2, [r3, #8]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2107      	movs	r1, #7
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ad8:	2300      	movs	r3, #0
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	210f      	movs	r1, #15
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	401a      	ands	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	f003 010f 	and.w	r1, r3, #15
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	629a      	str	r2, [r3, #40]	@ 0x28

  MODIFY_REG(*preg,
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_ADC_REG_SetSequencerChAdd>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_REG_SetSequencerChRem>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	43db      	mvns	r3, r3
 8002b66:	401a      	ands	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0303 	and.w	r3, r3, #3
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	401a      	ands	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	0219      	lsls	r1, r3, #8
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	400b      	ands	r3, r1
 8002bb4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002bb8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002bde:	f023 0317 	bic.w	r3, r3, #23
 8002be2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c0a:	d101      	bne.n	8002c10 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c2e:	f023 0317 	bic.w	r3, r3, #23
 8002c32:	f043 0201 	orr.w	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c56:	f023 0317 	bic.w	r3, r3, #23
 8002c5a:	f043 0202 	orr.w	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <LL_ADC_IsEnabled+0x18>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <LL_ADC_IsEnabled+0x1a>
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d101      	bne.n	8002cac <LL_ADC_IsDisableOngoing+0x18>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <LL_ADC_IsDisableOngoing+0x1a>
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cca:	f023 0317 	bic.w	r3, r3, #23
 8002cce:	f043 0204 	orr.w	r2, r3, #4
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cf2:	f023 0317 	bic.w	r3, r3, #23
 8002cf6:	f043 0210 	orr.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d101      	bne.n	8002d22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
#if defined(ADC_SUPPORT_2_5_MSPS)
  uint32_t tmpCFGR2 = 0UL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e16b      	b.n	800302a <HAL_ADC_Init+0x2fa>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
  
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff fb75 	bl	8002450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff3c 	bl	8002bf6 <LL_ADC_IsInternalRegulatorEnabled>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d115      	bne.n	8002db0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff20 	bl	8002bce <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d8e:	4b9c      	ldr	r3, [pc, #624]	@ (8003000 <HAL_ADC_Init+0x2d0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	099b      	lsrs	r3, r3, #6
 8002d94:	4a9b      	ldr	r2, [pc, #620]	@ (8003004 <HAL_ADC_Init+0x2d4>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002da2:	e002      	b.n	8002daa <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f9      	bne.n	8002da4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff1e 	bl	8002bf6 <LL_ADC_IsInternalRegulatorEnabled>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10d      	bne.n	8002ddc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc4:	f043 0210 	orr.w	r2, r3, #16
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd0:	f043 0201 	orr.w	r2, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	64da      	str	r2, [r3, #76]	@ 0x4c

    tmp_hal_status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff92 	bl	8002d0a <LL_ADC_REG_IsConversionOngoing>
 8002de6:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f040 8111 	bne.w	8003018 <HAL_ADC_Init+0x2e8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f040 810d 	bne.w	8003018 <HAL_ADC_Init+0x2e8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e02:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e06:	f043 0202 	orr.w	r2, r3, #2
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	649a      	str	r2, [r3, #72]	@ 0x48
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ff2b 	bl	8002c6e <LL_ADC_IsEnabled>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d138      	bne.n	8002e90 <HAL_ADC_Init+0x160>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f023 0118 	bic.w	r1, r3, #24
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	60da      	str	r2, [r3, #12]
      /*  - oversampling enable                                               */
      /*  - oversampling ratio                                                */
      /*  - oversampling shift                                                */
      /*  - oversampling discontinuous mode (triggered mode)                  */
      /*  - trigger frequency mode                                            */
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                    hadc->Init.TriggerFrequencyMode
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e40:	4313      	orrs	r3, r2
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
                    );
      
      MODIFY_REG(hadc->Instance->CFGR2,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_LFTRIG     ,
                 tmpCFGR2              );
      
      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002e64:	d014      	beq.n	8002e90 <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e6e:	d00f      	beq.n	8002e90 <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e78:	d00a      	beq.n	8002e90 <HAL_ADC_Init+0x160>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8002e7a:	4b63      	ldr	r3, [pc, #396]	@ (8003008 <HAL_ADC_Init+0x2d8>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002e8a:	495f      	ldr	r1, [pc, #380]	@ (8003008 <HAL_ADC_Init+0x2d8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	7e1b      	ldrb	r3, [r3, #24]
 8002e94:	039a      	lsls	r2, r3, #14
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7e5b      	ldrb	r3, [r3, #25]
 8002e9a:	03db      	lsls	r3, r3, #15
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e9c:	431a      	orrs	r2, r3
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7e9b      	ldrb	r3, [r3, #26]
 8002ea2:	035b      	lsls	r3, r3, #13
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002ea4:	4313      	orrs	r3, r2
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002eaa:	2a00      	cmp	r2, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_ADC_Init+0x184>
 8002eae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002eb2:	e000      	b.n	8002eb6 <HAL_ADC_Init+0x186>
 8002eb4:	2200      	movs	r2, #0
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002eb6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                            |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002ebc:	431a      	orrs	r2, r3
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	da04      	bge.n	8002ed0 <HAL_ADC_Init+0x1a0>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ece:	e001      	b.n	8002ed4 <HAL_ADC_Init+0x1a4>
 8002ed0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                hadc->Init.DataAlign                                            |
 8002ed4:	431a      	orrs	r2, r3
                ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002edc:	005b      	lsls	r3, r3, #1
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002ede:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d114      	bne.n	8002f1a <HAL_ADC_Init+0x1ea>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	7e9b      	ldrb	r3, [r3, #26]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d104      	bne.n	8002f02 <HAL_ADC_Init+0x1d2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR |= ADC_CFGR1_DISCEN;
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	e00b      	b.n	8002f1a <HAL_ADC_Init+0x1ea>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	649a      	str	r2, [r3, #72]	@ 0x48
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_ADC_Init+0x206>
    {
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge );
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	4b33      	ldr	r3, [pc, #204]	@ (800300c <HAL_ADC_Init+0x2dc>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	69b9      	ldr	r1, [r7, #24]
 8002f46:	430b      	orrs	r3, r1
 8002f48:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_SCANDIR   |
               ADC_CFGR1_DMACFG,
               tmpCFGR);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f52:	461a      	mov	r2, r3
 8002f54:	2100      	movs	r1, #0
 8002f56:	f7ff fd94 	bl	8002a82 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f62:	461a      	mov	r2, r3
 8002f64:	492a      	ldr	r1, [pc, #168]	@ (8003010 <HAL_ADC_Init+0x2e0>)
 8002f66:	f7ff fd8c 	bl	8002a82 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d108      	bne.n	8002f84 <HAL_ADC_Init+0x254>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f062 020f 	orn	r2, r2, #15
 8002f80:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f82:	e017      	b.n	8002fb4 <HAL_ADC_Init+0x284>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f8c:	d112      	bne.n	8002fb4 <HAL_ADC_Init+0x284>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	f003 031c 	and.w	r3, r3, #28
 8002fa0:	f06f 020f 	mvn.w	r2, #15
 8002fa4:	fa02 f103 	lsl.w	r1, r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR').                                  */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	4b16      	ldr	r3, [pc, #88]	@ (8003014 <HAL_ADC_Init+0x2e4>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d10b      	bne.n	8002fdc <HAL_ADC_Init+0x2ac>
         == tmpCFGR)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fce:	f023 0303 	bic.w	r3, r3, #3
 8002fd2:	f043 0201 	orr.w	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002fda:	e025      	b.n	8003028 <HAL_ADC_Init+0x2f8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe0:	f023 0312 	bic.w	r3, r3, #18
 8002fe4:	f043 0210 	orr.w	r2, r3, #16
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	649a      	str	r2, [r3, #72]	@ 0x48
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff0:	f043 0201 	orr.w	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	64da      	str	r2, [r3, #76]	@ 0x4c

      tmp_hal_status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ffc:	e014      	b.n	8003028 <HAL_ADC_Init+0x2f8>
 8002ffe:	bf00      	nop
 8003000:	20000014 	.word	0x20000014
 8003004:	053e2d63 	.word	0x053e2d63
 8003008:	40012700 	.word	0x40012700
 800300c:	ffde0219 	.word	0xffde0219
 8003010:	07ffff04 	.word	0x07ffff04
 8003014:	833fffe7 	.word	0x833fffe7
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800301c:	f043 0210 	orr.w	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	649a      	str	r2, [r3, #72]	@ 0x48

    tmp_hal_status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003028:	7ffb      	ldrb	r3, [r7, #31]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop

08003034 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_ADC_Stop+0x16>
 8003046:	2302      	movs	r3, #2
 8003048:	e023      	b.n	8003092 <HAL_ADC_Stop+0x5e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 8003052:	2101      	movs	r1, #1
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fb07 	bl	8003668 <ADC_ConversionStop>
 800305a:	4603      	mov	r3, r0
 800305c:	73fb      	strb	r3, [r7, #15]
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d111      	bne.n	8003088 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fbbd 	bl	80037e4 <ADC_Disable>
 800306a:	4603      	mov	r3, r0
 800306c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return tmp_hal_status;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fe2c 	bl	8002d0a <LL_ADC_REG_IsConversionOngoing>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d15a      	bne.n	800316e <HAL_ADC_Start_DMA+0xd2>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_Start_DMA+0x2a>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e056      	b.n	8003174 <HAL_ADC_Start_DMA+0xd8>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fb0a 	bl	80036e8 <ADC_Enable>
 80030d4:	4603      	mov	r3, r0
 80030d6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d142      	bne.n	8003164 <HAL_ADC_Start_DMA+0xc8>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	649a      	str	r2, [r3, #72]	@ 0x48
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	64da      	str	r2, [r3, #76]	@ 0x4c
          ADC_CLEAR_ERRORCODE(hadc);
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fc:	4a1f      	ldr	r2, [pc, #124]	@ (800317c <HAL_ADC_Start_DMA+0xe0>)
 80030fe:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	4a1e      	ldr	r2, [pc, #120]	@ (8003180 <HAL_ADC_Start_DMA+0xe4>)
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	4a1d      	ldr	r2, [pc, #116]	@ (8003184 <HAL_ADC_Start_DMA+0xe8>)
 800310e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	221c      	movs	r2, #28
 8003116:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0210 	orr.w	r2, r2, #16
 800312e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	60da      	str	r2, [r3, #12]
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3340      	adds	r3, #64	@ 0x40
 800314a:	4619      	mov	r1, r3
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f000 fe78 	bl	8003e44 <HAL_DMA_Start_IT>
 8003154:	4603      	mov	r3, r0
 8003156:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fdac 	bl	8002cba <LL_ADC_REG_StartConversion>
 8003162:	e006      	b.n	8003172 <HAL_ADC_Start_DMA+0xd6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800316c:	e001      	b.n	8003172 <HAL_ADC_Start_DMA+0xd6>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800316e:	2302      	movs	r3, #2
 8003170:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003172:	7dfb      	ldrb	r3, [r7, #23]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	080038a3 	.word	0x080038a3
 8003180:	0800396b 	.word	0x0800396b
 8003184:	08003987 	.word	0x08003987

08003188 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d017      	beq.n	80031de <HAL_ADC_IRQHandler+0x56>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d012      	beq.n	80031de <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	649a      	str	r2, [r3, #72]	@ 0x48

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fc06 	bl	80039e2 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2202      	movs	r2, #2
 80031dc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_ADC_IRQHandler+0x6a>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d05d      	beq.n	80032b8 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d058      	beq.n	80032b8 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d105      	bne.n	800321e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003216:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fc4c 	bl	8002ac0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d03d      	beq.n	80032aa <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800323c:	d035      	beq.n	80032aa <HAL_ADC_IRQHandler+0x122>
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b08      	cmp	r3, #8
 800324a:	d12e      	bne.n	80032aa <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fd5a 	bl	8002d0a <LL_ADC_REG_IsConversionOngoing>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11a      	bne.n	8003292 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 020c 	bic.w	r2, r2, #12
 800326a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	649a      	str	r2, [r3, #72]	@ 0x48

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d112      	bne.n	80032aa <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	649a      	str	r2, [r3, #72]	@ 0x48
 8003290:	e00b      	b.n	80032aa <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003296:	f043 0210 	orr.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	649a      	str	r2, [r3, #72]	@ 0x48

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a2:	f043 0201 	orr.w	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f006 f90a 	bl	80094c4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	220c      	movs	r2, #12
 80032b6:	601a      	str	r2, [r3, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d011      	beq.n	80032e6 <HAL_ADC_IRQHandler+0x15e>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00c      	beq.n	80032e6 <HAL_ADC_IRQHandler+0x15e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f873 	bl	80033c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2280      	movs	r2, #128	@ 0x80
 80032e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d012      	beq.n	8003316 <HAL_ADC_IRQHandler+0x18e>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <HAL_ADC_IRQHandler+0x18e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fb57 	bl	80039ba <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003314:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800331c:	2b00      	cmp	r3, #0
 800331e:	d012      	beq.n	8003346 <HAL_ADC_IRQHandler+0x1be>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00d      	beq.n	8003346 <HAL_ADC_IRQHandler+0x1be>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800332e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fb49 	bl	80039ce <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	d02b      	beq.n	80033a8 <HAL_ADC_IRQHandler+0x220>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	d026      	beq.n	80033a8 <HAL_ADC_IRQHandler+0x220>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <HAL_ADC_IRQHandler+0x1e0>
    {
      overrun_error = 1UL;
 8003362:	2301      	movs	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e009      	b.n	800337c <HAL_ADC_IRQHandler+0x1f4>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fc03 	bl	8002b78 <LL_ADC_REG_GetDMATransfer>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_ADC_IRQHandler+0x1f4>
      {
        overrun_error = 1UL;
 8003378:	2301      	movs	r3, #1
 800337a:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d10e      	bne.n	80033a0 <HAL_ADC_IRQHandler+0x218>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003386:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003392:	f043 0202 	orr.w	r2, r3, #2
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	64da      	str	r2, [r3, #76]	@ 0x4c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f81c 	bl	80033d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2210      	movs	r2, #16
 80033a6:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 80033a8:	bf00      	nop
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
#if  defined(ADC_SUPPORT_2_5_MSPS)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(sConfig->SamplingTime));
  
  if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x28>
 8003410:	2302      	movs	r3, #2
 8003412:	e114      	b.n	800363e <HAL_ADC_ConfigChannel+0x252>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fc72 	bl	8002d0a <LL_ADC_REG_IsConversionOngoing>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	f040 80fb 	bne.w	8003624 <HAL_ADC_ConfigChannel+0x238>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b02      	cmp	r3, #2
 8003434:	f000 80b3 	beq.w	800359e <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003440:	d004      	beq.n	800344c <HAL_ADC_ConfigChannel+0x60>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003446:	4a80      	ldr	r2, [pc, #512]	@ (8003648 <HAL_ADC_ConfigChannel+0x25c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d108      	bne.n	800345e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f7ff fb67 	bl	8002b2a <LL_ADC_REG_SetSequencerChAdd>
 800345c:	e041      	b.n	80034e2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	210f      	movs	r1, #15
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	401a      	ands	r2, r3
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <HAL_ADC_ConfigChannel+0xa0>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	0e9b      	lsrs	r3, r3, #26
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	e011      	b.n	80034b0 <HAL_ADC_ConfigChannel+0xc4>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	60fb      	str	r3, [r7, #12]
  return result;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0xbc>
    return 32U;
 80034a4:	2320      	movs	r3, #32
 80034a6:	e003      	b.n	80034b0 <HAL_ADC_ConfigChannel+0xc4>
  return __builtin_clz(value);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	6839      	ldr	r1, [r7, #0]
 80034b2:	6849      	ldr	r1, [r1, #4]
 80034b4:	f001 011f 	and.w	r1, r1, #31
 80034b8:	408b      	lsls	r3, r1
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	651a      	str	r2, [r3, #80]	@ 0x50
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	089b      	lsrs	r3, r3, #2
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d808      	bhi.n	80034e2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	f7ff fb02 	bl	8002ae6 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6819      	ldr	r1, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f7ff fb50 	bl	8002b94 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b54      	ldr	r3, [pc, #336]	@ (800364c <HAL_ADC_ConfigChannel+0x260>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8099 	beq.w	8003634 <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003502:	4853      	ldr	r0, [pc, #332]	@ (8003650 <HAL_ADC_ConfigChannel+0x264>)
 8003504:	f7ff faaf 	bl	8002a66 <LL_ADC_GetCommonPathInternalCh>
 8003508:	61b8      	str	r0, [r7, #24]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a51      	ldr	r2, [pc, #324]	@ (8003654 <HAL_ADC_ConfigChannel+0x268>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d120      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x16a>
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d11b      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x16a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003524:	4619      	mov	r1, r3
 8003526:	484a      	ldr	r0, [pc, #296]	@ (8003650 <HAL_ADC_ConfigChannel+0x264>)
 8003528:	f7ff fa8a 	bl	8002a40 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800352c:	4b4a      	ldr	r3, [pc, #296]	@ (8003658 <HAL_ADC_ConfigChannel+0x26c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	099b      	lsrs	r3, r3, #6
 8003532:	4a4a      	ldr	r2, [pc, #296]	@ (800365c <HAL_ADC_ConfigChannel+0x270>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	099b      	lsrs	r3, r3, #6
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 8003546:	e002      	b.n	800354e <HAL_ADC_ConfigChannel+0x162>
          {
            wait_loop_index--;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	3b01      	subs	r3, #1
 800354c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f9      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x15c>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003554:	e06e      	b.n	8003634 <HAL_ADC_ConfigChannel+0x248>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a41      	ldr	r2, [pc, #260]	@ (8003660 <HAL_ADC_ConfigChannel+0x274>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10c      	bne.n	800357a <HAL_ADC_ConfigChannel+0x18e>
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d107      	bne.n	800357a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003570:	4619      	mov	r1, r3
 8003572:	4837      	ldr	r0, [pc, #220]	@ (8003650 <HAL_ADC_ConfigChannel+0x264>)
 8003574:	f7ff fa64 	bl	8002a40 <LL_ADC_SetCommonPathInternalCh>
 8003578:	e05c      	b.n	8003634 <HAL_ADC_ConfigChannel+0x248>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a39      	ldr	r2, [pc, #228]	@ (8003664 <HAL_ADC_ConfigChannel+0x278>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d157      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x248>
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d152      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003594:	4619      	mov	r1, r3
 8003596:	482e      	ldr	r0, [pc, #184]	@ (8003650 <HAL_ADC_ConfigChannel+0x264>)
 8003598:	f7ff fa52 	bl	8002a40 <LL_ADC_SetCommonPathInternalCh>
 800359c:	e04a      	b.n	8003634 <HAL_ADC_ConfigChannel+0x248>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035a6:	d004      	beq.n	80035b2 <HAL_ADC_ConfigChannel+0x1c6>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80035ac:	4a26      	ldr	r2, [pc, #152]	@ (8003648 <HAL_ADC_ConfigChannel+0x25c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d107      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x1d6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4619      	mov	r1, r3
 80035bc:	4610      	mov	r0, r2
 80035be:	f7ff fac7 	bl	8002b50 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4b21      	ldr	r3, [pc, #132]	@ (800364c <HAL_ADC_ConfigChannel+0x260>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d032      	beq.n	8003634 <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ce:	4820      	ldr	r0, [pc, #128]	@ (8003650 <HAL_ADC_ConfigChannel+0x264>)
 80035d0:	f7ff fa49 	bl	8002a66 <LL_ADC_GetCommonPathInternalCh>
 80035d4:	61b8      	str	r0, [r7, #24]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1e      	ldr	r2, [pc, #120]	@ (8003654 <HAL_ADC_ConfigChannel+0x268>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d107      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x204>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80035e6:	4619      	mov	r1, r3
 80035e8:	4819      	ldr	r0, [pc, #100]	@ (8003650 <HAL_ADC_ConfigChannel+0x264>)
 80035ea:	f7ff fa29 	bl	8002a40 <LL_ADC_SetCommonPathInternalCh>
 80035ee:	e021      	b.n	8003634 <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003660 <HAL_ADC_ConfigChannel+0x274>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d107      	bne.n	800360a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003600:	4619      	mov	r1, r3
 8003602:	4813      	ldr	r0, [pc, #76]	@ (8003650 <HAL_ADC_ConfigChannel+0x264>)
 8003604:	f7ff fa1c 	bl	8002a40 <LL_ADC_SetCommonPathInternalCh>
 8003608:	e014      	b.n	8003634 <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a15      	ldr	r2, [pc, #84]	@ (8003664 <HAL_ADC_ConfigChannel+0x278>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d10f      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800361a:	4619      	mov	r1, r3
 800361c:	480c      	ldr	r0, [pc, #48]	@ (8003650 <HAL_ADC_ConfigChannel+0x264>)
 800361e:	f7ff fa0f 	bl	8002a40 <LL_ADC_SetCommonPathInternalCh>
 8003622:	e007      	b.n	8003634 <HAL_ADC_ConfigChannel+0x248>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	649a      	str	r2, [r3, #72]	@ 0x48
    
    tmp_hal_status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800363c:	7ffb      	ldrb	r3, [r7, #31]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	80000004 	.word	0x80000004
 800364c:	80080000 	.word	0x80080000
 8003650:	40012700 	.word	0x40012700
 8003654:	b0001000 	.word	0xb0001000
 8003658:	20000014 	.word	0x20000014
 800365c:	053e2d63 	.word	0x053e2d63
 8003660:	b8004000 	.word	0xb8004000
 8003664:	b4002000 	.word	0xb4002000

08003668 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fb47 	bl	8002d0a <LL_ADC_REG_IsConversionOngoing>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d02c      	beq.n	80036dc <ADC_ConversionStop+0x74>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fb04 	bl	8002c94 <LL_ADC_IsDisableOngoing>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <ADC_ConversionStop+0x34>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fb23 	bl	8002ce2 <LL_ADC_REG_StopConversion>
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800369c:	f7ff f986 	bl	80029ac <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]
    
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80036a2:	e014      	b.n	80036ce <ADC_ConversionStop+0x66>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036a4:	f7ff f982 	bl	80029ac <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b05      	cmp	r3, #5
 80036b0:	d90d      	bls.n	80036ce <ADC_ConversionStop+0x66>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b6:	f043 0210 	orr.w	r2, r3, #16
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	649a      	str	r2, [r3, #72]	@ 0x48
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c2:	f043 0201 	orr.w	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e007      	b.n	80036de <ADC_ConversionStop+0x76>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e3      	bne.n	80036a4 <ADC_ConversionStop+0x3c>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fab8 	bl	8002c6e <LL_ADC_IsEnabled>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d162      	bne.n	80037ca <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	4b32      	ldr	r3, [pc, #200]	@ (80037d4 <ADC_Enable+0xec>)
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00d      	beq.n	800372e <ADC_Enable+0x46>
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003716:	f043 0210 	orr.w	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003722:	f043 0201 	orr.w	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	64da      	str	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e04e      	b.n	80037cc <ADC_Enable+0xe4>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fa73 	bl	8002c1e <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003738:	4827      	ldr	r0, [pc, #156]	@ (80037d8 <ADC_Enable+0xf0>)
 800373a:	f7ff f994 	bl	8002a66 <LL_ADC_GetCommonPathInternalCh>
 800373e:	4603      	mov	r3, r0
 8003740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00f      	beq.n	8003768 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003748:	4b24      	ldr	r3, [pc, #144]	@ (80037dc <ADC_Enable+0xf4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	099b      	lsrs	r3, r3, #6
 800374e:	4a24      	ldr	r2, [pc, #144]	@ (80037e0 <ADC_Enable+0xf8>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	099b      	lsrs	r3, r3, #6
 8003756:	3301      	adds	r3, #1
 8003758:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800375a:	e002      	b.n	8003762 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	3b01      	subs	r3, #1
 8003760:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f9      	bne.n	800375c <ADC_Enable+0x74>
    }

#if defined(ADC_SUPPORT_2_5_MSPS)
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	7e5b      	ldrb	r3, [r3, #25]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d02c      	beq.n	80037ca <ADC_Enable+0xe2>
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003770:	f7ff f91c 	bl	80029ac <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003776:	e021      	b.n	80037bc <ADC_Enable+0xd4>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fa76 	bl	8002c6e <LL_ADC_IsEnabled>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fa46 	bl	8002c1e <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003792:	f7ff f90b 	bl	80029ac <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d90d      	bls.n	80037bc <ADC_Enable+0xd4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a4:	f043 0210 	orr.w	r2, r3, #16
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	649a      	str	r2, [r3, #72]	@ 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b0:	f043 0201 	orr.w	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e007      	b.n	80037cc <ADC_Enable+0xe4>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d1d6      	bne.n	8003778 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	80000017 	.word	0x80000017
 80037d8:	40012700 	.word	0x40012700
 80037dc:	20000014 	.word	0x20000014
 80037e0:	053e2d63 	.word	0x053e2d63

080037e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fa4f 	bl	8002c94 <LL_ADC_IsDisableOngoing>
 80037f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fa36 	bl	8002c6e <LL_ADC_IsEnabled>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d047      	beq.n	8003898 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d144      	bne.n	8003898 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0305 	and.w	r3, r3, #5
 8003818:	2b01      	cmp	r3, #1
 800381a:	d10c      	bne.n	8003836 <ADC_Disable+0x52>
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fa10 	bl	8002c46 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2203      	movs	r2, #3
 800382c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800382e:	f7ff f8bd 	bl	80029ac <HAL_GetTick>
 8003832:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003834:	e029      	b.n	800388a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800383a:	f043 0210 	orr.w	r2, r3, #16
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	649a      	str	r2, [r3, #72]	@ 0x48
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003846:	f043 0201 	orr.w	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	64da      	str	r2, [r3, #76]	@ 0x4c
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e023      	b.n	800389a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003852:	f7ff f8ab 	bl	80029ac <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d914      	bls.n	800388a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00d      	beq.n	800388a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003872:	f043 0210 	orr.w	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387e:	f043 0201 	orr.w	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	64da      	str	r2, [r3, #76]	@ 0x4c

          return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e007      	b.n	800389a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1dc      	bne.n	8003852 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d143      	bne.n	8003944 <ADC_DMAConvCplt+0xa2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff f8f7 	bl	8002ac0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d031      	beq.n	800393c <ADC_DMAConvCplt+0x9a>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	7e9b      	ldrb	r3, [r3, #26]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d12d      	bne.n	800393c <ADC_DMAConvCplt+0x9a>
      )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d126      	bne.n	800393c <ADC_DMAConvCplt+0x9a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fa09 	bl	8002d0a <LL_ADC_REG_IsConversionOngoing>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d112      	bne.n	8003924 <ADC_DMAConvCplt+0x82>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 020c 	bic.w	r2, r2, #12
 800390c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003912:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	649a      	str	r2, [r3, #72]	@ 0x48
 8003922:	e00b      	b.n	800393c <ADC_DMAConvCplt+0x9a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003928:	f043 0220 	orr.w	r2, r3, #32
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	649a      	str	r2, [r3, #72]	@ 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f005 fdc1 	bl	80094c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003942:	e00e      	b.n	8003962 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <ADC_DMAConvCplt+0xb6>
      HAL_ADC_ErrorCallback(hadc);
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f7ff fd41 	bl	80033d8 <HAL_ADC_ErrorCallback>
}
 8003956:	e004      	b.n	8003962 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	4798      	blx	r3
}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003976:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f7ff fd19 	bl	80033b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003992:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003998:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a4:	f043 0204 	orr.w	r2, r3, #4
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff fd13 	bl	80033d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a08:	4b0c      	ldr	r3, [pc, #48]	@ (8003a3c <__NVIC_SetPriorityGrouping+0x44>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a14:	4013      	ands	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a2a:	4a04      	ldr	r2, [pc, #16]	@ (8003a3c <__NVIC_SetPriorityGrouping+0x44>)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	60d3      	str	r3, [r2, #12]
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a44:	4b04      	ldr	r3, [pc, #16]	@ (8003a58 <__NVIC_GetPriorityGrouping+0x18>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	0a1b      	lsrs	r3, r3, #8
 8003a4a:	f003 0307 	and.w	r3, r3, #7
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	db0b      	blt.n	8003a86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	f003 021f 	and.w	r2, r3, #31
 8003a74:	4907      	ldr	r1, [pc, #28]	@ (8003a94 <__NVIC_EnableIRQ+0x38>)
 8003a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000e100 	.word	0xe000e100

08003a98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	db12      	blt.n	8003ad0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	f003 021f 	and.w	r2, r3, #31
 8003ab0:	490a      	ldr	r1, [pc, #40]	@ (8003adc <__NVIC_DisableIRQ+0x44>)
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2001      	movs	r0, #1
 8003aba:	fa00 f202 	lsl.w	r2, r0, r2
 8003abe:	3320      	adds	r3, #32
 8003ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ac4:	f3bf 8f4f 	dsb	sy
}
 8003ac8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003aca:	f3bf 8f6f 	isb	sy
}
 8003ace:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000e100 	.word	0xe000e100

08003ae0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	db0c      	blt.n	8003b0c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	f003 021f 	and.w	r2, r3, #31
 8003af8:	4907      	ldr	r1, [pc, #28]	@ (8003b18 <__NVIC_SetPendingIRQ+0x38>)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2001      	movs	r0, #1
 8003b02:	fa00 f202 	lsl.w	r2, r0, r2
 8003b06:	3340      	adds	r3, #64	@ 0x40
 8003b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000e100 	.word	0xe000e100

08003b1c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	db0c      	blt.n	8003b48 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	f003 021f 	and.w	r2, r3, #31
 8003b34:	4907      	ldr	r1, [pc, #28]	@ (8003b54 <__NVIC_ClearPendingIRQ+0x38>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b42:	3360      	adds	r3, #96	@ 0x60
 8003b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	e000e100 	.word	0xe000e100

08003b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	6039      	str	r1, [r7, #0]
 8003b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	db0a      	blt.n	8003b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	490c      	ldr	r1, [pc, #48]	@ (8003ba4 <__NVIC_SetPriority+0x4c>)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	0112      	lsls	r2, r2, #4
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b80:	e00a      	b.n	8003b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4908      	ldr	r1, [pc, #32]	@ (8003ba8 <__NVIC_SetPriority+0x50>)
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	3b04      	subs	r3, #4
 8003b90:	0112      	lsls	r2, r2, #4
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	440b      	add	r3, r1
 8003b96:	761a      	strb	r2, [r3, #24]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	e000e100 	.word	0xe000e100
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	@ 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f1c3 0307 	rsb	r3, r3, #7
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	bf28      	it	cs
 8003bca:	2304      	movcs	r3, #4
 8003bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	2b06      	cmp	r3, #6
 8003bd4:	d902      	bls.n	8003bdc <NVIC_EncodePriority+0x30>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3b03      	subs	r3, #3
 8003bda:	e000      	b.n	8003bde <NVIC_EncodePriority+0x32>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	f04f 32ff 	mov.w	r2, #4294967295
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43da      	mvns	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	401a      	ands	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	43d9      	mvns	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	4313      	orrs	r3, r2
         );
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3724      	adds	r7, #36	@ 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c24:	d301      	bcc.n	8003c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c26:	2301      	movs	r3, #1
 8003c28:	e00f      	b.n	8003c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c54 <SysTick_Config+0x40>)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c32:	210f      	movs	r1, #15
 8003c34:	f04f 30ff 	mov.w	r0, #4294967295
 8003c38:	f7ff ff8e 	bl	8003b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c3c:	4b05      	ldr	r3, [pc, #20]	@ (8003c54 <SysTick_Config+0x40>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c42:	4b04      	ldr	r3, [pc, #16]	@ (8003c54 <SysTick_Config+0x40>)
 8003c44:	2207      	movs	r2, #7
 8003c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	e000e010 	.word	0xe000e010

08003c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff fec9 	bl	80039f8 <__NVIC_SetPriorityGrouping>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	4603      	mov	r3, r0
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c7c:	f7ff fee0 	bl	8003a40 <__NVIC_GetPriorityGrouping>
 8003c80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	6978      	ldr	r0, [r7, #20]
 8003c88:	f7ff ff90 	bl	8003bac <NVIC_EncodePriority>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff5f 	bl	8003b58 <__NVIC_SetPriority>
}
 8003c9a:	bf00      	nop
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	4603      	mov	r3, r0
 8003caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fed3 	bl	8003a5c <__NVIC_EnableIRQ>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fee3 	bl	8003a98 <__NVIC_DisableIRQ>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ff96 	bl	8003c14 <SysTick_Config>
 8003ce8:	4603      	mov	r3, r0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff feed 	bl	8003ae0 <__NVIC_SetPendingIRQ>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	4603      	mov	r3, r0
 8003d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fefd 	bl	8003b1c <__NVIC_ClearPendingIRQ>
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e078      	b.n	8003e30 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	4b3c      	ldr	r3, [pc, #240]	@ (8003e38 <HAL_DMA_Init+0x10c>)
 8003d46:	4413      	add	r3, r2
 8003d48:	4a3c      	ldr	r2, [pc, #240]	@ (8003e3c <HAL_DMA_Init+0x110>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	009a      	lsls	r2, r3, #2
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a39      	ldr	r2, [pc, #228]	@ (8003e40 <HAL_DMA_Init+0x114>)
 8003d5a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa6e 	bl	8004290 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dbc:	d102      	bne.n	8003dc4 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dcc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dda:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d010      	beq.n	8003e06 <HAL_DMA_Init+0xda>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d80c      	bhi.n	8003e06 <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 fa7b 	bl	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	e008      	b.n	8003e18 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	bffdfff8 	.word	0xbffdfff8
 8003e3c:	cccccccd 	.word	0xcccccccd
 8003e40:	40020000 	.word	0x40020000

08003e44 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_DMA_Start_IT+0x20>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e066      	b.n	8003f32 <HAL_DMA_Start_IT+0xee>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d155      	bne.n	8003f24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f9b9 	bl	8004214 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d008      	beq.n	8003ebc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 020e 	orr.w	r2, r2, #14
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e00f      	b.n	8003edc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0204 	bic.w	r2, r2, #4
 8003eca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 020a 	orr.w	r2, r2, #10
 8003eda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ef8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e005      	b.n	8003f30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e04f      	b.n	8003fec <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d008      	beq.n	8003f6a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e040      	b.n	8003fec <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 020e 	bic.w	r2, r2, #14
 8003f78:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f003 021c 	and.w	r2, r3, #28
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fb6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00c      	beq.n	8003fda <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fd8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d005      	beq.n	800401c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2204      	movs	r2, #4
 8004014:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	e047      	b.n	80040ac <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 020e 	bic.w	r2, r2, #14
 800402a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004046:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800404a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004050:	f003 021c 	and.w	r2, r3, #28
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f202 	lsl.w	r2, r1, r2
 800405e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004068:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004080:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800408a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
    }
  }
  return status;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	f003 031c 	and.w	r3, r3, #28
 80040d6:	2204      	movs	r2, #4
 80040d8:	409a      	lsls	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4013      	ands	r3, r2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d026      	beq.n	8004130 <HAL_DMA_IRQHandler+0x7a>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d021      	beq.n	8004130 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d107      	bne.n	800410a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0204 	bic.w	r2, r2, #4
 8004108:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410e:	f003 021c 	and.w	r2, r3, #28
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	2104      	movs	r1, #4
 8004118:	fa01 f202 	lsl.w	r2, r1, r2
 800411c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	2b00      	cmp	r3, #0
 8004124:	d071      	beq.n	800420a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800412e:	e06c      	b.n	800420a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	f003 031c 	and.w	r3, r3, #28
 8004138:	2202      	movs	r2, #2
 800413a:	409a      	lsls	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d02e      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xec>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d029      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 020a 	bic.w	r2, r2, #10
 800416a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004178:	f003 021c 	and.w	r2, r3, #28
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	2102      	movs	r1, #2
 8004182:	fa01 f202 	lsl.w	r2, r1, r2
 8004186:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d038      	beq.n	800420a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041a0:	e033      	b.n	800420a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	f003 031c 	and.w	r3, r3, #28
 80041aa:	2208      	movs	r2, #8
 80041ac:	409a      	lsls	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d02a      	beq.n	800420c <HAL_DMA_IRQHandler+0x156>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d025      	beq.n	800420c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 020e 	bic.w	r2, r2, #14
 80041ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d4:	f003 021c 	and.w	r2, r3, #28
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	2101      	movs	r1, #1
 80041de:	fa01 f202 	lsl.w	r2, r1, r2
 80041e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d004      	beq.n	800420c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800420a:	bf00      	nop
 800420c:	bf00      	nop
}
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800422a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800423c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	f003 021c 	and.w	r2, r3, #28
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	2101      	movs	r1, #1
 800424c:	fa01 f202 	lsl.w	r2, r1, r2
 8004250:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b10      	cmp	r3, #16
 8004260:	d108      	bne.n	8004274 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004272:	e007      	b.n	8004284 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	60da      	str	r2, [r3, #12]
}
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429c:	089b      	lsrs	r3, r3, #2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80042a4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6493      	str	r3, [r2, #72]	@ 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	3b08      	subs	r3, #8
 80042b4:	4a0a      	ldr	r2, [pc, #40]	@ (80042e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a08      	ldr	r2, [pc, #32]	@ (80042e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80042c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2201      	movs	r2, #1
 80042cc:	409a      	lsls	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	cccccccd 	.word	0xcccccccd
 80042e4:	40020880 	.word	0x40020880

080042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042f8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4b0b      	ldr	r3, [pc, #44]	@ (800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	461a      	mov	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a09      	ldr	r2, [pc, #36]	@ (8004330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800430c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3b01      	subs	r3, #1
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2201      	movs	r2, #1
 8004318:	409a      	lsls	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	1000823f 	.word	0x1000823f
 8004330:	40020940 	.word	0x40020940

08004334 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004342:	e146      	b.n	80045d2 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	2101      	movs	r1, #1
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	4013      	ands	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8138 	beq.w	80045cc <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	2b01      	cmp	r3, #1
 8004366:	d005      	beq.n	8004374 <HAL_GPIO_Init+0x40>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d130      	bne.n	80043d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	2203      	movs	r2, #3
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4013      	ands	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043aa:	2201      	movs	r2, #1
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4013      	ands	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	091b      	lsrs	r3, r3, #4
 80043c0:	f003 0201 	and.w	r2, r3, #1
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d017      	beq.n	8004412 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	2203      	movs	r2, #3
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43db      	mvns	r3, r3
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4013      	ands	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d123      	bne.n	8004466 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	08da      	lsrs	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3208      	adds	r2, #8
 8004426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	220f      	movs	r2, #15
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	43db      	mvns	r3, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4013      	ands	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	08da      	lsrs	r2, r3, #3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3208      	adds	r2, #8
 8004460:	6939      	ldr	r1, [r7, #16]
 8004462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	2203      	movs	r2, #3
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4013      	ands	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 0203 	and.w	r2, r3, #3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 8092 	beq.w	80045cc <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80044a8:	4a51      	ldr	r2, [pc, #324]	@ (80045f0 <HAL_GPIO_Init+0x2bc>)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	089b      	lsrs	r3, r3, #2
 80044ae:	3302      	adds	r3, #2
 80044b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	220f      	movs	r2, #15
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4013      	ands	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044d2:	d013      	beq.n	80044fc <HAL_GPIO_Init+0x1c8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a47      	ldr	r2, [pc, #284]	@ (80045f4 <HAL_GPIO_Init+0x2c0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00d      	beq.n	80044f8 <HAL_GPIO_Init+0x1c4>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a46      	ldr	r2, [pc, #280]	@ (80045f8 <HAL_GPIO_Init+0x2c4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d007      	beq.n	80044f4 <HAL_GPIO_Init+0x1c0>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a45      	ldr	r2, [pc, #276]	@ (80045fc <HAL_GPIO_Init+0x2c8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_GPIO_Init+0x1bc>
 80044ec:	2304      	movs	r3, #4
 80044ee:	e006      	b.n	80044fe <HAL_GPIO_Init+0x1ca>
 80044f0:	2307      	movs	r3, #7
 80044f2:	e004      	b.n	80044fe <HAL_GPIO_Init+0x1ca>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e002      	b.n	80044fe <HAL_GPIO_Init+0x1ca>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <HAL_GPIO_Init+0x1ca>
 80044fc:	2300      	movs	r3, #0
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	f002 0203 	and.w	r2, r2, #3
 8004504:	0092      	lsls	r2, r2, #2
 8004506:	4093      	lsls	r3, r2
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800450e:	4938      	ldr	r1, [pc, #224]	@ (80045f0 <HAL_GPIO_Init+0x2bc>)
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	089b      	lsrs	r3, r3, #2
 8004514:	3302      	adds	r3, #2
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800451c:	4b38      	ldr	r3, [pc, #224]	@ (8004600 <HAL_GPIO_Init+0x2cc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	43db      	mvns	r3, r3
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4013      	ands	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004540:	4a2f      	ldr	r2, [pc, #188]	@ (8004600 <HAL_GPIO_Init+0x2cc>)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004546:	4b2e      	ldr	r3, [pc, #184]	@ (8004600 <HAL_GPIO_Init+0x2cc>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	43db      	mvns	r3, r3
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4013      	ands	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800456a:	4a25      	ldr	r2, [pc, #148]	@ (8004600 <HAL_GPIO_Init+0x2cc>)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004570:	4b23      	ldr	r3, [pc, #140]	@ (8004600 <HAL_GPIO_Init+0x2cc>)
 8004572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	43db      	mvns	r3, r3
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4013      	ands	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004596:	4a1a      	ldr	r2, [pc, #104]	@ (8004600 <HAL_GPIO_Init+0x2cc>)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800459e:	4b18      	ldr	r3, [pc, #96]	@ (8004600 <HAL_GPIO_Init+0x2cc>)
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	43db      	mvns	r3, r3
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4013      	ands	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004600 <HAL_GPIO_Init+0x2cc>)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	3301      	adds	r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f47f aeb1 	bne.w	8004344 <HAL_GPIO_Init+0x10>
  }
}
 80045e2:	bf00      	nop
 80045e4:	bf00      	nop
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40010000 	.word	0x40010000
 80045f4:	48000400 	.word	0x48000400
 80045f8:	48000800 	.word	0x48000800
 80045fc:	48001000 	.word	0x48001000
 8004600:	58000800 	.word	0x58000800

08004604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	807b      	strh	r3, [r7, #2]
 8004610:	4613      	mov	r3, r2
 8004612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004614:	787b      	ldrb	r3, [r7, #1]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004620:	e002      	b.n	8004628 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800463a:	4b0a      	ldr	r3, [pc, #40]	@ (8004664 <HAL_HSEM_IRQHandler+0x30>)
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004640:	4b08      	ldr	r3, [pc, #32]	@ (8004664 <HAL_HSEM_IRQHandler+0x30>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	43db      	mvns	r3, r3
 8004648:	4906      	ldr	r1, [pc, #24]	@ (8004664 <HAL_HSEM_IRQHandler+0x30>)
 800464a:	4013      	ands	r3, r2
 800464c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800464e:	4a05      	ldr	r2, [pc, #20]	@ (8004664 <HAL_HSEM_IRQHandler+0x30>)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f807 	bl	8004668 <HAL_HSEM_FreeCallback>
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	58001500 	.word	0x58001500

08004668 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d01e      	beq.n	80046cc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800468e:	4b13      	ldr	r3, [pc, #76]	@ (80046dc <HAL_IPCC_Init+0x60>)
 8004690:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fd ff50 	bl	8002544 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80046a4:	68b8      	ldr	r0, [r7, #8]
 80046a6:	f000 f85b 	bl	8004760 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f82c 	bl	8004714 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80046ca:	e001      	b.n	80046d0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	58000c00 	.word	0x58000c00

080046e0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	4613      	mov	r3, r2
 80046ec:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	4613      	mov	r3, r2
 8004706:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e00f      	b.n	8004742 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	4a0b      	ldr	r2, [pc, #44]	@ (8004758 <IPCC_SetDefaultCallbacks+0x44>)
 800472c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3306      	adds	r3, #6
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	4a08      	ldr	r2, [pc, #32]	@ (800475c <IPCC_SetDefaultCallbacks+0x48>)
 800473a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3301      	adds	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b05      	cmp	r3, #5
 8004746:	d9ec      	bls.n	8004722 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	080046e1 	.word	0x080046e1
 800475c:	080046fb 	.word	0x080046fb

08004760 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8004774:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	223f      	movs	r2, #63	@ 0x3f
 800477a:	609a      	str	r2, [r3, #8]
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a04      	ldr	r2, [pc, #16]	@ (80047a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004796:	6013      	str	r3, [r2, #0]
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	58000400 	.word	0x58000400

080047a8 <LL_PWR_EnableSRAM2Retention>:
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 80047ac:	4b05      	ldr	r3, [pc, #20]	@ (80047c4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a04      	ldr	r2, [pc, #16]	@ (80047c4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80047b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047b6:	6093      	str	r3, [r2, #8]
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	58000400 	.word	0x58000400

080047c8 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 80047cc:	f7ff ffec 	bl	80047a8 <LL_PWR_EnableSRAM2Retention>
}
 80047d0:	bf00      	nop
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_PWREx_GetWakeupFlag>:
  *            @arg PWR_FLAG_WUF4: A wakeup event was received from PA2.
  *            @arg PWR_FLAG_WUF5: A wakeup event was received from PC5.
  * @retval The Wake-Up pin flag.
  */
uint32_t  HAL_PWREx_GetWakeupFlag(uint32_t WakeUpFlag)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  return (PWR->SR1 & (1UL << ((WakeUpFlag) & 31U)));
 80047dc:	4b07      	ldr	r3, [pc, #28]	@ (80047fc <HAL_PWREx_GetWakeupFlag+0x28>)
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	2101      	movs	r1, #1
 80047e8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ec:	4013      	ands	r3, r2
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	58000400 	.word	0x58000400

08004800 <HAL_PWREx_ClearWakeupFlag>:
  *            @arg PWR_FLAG_WUF4: A wakeup event was received from PA2.
  *            @arg PWR_FLAG_WUF5: A wakeup event was received from PC5.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag(uint32_t WakeUpFlag)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  PWR->SCR = (1UL << ((WakeUpFlag) & 31U));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f003 031f 	and.w	r3, r3, #31
 800480e:	4a0c      	ldr	r2, [pc, #48]	@ (8004840 <HAL_PWREx_ClearWakeupFlag+0x40>)
 8004810:	2101      	movs	r1, #1
 8004812:	fa01 f303 	lsl.w	r3, r1, r3
 8004816:	6193      	str	r3, [r2, #24]

  if ((PWR->SR1 & (1UL << ((WakeUpFlag) & 31U))) != 0U)
 8004818:	4b09      	ldr	r3, [pc, #36]	@ (8004840 <HAL_PWREx_ClearWakeupFlag+0x40>)
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	fa22 f303 	lsr.w	r3, r2, r3
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_PWREx_ClearWakeupFlag+0x32>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e000      	b.n	8004834 <HAL_PWREx_ClearWakeupFlag+0x34>
  }
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	58000400 	.word	0x58000400

08004844 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004852:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004856:	d101      	bne.n	800485c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_RCC_HSE_Enable>:
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800486c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800487a:	6013      	str	r3, [r2, #0]
}
 800487c:	bf00      	nop
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <LL_RCC_HSE_Disable>:
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800488a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004894:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004898:	6013      	str	r3, [r2, #0]
}
 800489a:	bf00      	nop
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <LL_RCC_HSE_IsReady>:
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80048a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048b6:	d101      	bne.n	80048bc <LL_RCC_HSE_IsReady+0x18>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <LL_RCC_HSE_IsReady+0x1a>
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <LL_RCC_HSI_Enable>:
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80048cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048da:	6013      	str	r3, [r2, #0]
}
 80048dc:	bf00      	nop
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <LL_RCC_HSI_Disable>:
{
 80048e6:	b480      	push	{r7}
 80048e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80048ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048f8:	6013      	str	r3, [r2, #0]
}
 80048fa:	bf00      	nop
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_RCC_HSI_IsReady>:
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004916:	d101      	bne.n	800491c <LL_RCC_HSI_IsReady+0x18>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <LL_RCC_HSI_IsReady+0x1a>
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004942:	4313      	orrs	r3, r2
 8004944:	604b      	str	r3, [r1, #4]
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <LL_RCC_LSE_Enable>:
{
 8004952:	b480      	push	{r7}
 8004954:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800496a:	bf00      	nop
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <LL_RCC_LSE_Disable>:
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004980:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_LSE_EnableBypass>:
{
 8004996:	b480      	push	{r7}
 8004998:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800499a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049a6:	f043 0304 	orr.w	r3, r3, #4
 80049aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80049ae:	bf00      	nop
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <LL_RCC_LSE_DisableBypass>:
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049c8:	f023 0304 	bic.w	r3, r3, #4
 80049cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <LL_RCC_LSE_IsReady>:
{
 80049da:	b480      	push	{r7}
 80049dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80049de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d101      	bne.n	80049f2 <LL_RCC_LSE_IsReady+0x18>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <LL_RCC_LSE_IsReady+0x1a>
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <LL_RCC_LSI1_Enable>:
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004a16:	bf00      	nop
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <LL_RCC_LSI1_Disable>:
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004a38:	bf00      	nop
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <LL_RCC_LSI1_IsReady>:
{
 8004a42:	b480      	push	{r7}
 8004a44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d101      	bne.n	8004a5a <LL_RCC_LSI1_IsReady+0x18>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <LL_RCC_LSI1_IsReady+0x1a>
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <LL_RCC_LSI2_Enable>:
{
 8004a66:	b480      	push	{r7}
 8004a68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a76:	f043 0304 	orr.w	r3, r3, #4
 8004a7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004a7e:	bf00      	nop
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_RCC_LSI2_Disable>:
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a98:	f023 0304 	bic.w	r3, r3, #4
 8004a9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <LL_RCC_LSI2_IsReady>:
{
 8004aaa:	b480      	push	{r7}
 8004aac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004aae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d101      	bne.n	8004ac2 <LL_RCC_LSI2_IsReady+0x18>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <LL_RCC_LSI2_IsReady+0x1a>
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <LL_RCC_LSI2_SetTrimming>:
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ade:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <LL_RCC_MSI_Enable>:
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	6013      	str	r3, [r2, #0]
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <LL_RCC_MSI_Disable>:
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	6013      	str	r3, [r2, #0]
}
 8004b2e:	bf00      	nop
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <LL_RCC_MSI_IsReady>:
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d101      	bne.n	8004b4e <LL_RCC_MSI_IsReady+0x16>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <LL_RCC_MSI_IsReady+0x18>
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <LL_RCC_MSI_SetRange>:
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <LL_RCC_MSI_GetRange>:
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b92:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2bb0      	cmp	r3, #176	@ 0xb0
 8004b98:	d901      	bls.n	8004b9e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004b9a:	23b0      	movs	r3, #176	@ 0xb0
 8004b9c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004b9e:	687b      	ldr	r3, [r7, #4]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <LL_RCC_MSI_SetCalibTrimming>:
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	604b      	str	r3, [r1, #4]
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <LL_RCC_SetSysClkSource>:
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f023 0203 	bic.w	r2, r3, #3
 8004be8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	608b      	str	r3, [r1, #8]
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <LL_RCC_GetSysClkSource>:
{
 8004bfe:	b480      	push	{r7}
 8004c00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 030c 	and.w	r3, r3, #12
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <LL_RCC_SetAHBPrescaler>:
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <LL_C2_RCC_SetAHBPrescaler>:
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004c4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <LL_RCC_SetAHB4Prescaler>:
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c76:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004c7a:	f023 020f 	bic.w	r2, r3, #15
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	091b      	lsrs	r3, r3, #4
 8004c82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <LL_RCC_SetAPB1Prescaler>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004caa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	608b      	str	r3, [r1, #8]
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <LL_RCC_SetAPB2Prescaler>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	608b      	str	r3, [r1, #8]
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <LL_RCC_GetAHBPrescaler>:
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <LL_RCC_GetAHB4Prescaler>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d08:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <LL_RCC_PLL_Enable>:
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <LL_RCC_PLL_Disable>:
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d4c:	6013      	str	r3, [r2, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <LL_RCC_PLL_IsReady>:
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d6a:	d101      	bne.n	8004d70 <LL_RCC_PLL_IsReady+0x18>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <LL_RCC_PLL_IsReady+0x1a>
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <LL_RCC_PLL_GetN>:
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <LL_RCC_PLL_GetR>:
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <LL_RCC_PLL_GetDivider>:
{
 8004dae:	b480      	push	{r7}
 8004db0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <LL_RCC_PLL_GetMainSource>:
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <LL_RCC_IsActiveFlag_HPRE>:
{
 8004dde:	b480      	push	{r7}
 8004de0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df0:	d101      	bne.n	8004df6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004e02:	b480      	push	{r7}
 8004e04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e16:	d101      	bne.n	8004e1c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e30:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e3c:	d101      	bne.n	8004e42 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004e4e:	b480      	push	{r7}
 8004e50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e60:	d101      	bne.n	8004e66 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004e72:	b480      	push	{r7}
 8004e74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e84:	d101      	bne.n	8004e8a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b08d      	sub	sp, #52	@ 0x34
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e324      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 808d 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb8:	f7ff fea1 	bl	8004bfe <LL_RCC_GetSysClkSource>
 8004ebc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ebe:	f7ff ff82 	bl	8004dc6 <LL_RCC_PLL_GetMainSource>
 8004ec2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d005      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x3e>
 8004eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ecc:	2b0c      	cmp	r3, #12
 8004ece:	d147      	bne.n	8004f60 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d144      	bne.n	8004f60 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e308      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004ee6:	f7ff fe4c 	bl	8004b82 <LL_RCC_MSI_GetRange>
 8004eea:	4603      	mov	r3, r0
 8004eec:	429c      	cmp	r4, r3
 8004eee:	d914      	bls.n	8004f1a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fcc5 	bl	8005884 <RCC_SetFlashLatencyFromMSIRange>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e2f7      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff fe26 	bl	8004b5a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff fe4a 	bl	8004bac <LL_RCC_MSI_SetCalibTrimming>
 8004f18:	e013      	b.n	8004f42 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fe1b 	bl	8004b5a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fe3f 	bl	8004bac <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fca6 	bl	8005884 <RCC_SetFlashLatencyFromMSIRange>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e2d8      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f42:	f000 fc8b 	bl	800585c <HAL_RCC_GetHCLKFreq>
 8004f46:	4603      	mov	r3, r0
 8004f48:	4aa4      	ldr	r2, [pc, #656]	@ (80051dc <HAL_RCC_OscConfig+0x344>)
 8004f4a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f4c:	4ba4      	ldr	r3, [pc, #656]	@ (80051e0 <HAL_RCC_OscConfig+0x348>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fd fcdd 	bl	8002910 <HAL_InitTick>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d039      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e2c9      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01e      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f68:	f7ff fdc8 	bl	8004afc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f6c:	f7fd fd1e 	bl	80029ac <HAL_GetTick>
 8004f70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f74:	f7fd fd1a 	bl	80029ac <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e2b6      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004f86:	f7ff fdd7 	bl	8004b38 <LL_RCC_MSI_IsReady>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f1      	beq.n	8004f74 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fde0 	bl	8004b5a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fe04 	bl	8004bac <LL_RCC_MSI_SetCalibTrimming>
 8004fa4:	e015      	b.n	8004fd2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fa6:	f7ff fdb8 	bl	8004b1a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004faa:	f7fd fcff 	bl	80029ac <HAL_GetTick>
 8004fae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fb2:	f7fd fcfb 	bl	80029ac <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e297      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004fc4:	f7ff fdb8 	bl	8004b38 <LL_RCC_MSI_IsReady>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f1      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x11a>
 8004fce:	e000      	b.n	8004fd2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004fd0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d047      	beq.n	800506e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fde:	f7ff fe0e 	bl	8004bfe <LL_RCC_GetSysClkSource>
 8004fe2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fe4:	f7ff feef 	bl	8004dc6 <LL_RCC_PLL_GetMainSource>
 8004fe8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d005      	beq.n	8004ffc <HAL_RCC_OscConfig+0x164>
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	2b0c      	cmp	r3, #12
 8004ff4:	d108      	bne.n	8005008 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d105      	bne.n	8005008 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d134      	bne.n	800506e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e275      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005010:	d102      	bne.n	8005018 <HAL_RCC_OscConfig+0x180>
 8005012:	f7ff fc29 	bl	8004868 <LL_RCC_HSE_Enable>
 8005016:	e001      	b.n	800501c <HAL_RCC_OscConfig+0x184>
 8005018:	f7ff fc35 	bl	8004886 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d012      	beq.n	800504a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005024:	f7fd fcc2 	bl	80029ac <HAL_GetTick>
 8005028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800502c:	f7fd fcbe 	bl	80029ac <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b64      	cmp	r3, #100	@ 0x64
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e25a      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 800503e:	f7ff fc31 	bl	80048a4 <LL_RCC_HSE_IsReady>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f1      	beq.n	800502c <HAL_RCC_OscConfig+0x194>
 8005048:	e011      	b.n	800506e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504a:	f7fd fcaf 	bl	80029ac <HAL_GetTick>
 800504e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005052:	f7fd fcab 	bl	80029ac <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b64      	cmp	r3, #100	@ 0x64
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e247      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005064:	f7ff fc1e 	bl	80048a4 <LL_RCC_HSE_IsReady>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f1      	bne.n	8005052 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d04c      	beq.n	8005114 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800507a:	f7ff fdc0 	bl	8004bfe <LL_RCC_GetSysClkSource>
 800507e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005080:	f7ff fea1 	bl	8004dc6 <LL_RCC_PLL_GetMainSource>
 8005084:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b04      	cmp	r3, #4
 800508a:	d005      	beq.n	8005098 <HAL_RCC_OscConfig+0x200>
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b0c      	cmp	r3, #12
 8005090:	d10e      	bne.n	80050b0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d10b      	bne.n	80050b0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e227      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fc3d 	bl	8004928 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80050ae:	e031      	b.n	8005114 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d019      	beq.n	80050ec <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050b8:	f7ff fc06 	bl	80048c8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fd fc76 	bl	80029ac <HAL_GetTick>
 80050c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c4:	f7fd fc72 	bl	80029ac <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e20e      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80050d6:	f7ff fc15 	bl	8004904 <LL_RCC_HSI_IsReady>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f1      	beq.n	80050c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff fc1f 	bl	8004928 <LL_RCC_HSI_SetCalibTrimming>
 80050ea:	e013      	b.n	8005114 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ec:	f7ff fbfb 	bl	80048e6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fd fc5c 	bl	80029ac <HAL_GetTick>
 80050f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f8:	f7fd fc58 	bl	80029ac <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e1f4      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800510a:	f7ff fbfb 	bl	8004904 <LL_RCC_HSI_IsReady>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f1      	bne.n	80050f8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d106      	bne.n	800512e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80a3 	beq.w	8005274 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d076      	beq.n	8005224 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	2b00      	cmp	r3, #0
 8005140:	d046      	beq.n	80051d0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005142:	f7ff fc7e 	bl	8004a42 <LL_RCC_LSI1_IsReady>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d113      	bne.n	8005174 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800514c:	f7ff fc57 	bl	80049fe <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005150:	f7fd fc2c 	bl	80029ac <HAL_GetTick>
 8005154:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005158:	f7fd fc28 	bl	80029ac <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e1c4      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800516a:	f7ff fc6a 	bl	8004a42 <LL_RCC_LSI1_IsReady>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f1      	beq.n	8005158 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005174:	f7ff fc77 	bl	8004a66 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005178:	f7fd fc18 	bl	80029ac <HAL_GetTick>
 800517c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005180:	f7fd fc14 	bl	80029ac <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b03      	cmp	r3, #3
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e1b0      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005192:	f7ff fc8a 	bl	8004aaa <LL_RCC_LSI2_IsReady>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f1      	beq.n	8005180 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fc94 	bl	8004ace <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80051a6:	f7ff fc3b 	bl	8004a20 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051aa:	f7fd fbff 	bl	80029ac <HAL_GetTick>
 80051ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80051b2:	f7fd fbfb 	bl	80029ac <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e197      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80051c4:	f7ff fc3d 	bl	8004a42 <LL_RCC_LSI1_IsReady>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f1      	bne.n	80051b2 <HAL_RCC_OscConfig+0x31a>
 80051ce:	e051      	b.n	8005274 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80051d0:	f7ff fc15 	bl	80049fe <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fd fbea 	bl	80029ac <HAL_GetTick>
 80051d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80051da:	e00c      	b.n	80051f6 <HAL_RCC_OscConfig+0x35e>
 80051dc:	20000014 	.word	0x20000014
 80051e0:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80051e4:	f7fd fbe2 	bl	80029ac <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e17e      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80051f6:	f7ff fc24 	bl	8004a42 <LL_RCC_LSI1_IsReady>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f1      	beq.n	80051e4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005200:	f7ff fc42 	bl	8004a88 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005206:	f7fd fbd1 	bl	80029ac <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b03      	cmp	r3, #3
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e16d      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005218:	f7ff fc47 	bl	8004aaa <LL_RCC_LSI2_IsReady>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f1      	bne.n	8005206 <HAL_RCC_OscConfig+0x36e>
 8005222:	e027      	b.n	8005274 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005224:	f7ff fc30 	bl	8004a88 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005228:	f7fd fbc0 	bl	80029ac <HAL_GetTick>
 800522c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005230:	f7fd fbbc 	bl	80029ac <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b03      	cmp	r3, #3
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e158      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005242:	f7ff fc32 	bl	8004aaa <LL_RCC_LSI2_IsReady>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f1      	bne.n	8005230 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800524c:	f7ff fbe8 	bl	8004a20 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005250:	f7fd fbac 	bl	80029ac <HAL_GetTick>
 8005254:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005258:	f7fd fba8 	bl	80029ac <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e144      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800526a:	f7ff fbea 	bl	8004a42 <LL_RCC_LSI1_IsReady>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1f1      	bne.n	8005258 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d05b      	beq.n	8005338 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005280:	4b9e      	ldr	r3, [pc, #632]	@ (80054fc <HAL_RCC_OscConfig+0x664>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d114      	bne.n	80052b6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800528c:	f7ff fa7c 	bl	8004788 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005290:	f7fd fb8c 	bl	80029ac <HAL_GetTick>
 8005294:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005298:	f7fd fb88 	bl	80029ac <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e124      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052aa:	4b94      	ldr	r3, [pc, #592]	@ (80054fc <HAL_RCC_OscConfig+0x664>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d102      	bne.n	80052c4 <HAL_RCC_OscConfig+0x42c>
 80052be:	f7ff fb48 	bl	8004952 <LL_RCC_LSE_Enable>
 80052c2:	e00c      	b.n	80052de <HAL_RCC_OscConfig+0x446>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	2b05      	cmp	r3, #5
 80052ca:	d104      	bne.n	80052d6 <HAL_RCC_OscConfig+0x43e>
 80052cc:	f7ff fb63 	bl	8004996 <LL_RCC_LSE_EnableBypass>
 80052d0:	f7ff fb3f 	bl	8004952 <LL_RCC_LSE_Enable>
 80052d4:	e003      	b.n	80052de <HAL_RCC_OscConfig+0x446>
 80052d6:	f7ff fb4d 	bl	8004974 <LL_RCC_LSE_Disable>
 80052da:	f7ff fb6d 	bl	80049b8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d014      	beq.n	8005310 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e6:	f7fd fb61 	bl	80029ac <HAL_GetTick>
 80052ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80052ec:	e00a      	b.n	8005304 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ee:	f7fd fb5d 	bl	80029ac <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e0f7      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005304:	f7ff fb69 	bl	80049da <LL_RCC_LSE_IsReady>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0ef      	beq.n	80052ee <HAL_RCC_OscConfig+0x456>
 800530e:	e013      	b.n	8005338 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005310:	f7fd fb4c 	bl	80029ac <HAL_GetTick>
 8005314:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005316:	e00a      	b.n	800532e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005318:	f7fd fb48 	bl	80029ac <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e0e2      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 800532e:	f7ff fb54 	bl	80049da <LL_RCC_LSE_IsReady>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ef      	bne.n	8005318 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80d8 	beq.w	80054f2 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005342:	f7ff fc5c 	bl	8004bfe <LL_RCC_GetSysClkSource>
 8005346:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005354:	2b02      	cmp	r3, #2
 8005356:	f040 80a6 	bne.w	80054a6 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f003 0203 	and.w	r2, r3, #3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005364:	429a      	cmp	r2, r3
 8005366:	d123      	bne.n	80053b0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005372:	429a      	cmp	r2, r3
 8005374:	d11c      	bne.n	80053b0 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	0a1b      	lsrs	r3, r3, #8
 800537a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005382:	429a      	cmp	r2, r3
 8005384:	d114      	bne.n	80053b0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005390:	429a      	cmp	r2, r3
 8005392:	d10d      	bne.n	80053b0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d106      	bne.n	80053b0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d054      	beq.n	800545a <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d04f      	beq.n	8005456 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053b6:	f7ff fcc0 	bl	8004d3a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053ba:	f7fd faf7 	bl	80029ac <HAL_GetTick>
 80053be:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c2:	f7fd faf3 	bl	80029ac <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e08f      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1ef      	bne.n	80053c2 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	4b45      	ldr	r3, [pc, #276]	@ (8005500 <HAL_RCC_OscConfig+0x668>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053f4:	4311      	orrs	r1, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053fa:	0212      	lsls	r2, r2, #8
 80053fc:	4311      	orrs	r1, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005402:	4311      	orrs	r1, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005408:	4311      	orrs	r1, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800540e:	430a      	orrs	r2, r1
 8005410:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005414:	4313      	orrs	r3, r2
 8005416:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005418:	f7ff fc80 	bl	8004d1c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800542a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800542c:	f7fd fabe 	bl	80029ac <HAL_GetTick>
 8005430:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005434:	f7fd faba 	bl	80029ac <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e056      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0ef      	beq.n	8005434 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005454:	e04d      	b.n	80054f2 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e04c      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d144      	bne.n	80054f2 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005468:	f7ff fc58 	bl	8004d1c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800546c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800547a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800547c:	f7fd fa96 	bl	80029ac <HAL_GetTick>
 8005480:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005484:	f7fd fa92 	bl	80029ac <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e02e      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0ef      	beq.n	8005484 <HAL_RCC_OscConfig+0x5ec>
 80054a4:	e025      	b.n	80054f2 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b0c      	cmp	r3, #12
 80054aa:	d020      	beq.n	80054ee <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ac:	f7ff fc45 	bl	8004d3a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fd fa7c 	bl	80029ac <HAL_GetTick>
 80054b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b8:	f7fd fa78 	bl	80029ac <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e014      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1ef      	bne.n	80054b8 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 80054d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054e6:	f023 0303 	bic.w	r3, r3, #3
 80054ea:	60d3      	str	r3, [r2, #12]
 80054ec:	e001      	b.n	80054f2 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3734      	adds	r7, #52	@ 0x34
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd90      	pop	{r4, r7, pc}
 80054fc:	58000400 	.word	0x58000400
 8005500:	11c1808c 	.word	0x11c1808c

08005504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e12d      	b.n	8005774 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005518:	4b98      	ldr	r3, [pc, #608]	@ (800577c <HAL_RCC_ClockConfig+0x278>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d91b      	bls.n	800555e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b95      	ldr	r3, [pc, #596]	@ (800577c <HAL_RCC_ClockConfig+0x278>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 0207 	bic.w	r2, r3, #7
 800552e:	4993      	ldr	r1, [pc, #588]	@ (800577c <HAL_RCC_ClockConfig+0x278>)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	4313      	orrs	r3, r2
 8005534:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005536:	f7fd fa39 	bl	80029ac <HAL_GetTick>
 800553a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800553c:	e008      	b.n	8005550 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800553e:	f7fd fa35 	bl	80029ac <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e111      	b.n	8005774 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005550:	4b8a      	ldr	r3, [pc, #552]	@ (800577c <HAL_RCC_ClockConfig+0x278>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d1ef      	bne.n	800553e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d016      	beq.n	8005598 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff fb51 	bl	8004c16 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005574:	f7fd fa1a 	bl	80029ac <HAL_GetTick>
 8005578:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800557a:	e008      	b.n	800558e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800557c:	f7fd fa16 	bl	80029ac <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e0f2      	b.n	8005774 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800558e:	f7ff fc26 	bl	8004dde <LL_RCC_IsActiveFlag_HPRE>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0f1      	beq.n	800557c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d016      	beq.n	80055d2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff fb48 	bl	8004c3e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80055ae:	f7fd f9fd 	bl	80029ac <HAL_GetTick>
 80055b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80055b6:	f7fd f9f9 	bl	80029ac <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e0d5      	b.n	8005774 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80055c8:	f7ff fc1b 	bl	8004e02 <LL_RCC_IsActiveFlag_C2HPRE>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f1      	beq.n	80055b6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d016      	beq.n	800560c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fb41 	bl	8004c6a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80055e8:	f7fd f9e0 	bl	80029ac <HAL_GetTick>
 80055ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80055f0:	f7fd f9dc 	bl	80029ac <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e0b8      	b.n	8005774 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005602:	f7ff fc11 	bl	8004e28 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f1      	beq.n	80055f0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d016      	beq.n	8005646 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff fb3b 	bl	8004c98 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005622:	f7fd f9c3 	bl	80029ac <HAL_GetTick>
 8005626:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005628:	e008      	b.n	800563c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800562a:	f7fd f9bf 	bl	80029ac <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e09b      	b.n	8005774 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800563c:	f7ff fc07 	bl	8004e4e <LL_RCC_IsActiveFlag_PPRE1>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0f1      	beq.n	800562a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d017      	beq.n	8005682 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fb31 	bl	8004cc0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800565e:	f7fd f9a5 	bl	80029ac <HAL_GetTick>
 8005662:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005664:	e008      	b.n	8005678 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005666:	f7fd f9a1 	bl	80029ac <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e07d      	b.n	8005774 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005678:	f7ff fbfb 	bl	8004e72 <LL_RCC_IsActiveFlag_PPRE2>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f1      	beq.n	8005666 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d043      	beq.n	8005716 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d106      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005696:	f7ff f905 	bl	80048a4 <LL_RCC_HSE_IsReady>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d11e      	bne.n	80056de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e067      	b.n	8005774 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d106      	bne.n	80056ba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80056ac:	f7ff fb54 	bl	8004d58 <LL_RCC_PLL_IsReady>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d113      	bne.n	80056de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e05c      	b.n	8005774 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80056c2:	f7ff fa39 	bl	8004b38 <LL_RCC_MSI_IsReady>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d108      	bne.n	80056de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e051      	b.n	8005774 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80056d0:	f7ff f918 	bl	8004904 <LL_RCC_HSI_IsReady>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e04a      	b.n	8005774 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fa77 	bl	8004bd6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e8:	f7fd f960 	bl	80029ac <HAL_GetTick>
 80056ec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ee:	e00a      	b.n	8005706 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f0:	f7fd f95c 	bl	80029ac <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e036      	b.n	8005774 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005706:	f7ff fa7a 	bl	8004bfe <LL_RCC_GetSysClkSource>
 800570a:	4602      	mov	r2, r0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	429a      	cmp	r2, r3
 8005714:	d1ec      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005716:	4b19      	ldr	r3, [pc, #100]	@ (800577c <HAL_RCC_ClockConfig+0x278>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d21b      	bcs.n	800575c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005724:	4b15      	ldr	r3, [pc, #84]	@ (800577c <HAL_RCC_ClockConfig+0x278>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f023 0207 	bic.w	r2, r3, #7
 800572c:	4913      	ldr	r1, [pc, #76]	@ (800577c <HAL_RCC_ClockConfig+0x278>)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	4313      	orrs	r3, r2
 8005732:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005734:	f7fd f93a 	bl	80029ac <HAL_GetTick>
 8005738:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800573a:	e008      	b.n	800574e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800573c:	f7fd f936 	bl	80029ac <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e012      	b.n	8005774 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800574e:	4b0b      	ldr	r3, [pc, #44]	@ (800577c <HAL_RCC_ClockConfig+0x278>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d1ef      	bne.n	800573c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800575c:	f000 f87e 	bl	800585c <HAL_RCC_GetHCLKFreq>
 8005760:	4603      	mov	r3, r0
 8005762:	4a07      	ldr	r2, [pc, #28]	@ (8005780 <HAL_RCC_ClockConfig+0x27c>)
 8005764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005766:	f7fd f92d 	bl	80029c4 <HAL_GetTickPrio>
 800576a:	4603      	mov	r3, r0
 800576c:	4618      	mov	r0, r3
 800576e:	f7fd f8cf 	bl	8002910 <HAL_InitTick>
 8005772:	4603      	mov	r3, r0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	58004000 	.word	0x58004000
 8005780:	20000014 	.word	0x20000014

08005784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005784:	b590      	push	{r4, r7, lr}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800578a:	f7ff fa38 	bl	8004bfe <LL_RCC_GetSysClkSource>
 800578e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005796:	f7ff f9f4 	bl	8004b82 <LL_RCC_MSI_GetRange>
 800579a:	4603      	mov	r3, r0
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005850 <HAL_RCC_GetSysClockFreq+0xcc>)
 80057a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	e04b      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d102      	bne.n	80057b8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057b2:	4b28      	ldr	r3, [pc, #160]	@ (8005854 <HAL_RCC_GetSysClockFreq+0xd0>)
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e045      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d10a      	bne.n	80057d4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80057be:	f7ff f841 	bl	8004844 <LL_RCC_HSE_IsEnabledDiv2>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d102      	bne.n	80057ce <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80057c8:	4b22      	ldr	r3, [pc, #136]	@ (8005854 <HAL_RCC_GetSysClockFreq+0xd0>)
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	e03a      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80057ce:	4b22      	ldr	r3, [pc, #136]	@ (8005858 <HAL_RCC_GetSysClockFreq+0xd4>)
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e037      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80057d4:	f7ff faf7 	bl	8004dc6 <LL_RCC_PLL_GetMainSource>
 80057d8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d003      	beq.n	80057e8 <HAL_RCC_GetSysClockFreq+0x64>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d003      	beq.n	80057ee <HAL_RCC_GetSysClockFreq+0x6a>
 80057e6:	e00d      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80057e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005854 <HAL_RCC_GetSysClockFreq+0xd0>)
 80057ea:	60bb      	str	r3, [r7, #8]
        break;
 80057ec:	e015      	b.n	800581a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80057ee:	f7ff f829 	bl	8004844 <LL_RCC_HSE_IsEnabledDiv2>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d102      	bne.n	80057fe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80057f8:	4b16      	ldr	r3, [pc, #88]	@ (8005854 <HAL_RCC_GetSysClockFreq+0xd0>)
 80057fa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80057fc:	e00d      	b.n	800581a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80057fe:	4b16      	ldr	r3, [pc, #88]	@ (8005858 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005800:	60bb      	str	r3, [r7, #8]
        break;
 8005802:	e00a      	b.n	800581a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005804:	f7ff f9bd 	bl	8004b82 <LL_RCC_MSI_GetRange>
 8005808:	4603      	mov	r3, r0
 800580a:	091b      	lsrs	r3, r3, #4
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	4a0f      	ldr	r2, [pc, #60]	@ (8005850 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005816:	60bb      	str	r3, [r7, #8]
        break;
 8005818:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800581a:	f7ff faaf 	bl	8004d7c <LL_RCC_PLL_GetN>
 800581e:	4602      	mov	r2, r0
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	fb03 f402 	mul.w	r4, r3, r2
 8005826:	f7ff fac2 	bl	8004dae <LL_RCC_PLL_GetDivider>
 800582a:	4603      	mov	r3, r0
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	3301      	adds	r3, #1
 8005830:	fbb4 f4f3 	udiv	r4, r4, r3
 8005834:	f7ff faaf 	bl	8004d96 <LL_RCC_PLL_GetR>
 8005838:	4603      	mov	r3, r0
 800583a:	0f5b      	lsrs	r3, r3, #29
 800583c:	3301      	adds	r3, #1
 800583e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005842:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005844:	68fb      	ldr	r3, [r7, #12]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	bd90      	pop	{r4, r7, pc}
 800584e:	bf00      	nop
 8005850:	0800a66c 	.word	0x0800a66c
 8005854:	00f42400 	.word	0x00f42400
 8005858:	01e84800 	.word	0x01e84800

0800585c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800585c:	b598      	push	{r3, r4, r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005860:	f7ff ff90 	bl	8005784 <HAL_RCC_GetSysClockFreq>
 8005864:	4604      	mov	r4, r0
 8005866:	f7ff fa3f 	bl	8004ce8 <LL_RCC_GetAHBPrescaler>
 800586a:	4603      	mov	r3, r0
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	4a03      	ldr	r2, [pc, #12]	@ (8005880 <HAL_RCC_GetHCLKFreq+0x24>)
 8005874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005878:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800587c:	4618      	mov	r0, r3
 800587e:	bd98      	pop	{r3, r4, r7, pc}
 8005880:	0800a62c 	.word	0x0800a62c

08005884 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2bb0      	cmp	r3, #176	@ 0xb0
 8005890:	d903      	bls.n	800589a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005892:	4b14      	ldr	r3, [pc, #80]	@ (80058e4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	e007      	b.n	80058aa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	4a10      	ldr	r2, [pc, #64]	@ (80058e4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80058a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80058aa:	f7ff fa29 	bl	8004d00 <LL_RCC_GetAHB4Prescaler>
 80058ae:	4603      	mov	r3, r0
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	4a0c      	ldr	r2, [pc, #48]	@ (80058e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80058b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4a09      	ldr	r2, [pc, #36]	@ (80058ec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80058c8:	fba2 2303 	umull	r2, r3, r2, r3
 80058cc:	0c9b      	lsrs	r3, r3, #18
 80058ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f80c 	bl	80058f0 <RCC_SetFlashLatency>
 80058d8:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	0800a66c 	.word	0x0800a66c
 80058e8:	0800a62c 	.word	0x0800a62c
 80058ec:	431bde83 	.word	0x431bde83

080058f0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80058f0:	b590      	push	{r4, r7, lr}
 80058f2:	b08f      	sub	sp, #60	@ 0x3c
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80058fa:	4b24      	ldr	r3, [pc, #144]	@ (800598c <RCC_SetFlashLatency+0x9c>)
 80058fc:	f107 041c 	add.w	r4, r7, #28
 8005900:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005902:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005906:	4b22      	ldr	r3, [pc, #136]	@ (8005990 <RCC_SetFlashLatency+0xa0>)
 8005908:	f107 040c 	add.w	r4, r7, #12
 800590c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800590e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005912:	2300      	movs	r3, #0
 8005914:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005916:	2300      	movs	r3, #0
 8005918:	633b      	str	r3, [r7, #48]	@ 0x30
 800591a:	e013      	b.n	8005944 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800591c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	3338      	adds	r3, #56	@ 0x38
 8005922:	443b      	add	r3, r7
 8005924:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	429a      	cmp	r2, r3
 800592c:	d807      	bhi.n	800593e <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	3338      	adds	r3, #56	@ 0x38
 8005934:	443b      	add	r3, r7
 8005936:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800593a:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800593c:	e005      	b.n	800594a <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	3301      	adds	r3, #1
 8005942:	633b      	str	r3, [r7, #48]	@ 0x30
 8005944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005946:	2b03      	cmp	r3, #3
 8005948:	d9e8      	bls.n	800591c <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800594a:	4b12      	ldr	r3, [pc, #72]	@ (8005994 <RCC_SetFlashLatency+0xa4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f023 0207 	bic.w	r2, r3, #7
 8005952:	4910      	ldr	r1, [pc, #64]	@ (8005994 <RCC_SetFlashLatency+0xa4>)
 8005954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005956:	4313      	orrs	r3, r2
 8005958:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800595a:	f7fd f827 	bl	80029ac <HAL_GetTick>
 800595e:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005960:	e008      	b.n	8005974 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005962:	f7fd f823 	bl	80029ac <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e007      	b.n	8005984 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005974:	4b07      	ldr	r3, [pc, #28]	@ (8005994 <RCC_SetFlashLatency+0xa4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800597e:	429a      	cmp	r2, r3
 8005980:	d1ef      	bne.n	8005962 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	373c      	adds	r7, #60	@ 0x3c
 8005988:	46bd      	mov	sp, r7
 800598a:	bd90      	pop	{r4, r7, pc}
 800598c:	0800a47c 	.word	0x0800a47c
 8005990:	0800a48c 	.word	0x0800a48c
 8005994:	58004000 	.word	0x58004000

08005998 <LL_RCC_LSE_IsEnabled>:
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800599c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <LL_RCC_LSE_IsEnabled+0x18>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <LL_RCC_LSE_IsEnabled+0x1a>
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <LL_RCC_LSE_IsReady>:
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80059c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d101      	bne.n	80059d4 <LL_RCC_LSE_IsReady+0x18>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <LL_RCC_LSE_IsReady+0x1a>
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <LL_RCC_SetRFWKPClockSource>:
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80059e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <LL_RCC_SetSMPSClockSource>:
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1a:	f023 0203 	bic.w	r2, r3, #3
 8005a1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <LL_RCC_SetSMPSPrescaler>:
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a42:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <LL_RCC_SetUSARTClockSource>:
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6c:	f023 0203 	bic.w	r2, r3, #3
 8005a70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <LL_RCC_SetLPUARTClockSource>:
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a98:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <LL_RCC_SetI2CClockSource>:
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	091b      	lsrs	r3, r3, #4
 8005ac8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005acc:	43db      	mvns	r3, r3
 8005ace:	401a      	ands	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005ad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <LL_RCC_SetLPTIMClockSource>:
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005afa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	0c1b      	lsrs	r3, r3, #16
 8005b02:	041b      	lsls	r3, r3, #16
 8005b04:	43db      	mvns	r3, r3
 8005b06:	401a      	ands	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <LL_RCC_SetRNGClockSource>:
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b32:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005b36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <LL_RCC_SetCLK48ClockSource>:
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <LL_RCC_SetADCClockSource>:
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <LL_RCC_SetRTCClockSource>:
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <LL_RCC_GetRTCClockSource>:
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <LL_RCC_ForceBackupDomainReset>:
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005c04:	bf00      	nop
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <LL_RCC_ReleaseBackupDomainReset>:
{
 8005c0e:	b480      	push	{r7}
 8005c10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005c26:	bf00      	nop
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005c38:	2300      	movs	r3, #0
 8005c3a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d046      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005c4c:	f7ff ffc1 	bl	8005bd2 <LL_RCC_GetRTCClockSource>
 8005c50:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d03c      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005c5c:	f7fe fd94 	bl	8004788 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d105      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff ff9b 	bl	8005ba6 <LL_RCC_SetRTCClockSource>
 8005c70:	e02e      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005c7c:	f7ff ffb6 	bl	8005bec <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005c80:	f7ff ffc5 	bl	8005c0e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005c92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005c9c:	f7ff fe7c 	bl	8005998 <LL_RCC_LSE_IsEnabled>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d114      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ca6:	f7fc fe81 	bl	80029ac <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005cac:	e00b      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cae:	f7fc fe7d 	bl	80029ac <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d902      	bls.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	77fb      	strb	r3, [r7, #31]
              break;
 8005cc4:	e004      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005cc6:	f7ff fe79 	bl	80059bc <LL_RCC_LSE_IsReady>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d1ee      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005cd0:	7ffb      	ldrb	r3, [r7, #31]
 8005cd2:	77bb      	strb	r3, [r7, #30]
 8005cd4:	e001      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd6:	7ffb      	ldrb	r3, [r7, #31]
 8005cd8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff feb6 	bl	8005a5c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d004      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff fec1 	bl	8005a88 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d004      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff fee9 	bl	8005aee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d004      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fede 	bl	8005aee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0304 	and.w	r3, r3, #4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff feb6 	bl	8005ab4 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d02b      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d5c:	d008      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d66:	d003      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d105      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fed4 	bl	8005b22 <LL_RCC_SetRNGClockSource>
 8005d7a:	e00a      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	2000      	movs	r0, #0
 8005d88:	f7ff fecb 	bl	8005b22 <LL_RCC_SetRNGClockSource>
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7ff fede 	bl	8005b4e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005d9a:	d107      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005daa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d011      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff fedc 	bl	8005b7a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dca:	d107      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dda:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff fdf7 	bl	80059e0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fe16 	bl	8005a34 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fdfd 	bl	8005a0c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005e12:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3720      	adds	r7, #32
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e027      	b.n	8005e7e <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	7a5b      	ldrb	r3, [r3, #9]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d105      	bne.n	8005e44 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fc fba4 	bl	800258c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f023 0120 	bic.w	r1, r3, #32
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0204 	orr.w	r2, r2, #4
 8005e6e:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f003 0320 	and.w	r3, r3, #32
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2210      	movs	r2, #16
 8005ea8:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	e009      	b.n	8005ec4 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d004      	beq.n	8005ec4 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d10b      	bne.n	8005ee2 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2204      	movs	r2, #4
 8005ece:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f837 	bl	8005f44 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8005ede:	605a      	str	r2, [r3, #4]

    return;
 8005ee0:	e022      	b.n	8005f28 <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01d      	beq.n	8005f28 <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0208 	bic.w	r2, r2, #8
 8005efa:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7a5b      	ldrb	r3, [r3, #9]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d00b      	beq.n	8005f28 <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f803 	bl	8005f2e <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e09f      	b.n	80060aa <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fc fb36 	bl	80025f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005f8c:	4b49      	ldr	r3, [pc, #292]	@ (80060b4 <HAL_RTC_Init+0x15c>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d07e      	beq.n	8006096 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	22ca      	movs	r2, #202	@ 0xca
 8005f9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2253      	movs	r2, #83	@ 0x53
 8005fa6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f8ab 	bl	8006104 <RTC_EnterInitMode>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	22ff      	movs	r2, #255	@ 0xff
 8005fba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2204      	movs	r2, #4
 8005fc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	e067      	b.n	800609a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fdc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6899      	ldr	r1, [r3, #8]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	68d2      	ldr	r2, [r2, #12]
 8006004:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6919      	ldr	r1, [r3, #16]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	041a      	lsls	r2, r3, #16
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68da      	ldr	r2, [r3, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006028:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0202 	bic.w	r2, r2, #2
 8006038:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	69da      	ldr	r2, [r3, #28]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 0320 	and.w	r3, r3, #32
 800605c:	2b00      	cmp	r3, #0
 800605e:	d113      	bne.n	8006088 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f829 	bl	80060b8 <HAL_RTC_WaitForSynchro>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00d      	beq.n	8006088 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	22ff      	movs	r2, #255	@ 0xff
 8006072:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2204      	movs	r2, #4
 8006078:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e010      	b.n	80060aa <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	22ff      	movs	r2, #255	@ 0xff
 800608e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	73fb      	strb	r3, [r7, #15]
 8006094:	e001      	b.n	800609a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d103      	bne.n	80060a8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40002800 	.word	0x40002800

080060b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060ce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80060d0:	f7fc fc6c 	bl	80029ac <HAL_GetTick>
 80060d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060d6:	e009      	b.n	80060ec <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060d8:	f7fc fc68 	bl	80029ac <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060e6:	d901      	bls.n	80060ec <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e007      	b.n	80060fc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0ee      	beq.n	80060d8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d119      	bne.n	800614e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f04f 32ff 	mov.w	r2, #4294967295
 8006122:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006124:	f7fc fc42 	bl	80029ac <HAL_GetTick>
 8006128:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800612a:	e009      	b.n	8006140 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800612c:	f7fc fc3e 	bl	80029ac <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800613a:	d901      	bls.n	8006140 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e007      	b.n	8006150 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0ee      	beq.n	800612c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800616e:	2302      	movs	r3, #2
 8006170:	e0a8      	b.n	80062c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2202      	movs	r2, #2
 800617e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	22ca      	movs	r2, #202	@ 0xca
 8006188:	625a      	str	r2, [r3, #36]	@ 0x24
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2253      	movs	r2, #83	@ 0x53
 8006190:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800619c:	2b00      	cmp	r3, #0
 800619e:	d020      	beq.n	80061e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80061a0:	f7fc fc04 	bl	80029ac <HAL_GetTick>
 80061a4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80061a6:	e015      	b.n	80061d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061a8:	f7fc fc00 	bl	80029ac <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061b6:	d90d      	bls.n	80061d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	22ff      	movs	r2, #255	@ 0xff
 80061be:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2203      	movs	r2, #3
 80061c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e077      	b.n	80062c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e2      	bne.n	80061a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061f0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8006202:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006204:	f7fc fbd2 	bl	80029ac <HAL_GetTick>
 8006208:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800620a:	e015      	b.n	8006238 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800620c:	f7fc fbce 	bl	80029ac <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800621a:	d90d      	bls.n	8006238 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	22ff      	movs	r2, #255	@ 0xff
 8006222:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2203      	movs	r2, #3
 8006228:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e045      	b.n	80062c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0e2      	beq.n	800620c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0207 	bic.w	r2, r2, #7
 800625c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6899      	ldr	r1, [r3, #8]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	430a      	orrs	r2, r1
 800626c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800626e:	4b17      	ldr	r3, [pc, #92]	@ (80062cc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006270:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006274:	4a15      	ldr	r2, [pc, #84]	@ (80062cc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006276:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800627a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800627e:	4b13      	ldr	r3, [pc, #76]	@ (80062cc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a12      	ldr	r2, [pc, #72]	@ (80062cc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006284:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006288:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006298:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062a8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	22ff      	movs	r2, #255	@ 0xff
 80062b0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	58000800 	.word	0x58000800

080062d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b0ba      	sub	sp, #232	@ 0xe8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80062fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80062fe:	4013      	ands	r3, r2
 8006300:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006304:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006308:	2b00      	cmp	r3, #0
 800630a:	d11b      	bne.n	8006344 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800630c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b00      	cmp	r3, #0
 8006316:	d015      	beq.n	8006344 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b00      	cmp	r3, #0
 8006322:	d105      	bne.n	8006330 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d009      	beq.n	8006344 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 8300 	beq.w	800693a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
      }
      return;
 8006342:	e2fa      	b.n	800693a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8123 	beq.w	8006594 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800634e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006352:	4b8d      	ldr	r3, [pc, #564]	@ (8006588 <HAL_UART_IRQHandler+0x2b8>)
 8006354:	4013      	ands	r3, r2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d106      	bne.n	8006368 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800635a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800635e:	4b8b      	ldr	r3, [pc, #556]	@ (800658c <HAL_UART_IRQHandler+0x2bc>)
 8006360:	4013      	ands	r3, r2
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 8116 	beq.w	8006594 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d011      	beq.n	8006398 <HAL_UART_IRQHandler+0xc8>
 8006374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00b      	beq.n	8006398 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2201      	movs	r2, #1
 8006386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638e:	f043 0201 	orr.w	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d011      	beq.n	80063c8 <HAL_UART_IRQHandler+0xf8>
 80063a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00b      	beq.n	80063c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2202      	movs	r2, #2
 80063b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063be:	f043 0204 	orr.w	r2, r3, #4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d011      	beq.n	80063f8 <HAL_UART_IRQHandler+0x128>
 80063d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2204      	movs	r2, #4
 80063e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ee:	f043 0202 	orr.w	r2, r3, #2
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b00      	cmp	r3, #0
 8006402:	d017      	beq.n	8006434 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b00      	cmp	r3, #0
 800640e:	d105      	bne.n	800641c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006410:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006414:	4b5c      	ldr	r3, [pc, #368]	@ (8006588 <HAL_UART_IRQHandler+0x2b8>)
 8006416:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2208      	movs	r2, #8
 8006422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642a:	f043 0208 	orr.w	r2, r3, #8
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006438:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800643c:	2b00      	cmp	r3, #0
 800643e:	d012      	beq.n	8006466 <HAL_UART_IRQHandler+0x196>
 8006440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006444:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00c      	beq.n	8006466 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800645c:	f043 0220 	orr.w	r2, r3, #32
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8266 	beq.w	800693e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	d013      	beq.n	80064a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800647e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d105      	bne.n	8006496 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800648a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800648e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d007      	beq.n	80064a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ba:	2b40      	cmp	r3, #64	@ 0x40
 80064bc:	d005      	beq.n	80064ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d054      	beq.n	8006574 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fa58 	bl	8006980 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064da:	2b40      	cmp	r3, #64	@ 0x40
 80064dc:	d146      	bne.n	800656c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3308      	adds	r3, #8
 80064e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3308      	adds	r3, #8
 8006506:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800650a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800650e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1d9      	bne.n	80064de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006530:	2b00      	cmp	r3, #0
 8006532:	d017      	beq.n	8006564 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800653a:	4a15      	ldr	r2, [pc, #84]	@ (8006590 <HAL_UART_IRQHandler+0x2c0>)
 800653c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006544:	4618      	mov	r0, r3
 8006546:	f7fd fd57 	bl	8003ff8 <HAL_DMA_Abort_IT>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d019      	beq.n	8006584 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800655e:	4610      	mov	r0, r2
 8006560:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006562:	e00f      	b.n	8006584 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f9f5 	bl	8006954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656a:	e00b      	b.n	8006584 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f9f1 	bl	8006954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006572:	e007      	b.n	8006584 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f9ed 	bl	8006954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006582:	e1dc      	b.n	800693e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006584:	bf00      	nop
    return;
 8006586:	e1da      	b.n	800693e <HAL_UART_IRQHandler+0x66e>
 8006588:	10000001 	.word	0x10000001
 800658c:	04000120 	.word	0x04000120
 8006590:	08006a4d 	.word	0x08006a4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006598:	2b01      	cmp	r3, #1
 800659a:	f040 8170 	bne.w	800687e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800659e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8169 	beq.w	800687e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065b0:	f003 0310 	and.w	r3, r3, #16
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8162 	beq.w	800687e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2210      	movs	r2, #16
 80065c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065cc:	2b40      	cmp	r3, #64	@ 0x40
 80065ce:	f040 80d8 	bne.w	8006782 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 80af 	beq.w	8006748 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065f4:	429a      	cmp	r2, r3
 80065f6:	f080 80a7 	bcs.w	8006748 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006600:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	f040 8087 	bne.w	8006726 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800662c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006642:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006646:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800664e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800665a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1da      	bne.n	8006618 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006672:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006674:	f023 0301 	bic.w	r3, r3, #1
 8006678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3308      	adds	r3, #8
 8006682:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006686:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800668a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800668e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e1      	bne.n	8006662 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3308      	adds	r3, #8
 80066a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3308      	adds	r3, #8
 80066be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e3      	bne.n	800669e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066f4:	f023 0310 	bic.w	r3, r3, #16
 80066f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006706:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006708:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800670c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e4      	bne.n	80066e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006720:	4618      	mov	r0, r3
 8006722:	f7fd fc0a 	bl	8003f3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2202      	movs	r2, #2
 800672a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006738:	b29b      	uxth	r3, r3
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	b29b      	uxth	r3, r3
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f911 	bl	8006968 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006746:	e0fc      	b.n	8006942 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800674e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006752:	429a      	cmp	r2, r3
 8006754:	f040 80f5 	bne.w	8006942 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b20      	cmp	r3, #32
 8006768:	f040 80eb 	bne.w	8006942 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f8f4 	bl	8006968 <HAL_UARTEx_RxEventCallback>
      return;
 8006780:	e0df      	b.n	8006942 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800678e:	b29b      	uxth	r3, r3
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 80d1 	beq.w	8006946 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80067a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 80cc 	beq.w	8006946 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e4      	bne.n	80067ae <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3308      	adds	r3, #8
 80067ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	623b      	str	r3, [r7, #32]
   return(result);
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067fa:	f023 0301 	bic.w	r3, r3, #1
 80067fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3308      	adds	r3, #8
 8006808:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800680c:	633a      	str	r2, [r7, #48]	@ 0x30
 800680e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e1      	bne.n	80067e4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	60fb      	str	r3, [r7, #12]
   return(result);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f023 0310 	bic.w	r3, r3, #16
 8006848:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	461a      	mov	r2, r3
 8006852:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685a:	69b9      	ldr	r1, [r7, #24]
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	e841 2300 	strex	r3, r2, [r1]
 8006862:	617b      	str	r3, [r7, #20]
   return(result);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1e4      	bne.n	8006834 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006870:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f876 	bl	8006968 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800687c:	e063      	b.n	8006946 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800687e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006882:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00e      	beq.n	80068a8 <HAL_UART_IRQHandler+0x5d8>
 800688a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800688e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d008      	beq.n	80068a8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800689e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f914 	bl	8006ace <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068a6:	e051      	b.n	800694c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80068a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d014      	beq.n	80068de <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80068b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d105      	bne.n	80068cc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d008      	beq.n	80068de <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d03a      	beq.n	800694a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	4798      	blx	r3
    }
    return;
 80068dc:	e035      	b.n	800694a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <HAL_UART_IRQHandler+0x62e>
 80068ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f8be 	bl	8006a78 <UART_EndTransmit_IT>
    return;
 80068fc:	e026      	b.n	800694c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80068fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <HAL_UART_IRQHandler+0x64e>
 800690a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800690e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f8ed 	bl	8006af6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800691c:	e016      	b.n	800694c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800691e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006922:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d010      	beq.n	800694c <HAL_UART_IRQHandler+0x67c>
 800692a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800692e:	2b00      	cmp	r3, #0
 8006930:	da0c      	bge.n	800694c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f8d5 	bl	8006ae2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006938:	e008      	b.n	800694c <HAL_UART_IRQHandler+0x67c>
      return;
 800693a:	bf00      	nop
 800693c:	e006      	b.n	800694c <HAL_UART_IRQHandler+0x67c>
    return;
 800693e:	bf00      	nop
 8006940:	e004      	b.n	800694c <HAL_UART_IRQHandler+0x67c>
      return;
 8006942:	bf00      	nop
 8006944:	e002      	b.n	800694c <HAL_UART_IRQHandler+0x67c>
      return;
 8006946:	bf00      	nop
 8006948:	e000      	b.n	800694c <HAL_UART_IRQHandler+0x67c>
    return;
 800694a:	bf00      	nop
  }
}
 800694c:	37e8      	adds	r7, #232	@ 0xe8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop

08006954 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b095      	sub	sp, #84	@ 0x54
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006998:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800699c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80069a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e6      	bne.n	8006988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3308      	adds	r3, #8
 80069c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069d0:	f023 0301 	bic.w	r3, r3, #1
 80069d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3308      	adds	r3, #8
 80069dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e3      	bne.n	80069ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d118      	bne.n	8006a2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f023 0310 	bic.w	r3, r3, #16
 8006a0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a18:	61bb      	str	r3, [r7, #24]
 8006a1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	6979      	ldr	r1, [r7, #20]
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	613b      	str	r3, [r7, #16]
   return(result);
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e6      	bne.n	80069fa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a40:	bf00      	nop
 8006a42:	3754      	adds	r7, #84	@ 0x54
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f7ff ff72 	bl	8006954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	61bb      	str	r3, [r7, #24]
 8006aa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6979      	ldr	r1, [r7, #20]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e6      	bne.n	8006a80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7fa fe99 	bl	80017f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ac6:	bf00      	nop
 8006ac8:	3720      	adds	r7, #32
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b088      	sub	sp, #32
 8006b0e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b14:	f107 0308 	add.w	r3, r7, #8
 8006b18:	2218      	movs	r2, #24
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 f92d 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b22:	233f      	movs	r3, #63	@ 0x3f
 8006b24:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006b26:	2381      	movs	r3, #129	@ 0x81
 8006b28:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006b2a:	1dfb      	adds	r3, r7, #7
 8006b2c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b32:	f107 0308 	add.w	r3, r7, #8
 8006b36:	2100      	movs	r1, #0
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f001 fba9 	bl	8008290 <hci_send_req>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	da01      	bge.n	8006b48 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006b44:	23ff      	movs	r3, #255	@ 0xff
 8006b46:	e000      	b.n	8006b4a <aci_gap_set_non_discoverable+0x40>
  return status;
 8006b48:	79fb      	ldrb	r3, [r7, #7]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3720      	adds	r7, #32
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8006b52:	b5b0      	push	{r4, r5, r7, lr}
 8006b54:	b0ce      	sub	sp, #312	@ 0x138
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	4605      	mov	r5, r0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	4619      	mov	r1, r3
 8006b60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b64:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006b68:	462a      	mov	r2, r5
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b70:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006b74:	4622      	mov	r2, r4
 8006b76:	801a      	strh	r2, [r3, #0]
 8006b78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b7c:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8006b80:	4602      	mov	r2, r0
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b88:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006b8c:	460a      	mov	r2, r1
 8006b8e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006b90:	f107 0310 	add.w	r3, r7, #16
 8006b94:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006b98:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	f107 0210 	add.w	r2, r7, #16
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006ba8:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006bac:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006bb0:	4413      	add	r3, r2
 8006bb2:	3309      	adds	r3, #9
 8006bb4:	f107 0210 	add.w	r2, r7, #16
 8006bb8:	4413      	add	r3, r2
 8006bba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006bbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bc2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006bd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006bd4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006bd8:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8006bdc:	7812      	ldrb	r2, [r2, #0]
 8006bde:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006be0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006be4:	3301      	adds	r3, #1
 8006be6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006bea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006bee:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006bf2:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8006bf6:	8812      	ldrh	r2, [r2, #0]
 8006bf8:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006bfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c00:	3302      	adds	r3, #2
 8006c02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006c06:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c0a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006c0e:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8006c12:	8812      	ldrh	r2, [r2, #0]
 8006c14:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006c18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c1c:	3302      	adds	r3, #2
 8006c1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006c22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c26:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006c2a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006c2e:	7812      	ldrb	r2, [r2, #0]
 8006c30:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006c32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c36:	3301      	adds	r3, #1
 8006c38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006c3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c40:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006c44:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006c50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c54:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006c58:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006c5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c5e:	3301      	adds	r3, #1
 8006c60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006c64:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c68:	3308      	adds	r3, #8
 8006c6a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006c6e:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 f872 	bl	8007d5c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006c78:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006c7c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006c80:	4413      	add	r3, r2
 8006c82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006c86:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006c8a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006c8e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006c90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c94:	3301      	adds	r3, #1
 8006c96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006c9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006ca4:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 f857 	bl	8007d5c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006cae:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006cb2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8006cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cc0:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8006cc4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006cc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cca:	3302      	adds	r3, #2
 8006ccc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8006cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cd4:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8006cd8:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006cda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cde:	3302      	adds	r3, #2
 8006ce0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ce4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006ce8:	2218      	movs	r2, #24
 8006cea:	2100      	movs	r1, #0
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 f845 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006cf2:	233f      	movs	r3, #63	@ 0x3f
 8006cf4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8006cf8:	2383      	movs	r3, #131	@ 0x83
 8006cfa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006cfe:	f107 0310 	add.w	r3, r7, #16
 8006d02:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006d06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006d0e:	f107 030f 	add.w	r3, r7, #15
 8006d12:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d20:	2100      	movs	r1, #0
 8006d22:	4618      	mov	r0, r3
 8006d24:	f001 fab4 	bl	8008290 <hci_send_req>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	da01      	bge.n	8006d32 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006d2e:	23ff      	movs	r3, #255	@ 0xff
 8006d30:	e004      	b.n	8006d3c <aci_gap_set_discoverable+0x1ea>
  return status;
 8006d32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d36:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006d3a:	781b      	ldrb	r3, [r3, #0]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bdb0      	pop	{r4, r5, r7, pc}

08006d46 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b0cc      	sub	sp, #304	@ 0x130
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d52:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006d56:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006d58:	f107 0310 	add.w	r3, r7, #16
 8006d5c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006d60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d64:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006d68:	2200      	movs	r2, #0
 8006d6a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8006d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d76:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006d7a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006d7e:	7812      	ldrb	r2, [r2, #0]
 8006d80:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006d82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d86:	3301      	adds	r3, #1
 8006d88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d90:	2218      	movs	r2, #24
 8006d92:	2100      	movs	r1, #0
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fff1 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d9a:	233f      	movs	r3, #63	@ 0x3f
 8006d9c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8006da0:	2385      	movs	r3, #133	@ 0x85
 8006da2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006da6:	f107 0310 	add.w	r3, r7, #16
 8006daa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006dae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006db2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006db6:	f107 030f 	add.w	r3, r7, #15
 8006dba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006dc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006dc8:	2100      	movs	r1, #0
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f001 fa60 	bl	8008290 <hci_send_req>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	da01      	bge.n	8006dda <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006dd6:	23ff      	movs	r3, #255	@ 0xff
 8006dd8:	e004      	b.n	8006de4 <aci_gap_set_io_capability+0x9e>
  return status;
 8006dda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006dde:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006de2:	781b      	ldrb	r3, [r3, #0]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006dee:	b5b0      	push	{r4, r5, r7, lr}
 8006df0:	b0cc      	sub	sp, #304	@ 0x130
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	4605      	mov	r5, r0
 8006df6:	460c      	mov	r4, r1
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e00:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006e04:	462a      	mov	r2, r5
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e0c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006e10:	4622      	mov	r2, r4
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e18:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e28:	460a      	mov	r2, r1
 8006e2a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006e2c:	f107 0310 	add.w	r3, r7, #16
 8006e30:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006e34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e38:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e40:	2300      	movs	r3, #0
 8006e42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e4a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e4e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006e52:	7812      	ldrb	r2, [r2, #0]
 8006e54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006e56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e64:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e68:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006e6c:	7812      	ldrb	r2, [r2, #0]
 8006e6e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006e70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e74:	3301      	adds	r3, #1
 8006e76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8006e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e7e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e82:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006e86:	7812      	ldrb	r2, [r2, #0]
 8006e88:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e8e:	3301      	adds	r3, #1
 8006e90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e98:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e9c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006ea0:	7812      	ldrb	r2, [r2, #0]
 8006ea2:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006ea4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006eb2:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8006eb6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006eb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ec6:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8006eca:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006eda:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006ede:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006ee0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006eee:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8006ef2:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006ef6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006efa:	3304      	adds	r3, #4
 8006efc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f04:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006f08:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006f0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f0e:	3301      	adds	r3, #1
 8006f10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f18:	2218      	movs	r2, #24
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 ff2d 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f22:	233f      	movs	r3, #63	@ 0x3f
 8006f24:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8006f28:	2386      	movs	r3, #134	@ 0x86
 8006f2a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006f2e:	f107 0310 	add.w	r3, r7, #16
 8006f32:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006f3e:	f107 030f 	add.w	r3, r7, #15
 8006f42:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f50:	2100      	movs	r1, #0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 f99c 	bl	8008290 <hci_send_req>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	da01      	bge.n	8006f62 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006f5e:	23ff      	movs	r3, #255	@ 0xff
 8006f60:	e004      	b.n	8006f6c <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006f62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006f6a:	781b      	ldrb	r3, [r3, #0]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bdb0      	pop	{r4, r5, r7, pc}

08006f76 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b0cc      	sub	sp, #304	@ 0x130
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f82:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006f86:	6019      	str	r1, [r3, #0]
 8006f88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f8c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006f90:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006f92:	f107 0310 	add.w	r3, r7, #16
 8006f96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006f9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f9e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006fb0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006fb4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006fb8:	8812      	ldrh	r2, [r2, #0]
 8006fba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006fbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006fc0:	3302      	adds	r3, #2
 8006fc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8006fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006fca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006fce:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006fd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006fdc:	3304      	adds	r3, #4
 8006fde:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006fe2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006fe6:	2218      	movs	r2, #24
 8006fe8:	2100      	movs	r1, #0
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fec6 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ff0:	233f      	movs	r3, #63	@ 0x3f
 8006ff2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8006ff6:	2388      	movs	r3, #136	@ 0x88
 8006ff8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006ffc:	f107 0310 	add.w	r3, r7, #16
 8007000:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007004:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007008:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800700c:	f107 030f 	add.w	r3, r7, #15
 8007010:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007014:	2301      	movs	r3, #1
 8007016:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800701a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800701e:	2100      	movs	r1, #0
 8007020:	4618      	mov	r0, r3
 8007022:	f001 f935 	bl	8008290 <hci_send_req>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	da01      	bge.n	8007030 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800702c:	23ff      	movs	r3, #255	@ 0xff
 800702e:	e004      	b.n	800703a <aci_gap_pass_key_resp+0xc4>
  return status;
 8007030:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007034:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007038:	781b      	ldrb	r3, [r3, #0]
}
 800703a:	4618      	mov	r0, r3
 800703c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007044:	b590      	push	{r4, r7, lr}
 8007046:	b0cd      	sub	sp, #308	@ 0x134
 8007048:	af00      	add	r7, sp, #0
 800704a:	4604      	mov	r4, r0
 800704c:	4608      	mov	r0, r1
 800704e:	4611      	mov	r1, r2
 8007050:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007054:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800705e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007062:	4622      	mov	r2, r4
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800706a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800706e:	4602      	mov	r2, r0
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007076:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800707a:	460a      	mov	r2, r1
 800707c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800707e:	f107 0310 	add.w	r3, r7, #16
 8007082:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007086:	f107 0308 	add.w	r3, r7, #8
 800708a:	2207      	movs	r2, #7
 800708c:	2100      	movs	r1, #0
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fe74 	bl	8007d7c <Osal_MemSet>
  int index_input = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800709a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800709e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80070a2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80070aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070ae:	3301      	adds	r3, #1
 80070b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80070b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80070b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80070bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80070c0:	7812      	ldrb	r2, [r2, #0]
 80070c2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80070c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070c8:	3301      	adds	r3, #1
 80070ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80070ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80070d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80070d6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80070da:	7812      	ldrb	r2, [r2, #0]
 80070dc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80070de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070e2:	3301      	adds	r3, #1
 80070e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80070e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80070ec:	2218      	movs	r2, #24
 80070ee:	2100      	movs	r1, #0
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fe43 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 80070f6:	233f      	movs	r3, #63	@ 0x3f
 80070f8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80070fc:	238a      	movs	r3, #138	@ 0x8a
 80070fe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007102:	f107 0310 	add.w	r3, r7, #16
 8007106:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800710a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800710e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8007112:	f107 0308 	add.w	r3, r7, #8
 8007116:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800711a:	2307      	movs	r3, #7
 800711c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007120:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007124:	2100      	movs	r1, #0
 8007126:	4618      	mov	r0, r3
 8007128:	f001 f8b2 	bl	8008290 <hci_send_req>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	da01      	bge.n	8007136 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007132:	23ff      	movs	r3, #255	@ 0xff
 8007134:	e02e      	b.n	8007194 <aci_gap_init+0x150>
  if ( resp.Status )
 8007136:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800713a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d005      	beq.n	8007150 <aci_gap_init+0x10c>
    return resp.Status;
 8007144:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007148:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	e021      	b.n	8007194 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007150:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007154:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007158:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800715c:	b29a      	uxth	r2, r3
 800715e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007162:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800716a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800716e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007172:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007176:	b29a      	uxth	r2, r3
 8007178:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800717c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800717e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007182:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007186:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800718a:	b29a      	uxth	r2, r3
 800718c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007190:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800719a:	46bd      	mov	sp, r7
 800719c:	bd90      	pop	{r4, r7, pc}

0800719e <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b0cc      	sub	sp, #304	@ 0x130
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	4602      	mov	r2, r0
 80071a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80071ae:	6019      	str	r1, [r3, #0]
 80071b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071b4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80071b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80071ba:	f107 0310 	add.w	r3, r7, #16
 80071be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80071c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071c6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80071ca:	2200      	movs	r2, #0
 80071cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80071d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80071d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80071dc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80071e0:	7812      	ldrb	r2, [r2, #0]
 80071e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80071e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80071e8:	3301      	adds	r3, #1
 80071ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80071ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80071f2:	1c58      	adds	r0, r3, #1
 80071f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80071f8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80071fc:	781a      	ldrb	r2, [r3, #0]
 80071fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007202:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007206:	6819      	ldr	r1, [r3, #0]
 8007208:	f000 fda8 	bl	8007d5c <Osal_MemCpy>
  index_input += AdvDataLen;
 800720c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007210:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800721a:	4413      	add	r3, r2
 800721c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007220:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007224:	2218      	movs	r2, #24
 8007226:	2100      	movs	r1, #0
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fda7 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800722e:	233f      	movs	r3, #63	@ 0x3f
 8007230:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8007234:	238e      	movs	r3, #142	@ 0x8e
 8007236:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800723a:	f107 0310 	add.w	r3, r7, #16
 800723e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007242:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007246:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800724a:	f107 030f 	add.w	r3, r7, #15
 800724e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007252:	2301      	movs	r3, #1
 8007254:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007258:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f001 f816 	bl	8008290 <hci_send_req>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	da01      	bge.n	800726e <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800726a:	23ff      	movs	r3, #255	@ 0xff
 800726c:	e004      	b.n	8007278 <aci_gap_update_adv_data+0xda>
  return status;
 800726e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007272:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007276:	781b      	ldrb	r3, [r3, #0]
}
 8007278:	4618      	mov	r0, r3
 800727a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b088      	sub	sp, #32
 8007286:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007288:	2300      	movs	r3, #0
 800728a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800728c:	f107 0308 	add.w	r3, r7, #8
 8007290:	2218      	movs	r2, #24
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fd71 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800729a:	233f      	movs	r3, #63	@ 0x3f
 800729c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800729e:	2392      	movs	r3, #146	@ 0x92
 80072a0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80072a2:	1dfb      	adds	r3, r7, #7
 80072a4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80072a6:	2301      	movs	r3, #1
 80072a8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80072aa:	f107 0308 	add.w	r3, r7, #8
 80072ae:	2100      	movs	r1, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 ffed 	bl	8008290 <hci_send_req>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	da01      	bge.n	80072c0 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80072bc:	23ff      	movs	r3, #255	@ 0xff
 80072be:	e000      	b.n	80072c2 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80072c0:	79fb      	ldrb	r3, [r7, #7]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b0cc      	sub	sp, #304	@ 0x130
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	4602      	mov	r2, r0
 80072d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80072d6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80072da:	801a      	strh	r2, [r3, #0]
 80072dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80072e0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80072e4:	460a      	mov	r2, r1
 80072e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80072e8:	f107 0310 	add.w	r3, r7, #16
 80072ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80072f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80072f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80072f8:	2200      	movs	r2, #0
 80072fa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007302:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007306:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800730a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800730e:	8812      	ldrh	r2, [r2, #0]
 8007310:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007312:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007316:	3302      	adds	r3, #2
 8007318:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800731c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007320:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007324:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007328:	7812      	ldrb	r2, [r2, #0]
 800732a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800732c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007330:	3301      	adds	r3, #1
 8007332:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007336:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800733a:	2218      	movs	r2, #24
 800733c:	2100      	movs	r1, #0
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fd1c 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007344:	233f      	movs	r3, #63	@ 0x3f
 8007346:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800734a:	23a5      	movs	r3, #165	@ 0xa5
 800734c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007350:	f107 0310 	add.w	r3, r7, #16
 8007354:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007358:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800735c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007360:	f107 030f 	add.w	r3, r7, #15
 8007364:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007368:	2301      	movs	r3, #1
 800736a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800736e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007372:	2100      	movs	r1, #0
 8007374:	4618      	mov	r0, r3
 8007376:	f000 ff8b 	bl	8008290 <hci_send_req>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	da01      	bge.n	8007384 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8007380:	23ff      	movs	r3, #255	@ 0xff
 8007382:	e004      	b.n	800738e <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8007384:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007388:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800738c:	781b      	ldrb	r3, [r3, #0]
}
 800738e:	4618      	mov	r0, r3
 8007390:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073a2:	f107 0308 	add.w	r3, r7, #8
 80073a6:	2218      	movs	r2, #24
 80073a8:	2100      	movs	r1, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fce6 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 80073b0:	233f      	movs	r3, #63	@ 0x3f
 80073b2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80073b4:	f240 1301 	movw	r3, #257	@ 0x101
 80073b8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80073ba:	1dfb      	adds	r3, r7, #7
 80073bc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80073be:	2301      	movs	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073c2:	f107 0308 	add.w	r3, r7, #8
 80073c6:	2100      	movs	r1, #0
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 ff61 	bl	8008290 <hci_send_req>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	da01      	bge.n	80073d8 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80073d4:	23ff      	movs	r3, #255	@ 0xff
 80073d6:	e000      	b.n	80073da <aci_gatt_init+0x42>
  return status;
 80073d8:	79fb      	ldrb	r3, [r7, #7]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3720      	adds	r7, #32
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80073e2:	b590      	push	{r4, r7, lr}
 80073e4:	b0cf      	sub	sp, #316	@ 0x13c
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	4604      	mov	r4, r0
 80073ea:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80073ee:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80073f2:	6001      	str	r1, [r0, #0]
 80073f4:	4610      	mov	r0, r2
 80073f6:	4619      	mov	r1, r3
 80073f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073fc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007400:	4622      	mov	r2, r4
 8007402:	701a      	strb	r2, [r3, #0]
 8007404:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007408:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800740c:	4602      	mov	r2, r0
 800740e:	701a      	strb	r2, [r3, #0]
 8007410:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007414:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007418:	460a      	mov	r2, r1
 800741a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800741c:	f107 0310 	add.w	r3, r7, #16
 8007420:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007424:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007428:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d00a      	beq.n	8007448 <aci_gatt_add_service+0x66>
 8007432:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007436:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d101      	bne.n	8007444 <aci_gatt_add_service+0x62>
 8007440:	2311      	movs	r3, #17
 8007442:	e002      	b.n	800744a <aci_gatt_add_service+0x68>
 8007444:	2301      	movs	r3, #1
 8007446:	e000      	b.n	800744a <aci_gatt_add_service+0x68>
 8007448:	2303      	movs	r3, #3
 800744a:	f107 0210 	add.w	r2, r7, #16
 800744e:	4413      	add	r3, r2
 8007450:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007454:	f107 030c 	add.w	r3, r7, #12
 8007458:	2203      	movs	r2, #3
 800745a:	2100      	movs	r1, #0
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fc8d 	bl	8007d7c <Osal_MemSet>
  int index_input = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007468:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800746c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007470:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8007474:	7812      	ldrb	r2, [r2, #0]
 8007476:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007478:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800747c:	3301      	adds	r3, #1
 800747e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007482:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007486:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d002      	beq.n	8007496 <aci_gatt_add_service+0xb4>
 8007490:	2b02      	cmp	r3, #2
 8007492:	d004      	beq.n	800749e <aci_gatt_add_service+0xbc>
 8007494:	e007      	b.n	80074a6 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007496:	2302      	movs	r3, #2
 8007498:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800749c:	e005      	b.n	80074aa <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800749e:	2310      	movs	r3, #16
 80074a0:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80074a4:	e001      	b.n	80074aa <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80074a6:	2397      	movs	r3, #151	@ 0x97
 80074a8:	e06c      	b.n	8007584 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80074aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80074ae:	1c58      	adds	r0, r3, #1
 80074b0:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80074b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074b8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80074bc:	6819      	ldr	r1, [r3, #0]
 80074be:	f000 fc4d 	bl	8007d5c <Osal_MemCpy>
    index_input += size;
 80074c2:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80074c6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80074ca:	4413      	add	r3, r2
 80074cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 80074d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074d4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80074d8:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80074dc:	7812      	ldrb	r2, [r2, #0]
 80074de:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80074e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074e4:	3301      	adds	r3, #1
 80074e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80074ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074ee:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80074f2:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80074f6:	7812      	ldrb	r2, [r2, #0]
 80074f8:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80074fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074fe:	3301      	adds	r3, #1
 8007500:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007504:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007508:	2218      	movs	r2, #24
 800750a:	2100      	movs	r1, #0
 800750c:	4618      	mov	r0, r3
 800750e:	f000 fc35 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007512:	233f      	movs	r3, #63	@ 0x3f
 8007514:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8007518:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800751c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007520:	f107 0310 	add.w	r3, r7, #16
 8007524:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007528:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800752c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8007530:	f107 030c 	add.w	r3, r7, #12
 8007534:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8007538:	2303      	movs	r3, #3
 800753a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800753e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007542:	2100      	movs	r1, #0
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fea3 	bl	8008290 <hci_send_req>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	da01      	bge.n	8007554 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007550:	23ff      	movs	r3, #255	@ 0xff
 8007552:	e017      	b.n	8007584 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8007554:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007558:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d005      	beq.n	800756e <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007562:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007566:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	e00a      	b.n	8007584 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800756e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007572:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007576:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800757a:	b29a      	uxth	r2, r3
 800757c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007580:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800758a:	46bd      	mov	sp, r7
 800758c:	bd90      	pop	{r4, r7, pc}

0800758e <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800758e:	b590      	push	{r4, r7, lr}
 8007590:	b0d1      	sub	sp, #324	@ 0x144
 8007592:	af00      	add	r7, sp, #0
 8007594:	4604      	mov	r4, r0
 8007596:	4608      	mov	r0, r1
 8007598:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800759c:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80075a0:	600a      	str	r2, [r1, #0]
 80075a2:	4619      	mov	r1, r3
 80075a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075a8:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80075ac:	4622      	mov	r2, r4
 80075ae:	801a      	strh	r2, [r3, #0]
 80075b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075b4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80075b8:	4602      	mov	r2, r0
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075c0:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 80075c4:	460a      	mov	r2, r1
 80075c6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80075c8:	f107 0318 	add.w	r3, r7, #24
 80075cc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80075d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075d4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d00a      	beq.n	80075f4 <aci_gatt_add_char+0x66>
 80075de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075e2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d101      	bne.n	80075f0 <aci_gatt_add_char+0x62>
 80075ec:	2313      	movs	r3, #19
 80075ee:	e002      	b.n	80075f6 <aci_gatt_add_char+0x68>
 80075f0:	2303      	movs	r3, #3
 80075f2:	e000      	b.n	80075f6 <aci_gatt_add_char+0x68>
 80075f4:	2305      	movs	r3, #5
 80075f6:	f107 0218 	add.w	r2, r7, #24
 80075fa:	4413      	add	r3, r2
 80075fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007600:	f107 0314 	add.w	r3, r7, #20
 8007604:	2203      	movs	r2, #3
 8007606:	2100      	movs	r1, #0
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fbb7 	bl	8007d7c <Osal_MemSet>
  int index_input = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8007614:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007618:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800761c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007620:	8812      	ldrh	r2, [r2, #0]
 8007622:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007624:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007628:	3302      	adds	r3, #2
 800762a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800762e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007632:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007636:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800763a:	7812      	ldrb	r2, [r2, #0]
 800763c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800763e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007642:	3301      	adds	r3, #1
 8007644:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007648:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800764c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d002      	beq.n	800765c <aci_gatt_add_char+0xce>
 8007656:	2b02      	cmp	r3, #2
 8007658:	d004      	beq.n	8007664 <aci_gatt_add_char+0xd6>
 800765a:	e007      	b.n	800766c <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800765c:	2302      	movs	r3, #2
 800765e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8007662:	e005      	b.n	8007670 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007664:	2310      	movs	r3, #16
 8007666:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800766a:	e001      	b.n	8007670 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800766c:	2397      	movs	r3, #151	@ 0x97
 800766e:	e091      	b.n	8007794 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007670:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007674:	1cd8      	adds	r0, r3, #3
 8007676:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800767a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800767e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	f000 fb6a 	bl	8007d5c <Osal_MemCpy>
    index_input += size;
 8007688:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800768c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007690:	4413      	add	r3, r2
 8007692:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007696:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800769a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800769e:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80076a2:	8812      	ldrh	r2, [r2, #0]
 80076a4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80076a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80076aa:	3302      	adds	r3, #2
 80076ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80076b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80076b4:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80076b8:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80076ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80076be:	3301      	adds	r3, #1
 80076c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80076c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80076c8:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80076cc:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80076ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80076d2:	3301      	adds	r3, #1
 80076d4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80076d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80076dc:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80076e0:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80076e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80076e6:	3301      	adds	r3, #1
 80076e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80076ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80076f0:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 80076f4:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80076f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80076fa:	3301      	adds	r3, #1
 80076fc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007700:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007704:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8007708:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800770a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800770e:	3301      	adds	r3, #1
 8007710:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007714:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007718:	2218      	movs	r2, #24
 800771a:	2100      	movs	r1, #0
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fb2d 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007722:	233f      	movs	r3, #63	@ 0x3f
 8007724:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8007728:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800772c:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8007730:	f107 0318 	add.w	r3, r7, #24
 8007734:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8007738:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800773c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8007740:	f107 0314 	add.w	r3, r7, #20
 8007744:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8007748:	2303      	movs	r3, #3
 800774a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800774e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007752:	2100      	movs	r1, #0
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fd9b 	bl	8008290 <hci_send_req>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	da01      	bge.n	8007764 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007760:	23ff      	movs	r3, #255	@ 0xff
 8007762:	e017      	b.n	8007794 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007764:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007768:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d005      	beq.n	800777e <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007772:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007776:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	e00a      	b.n	8007794 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800777e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007782:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007786:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800778a:	b29a      	uxth	r2, r3
 800778c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8007790:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800779a:	46bd      	mov	sp, r7
 800779c:	bd90      	pop	{r4, r7, pc}

0800779e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800779e:	b5b0      	push	{r4, r5, r7, lr}
 80077a0:	b0cc      	sub	sp, #304	@ 0x130
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	4605      	mov	r5, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	4610      	mov	r0, r2
 80077aa:	4619      	mov	r1, r3
 80077ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077b0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80077b4:	462a      	mov	r2, r5
 80077b6:	801a      	strh	r2, [r3, #0]
 80077b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077c0:	4622      	mov	r2, r4
 80077c2:	801a      	strh	r2, [r3, #0]
 80077c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077c8:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80077cc:	4602      	mov	r2, r0
 80077ce:	701a      	strb	r2, [r3, #0]
 80077d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077d4:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80077d8:	460a      	mov	r2, r1
 80077da:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80077dc:	f107 0310 	add.w	r3, r7, #16
 80077e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80077e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077e8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80077ec:	2200      	movs	r2, #0
 80077ee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 80077f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80077fa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80077fe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007802:	8812      	ldrh	r2, [r2, #0]
 8007804:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007806:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800780a:	3302      	adds	r3, #2
 800780c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8007810:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007814:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007818:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800781c:	8812      	ldrh	r2, [r2, #0]
 800781e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007820:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007824:	3302      	adds	r3, #2
 8007826:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800782a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800782e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007832:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8007836:	7812      	ldrb	r2, [r2, #0]
 8007838:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800783a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800783e:	3301      	adds	r3, #1
 8007840:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007844:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007848:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800784c:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8007850:	7812      	ldrb	r2, [r2, #0]
 8007852:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007854:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007858:	3301      	adds	r3, #1
 800785a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800785e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007862:	1d98      	adds	r0, r3, #6
 8007864:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007868:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8007874:	f000 fa72 	bl	8007d5c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007878:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800787c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007886:	4413      	add	r3, r2
 8007888:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800788c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007890:	2218      	movs	r2, #24
 8007892:	2100      	movs	r1, #0
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fa71 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 800789a:	233f      	movs	r3, #63	@ 0x3f
 800789c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80078a0:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80078a4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80078a8:	f107 0310 	add.w	r3, r7, #16
 80078ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80078b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80078b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80078b8:	f107 030f 	add.w	r3, r7, #15
 80078bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80078c0:	2301      	movs	r3, #1
 80078c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80078ca:	2100      	movs	r1, #0
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 fcdf 	bl	8008290 <hci_send_req>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	da01      	bge.n	80078dc <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80078d8:	23ff      	movs	r3, #255	@ 0xff
 80078da:	e004      	b.n	80078e6 <aci_gatt_update_char_value+0x148>
  return status;
 80078dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80078e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80078e4:	781b      	ldrb	r3, [r3, #0]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bdb0      	pop	{r4, r5, r7, pc}

080078f0 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b0cc      	sub	sp, #304	@ 0x130
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4602      	mov	r2, r0
 80078f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80078fc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007900:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8007902:	f107 0310 	add.w	r3, r7, #16
 8007906:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800790a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800790e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007912:	2200      	movs	r2, #0
 8007914:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007916:	2300      	movs	r3, #0
 8007918:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800791c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007920:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007924:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007928:	8812      	ldrh	r2, [r2, #0]
 800792a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800792c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007930:	3302      	adds	r3, #2
 8007932:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007936:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800793a:	2218      	movs	r2, #24
 800793c:	2100      	movs	r1, #0
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fa1c 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007944:	233f      	movs	r3, #63	@ 0x3f
 8007946:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800794a:	f240 1325 	movw	r3, #293	@ 0x125
 800794e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007952:	f107 0310 	add.w	r3, r7, #16
 8007956:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800795a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800795e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007962:	f107 030f 	add.w	r3, r7, #15
 8007966:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800796a:	2301      	movs	r3, #1
 800796c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007970:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007974:	2100      	movs	r1, #0
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fc8a 	bl	8008290 <hci_send_req>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	da01      	bge.n	8007986 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8007982:	23ff      	movs	r3, #255	@ 0xff
 8007984:	e004      	b.n	8007990 <aci_gatt_confirm_indication+0xa0>
  return status;
 8007986:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800798a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800798e:	781b      	ldrb	r3, [r3, #0]
}
 8007990:	4618      	mov	r0, r3
 8007992:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b0cc      	sub	sp, #304	@ 0x130
 800799e:	af00      	add	r7, sp, #0
 80079a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079a4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079ae:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80079b2:	4602      	mov	r2, r0
 80079b4:	701a      	strb	r2, [r3, #0]
 80079b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079ba:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80079be:	460a      	mov	r2, r1
 80079c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80079c2:	f107 0310 	add.w	r3, r7, #16
 80079c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80079ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079ce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80079d2:	2200      	movs	r2, #0
 80079d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 80079dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80079e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80079e4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80079e8:	7812      	ldrb	r2, [r2, #0]
 80079ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80079ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80079f0:	3301      	adds	r3, #1
 80079f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80079f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80079fa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80079fe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007a02:	7812      	ldrb	r2, [r2, #0]
 8007a04:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007a06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007a14:	1c98      	adds	r0, r3, #2
 8007a16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a1a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007a1e:	781a      	ldrb	r2, [r3, #0]
 8007a20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a24:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007a28:	6819      	ldr	r1, [r3, #0]
 8007a2a:	f000 f997 	bl	8007d5c <Osal_MemCpy>
  index_input += Length;
 8007a2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a32:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a46:	2218      	movs	r2, #24
 8007a48:	2100      	movs	r1, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f996 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a50:	233f      	movs	r3, #63	@ 0x3f
 8007a52:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8007a56:	230c      	movs	r3, #12
 8007a58:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007a5c:	f107 0310 	add.w	r3, r7, #16
 8007a60:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007a64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a68:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007a6c:	f107 030f 	add.w	r3, r7, #15
 8007a70:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a7e:	2100      	movs	r1, #0
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fc05 	bl	8008290 <hci_send_req>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	da01      	bge.n	8007a90 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007a8c:	23ff      	movs	r3, #255	@ 0xff
 8007a8e:	e004      	b.n	8007a9a <aci_hal_write_config_data+0x100>
  return status;
 8007a90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a94:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007a98:	781b      	ldrb	r3, [r3, #0]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b0cc      	sub	sp, #304	@ 0x130
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	4602      	mov	r2, r0
 8007aac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ab0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007aba:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007abe:	460a      	mov	r2, r1
 8007ac0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007ac2:	f107 0310 	add.w	r3, r7, #16
 8007ac6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007aca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007ace:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8007adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ae0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007ae4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007ae8:	7812      	ldrb	r2, [r2, #0]
 8007aea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007aec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007af0:	3301      	adds	r3, #1
 8007af2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8007af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007afa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007afe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007b02:	7812      	ldrb	r2, [r2, #0]
 8007b04:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007b14:	2218      	movs	r2, #24
 8007b16:	2100      	movs	r1, #0
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 f92f 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b1e:	233f      	movs	r3, #63	@ 0x3f
 8007b20:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8007b24:	230f      	movs	r3, #15
 8007b26:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007b2a:	f107 0310 	add.w	r3, r7, #16
 8007b2e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007b32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007b36:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007b3a:	f107 030f 	add.w	r3, r7, #15
 8007b3e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007b42:	2301      	movs	r3, #1
 8007b44:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fb9e 	bl	8008290 <hci_send_req>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	da01      	bge.n	8007b5e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007b5a:	23ff      	movs	r3, #255	@ 0xff
 8007b5c:	e004      	b.n	8007b68 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007b5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b62:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007b66:	781b      	ldrb	r3, [r3, #0]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b0cc      	sub	sp, #304	@ 0x130
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	4602      	mov	r2, r0
 8007b7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b7e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007b82:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007b84:	f107 0310 	add.w	r3, r7, #16
 8007b88:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007b8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007b90:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007b94:	2200      	movs	r2, #0
 8007b96:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ba2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007ba6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007baa:	8812      	ldrh	r2, [r2, #0]
 8007bac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007bb2:	3302      	adds	r3, #2
 8007bb4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007bb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007bbc:	2218      	movs	r2, #24
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f8db 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007bc6:	233f      	movs	r3, #63	@ 0x3f
 8007bc8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8007bcc:	2318      	movs	r3, #24
 8007bce:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007bd2:	f107 0310 	add.w	r3, r7, #16
 8007bd6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007bda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007bde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007be2:	f107 030f 	add.w	r3, r7, #15
 8007be6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007bea:	2301      	movs	r3, #1
 8007bec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bf0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 fb4a 	bl	8008290 <hci_send_req>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	da01      	bge.n	8007c06 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007c02:	23ff      	movs	r3, #255	@ 0xff
 8007c04:	e004      	b.n	8007c10 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007c06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c0a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007c0e:	781b      	ldrb	r3, [r3, #0]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b088      	sub	sp, #32
 8007c1e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c24:	f107 0308 	add.w	r3, r7, #8
 8007c28:	2218      	movs	r2, #24
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 f8a5 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x03;
 8007c32:	2303      	movs	r3, #3
 8007c34:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007c36:	2303      	movs	r3, #3
 8007c38:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007c3a:	1dfb      	adds	r3, r7, #7
 8007c3c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c42:	f107 0308 	add.w	r3, r7, #8
 8007c46:	2100      	movs	r1, #0
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fb21 	bl	8008290 <hci_send_req>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	da01      	bge.n	8007c58 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007c54:	23ff      	movs	r3, #255	@ 0xff
 8007c56:	e000      	b.n	8007c5a <hci_reset+0x40>
  return status;
 8007c58:	79fb      	ldrb	r3, [r7, #7]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3720      	adds	r7, #32
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007c62:	b590      	push	{r4, r7, lr}
 8007c64:	b0cd      	sub	sp, #308	@ 0x134
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	4604      	mov	r4, r0
 8007c6a:	4608      	mov	r0, r1
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c72:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007c76:	4622      	mov	r2, r4
 8007c78:	701a      	strb	r2, [r3, #0]
 8007c7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c7e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007c82:	4602      	mov	r2, r0
 8007c84:	701a      	strb	r2, [r3, #0]
 8007c86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c8a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8007c8e:	460a      	mov	r2, r1
 8007c90:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007c92:	f107 0310 	add.w	r3, r7, #16
 8007c96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007c9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007c9e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007cb0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007cb4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007cb8:	7812      	ldrb	r2, [r2, #0]
 8007cba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007cbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007cca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007cce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007cd2:	7812      	ldrb	r2, [r2, #0]
 8007cd4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007cda:	3301      	adds	r3, #1
 8007cdc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ce4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007ce8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007cec:	7812      	ldrb	r2, [r2, #0]
 8007cee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007cf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007cfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007cfe:	2218      	movs	r2, #24
 8007d00:	2100      	movs	r1, #0
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 f83a 	bl	8007d7c <Osal_MemSet>
  rq.ogf = 0x08;
 8007d08:	2308      	movs	r3, #8
 8007d0a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8007d0e:	2331      	movs	r3, #49	@ 0x31
 8007d10:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007d14:	f107 0310 	add.w	r3, r7, #16
 8007d18:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d20:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007d24:	f107 030f 	add.w	r3, r7, #15
 8007d28:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007d36:	2100      	movs	r1, #0
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 faa9 	bl	8008290 <hci_send_req>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	da01      	bge.n	8007d48 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007d44:	23ff      	movs	r3, #255	@ 0xff
 8007d46:	e004      	b.n	8007d52 <hci_le_set_default_phy+0xf0>
  return status;
 8007d48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007d4c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007d50:	781b      	ldrb	r3, [r3, #0]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd90      	pop	{r4, r7, pc}

08007d5c <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	68b9      	ldr	r1, [r7, #8]
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f002 fb5d 	bl	800a42c <memcpy>
 8007d72:	4603      	mov	r3, r0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f002 fb21 	bl	800a3d4 <memset>
 8007d92:	4603      	mov	r3, r0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	af00      	add	r7, sp, #0
  return;
 8007da0:	bf00      	nop
}
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007daa:	b480      	push	{r7}
 8007dac:	af00      	add	r7, sp, #0
  return;
 8007dae:	bf00      	nop
}
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
  return;
 8007dbc:	bf00      	nop
}
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	af00      	add	r7, sp, #0
  return;
 8007dca:	bf00      	nop
}
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	af00      	add	r7, sp, #0
  return;
 8007dd8:	bf00      	nop
}
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007de2:	b480      	push	{r7}
 8007de4:	af00      	add	r7, sp, #0
  return;
 8007de6:	bf00      	nop
}
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
  return;
 8007df4:	bf00      	nop
}
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007dfe:	b480      	push	{r7}
 8007e00:	af00      	add	r7, sp, #0
  return;
 8007e02:	bf00      	nop
}
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
  return;
 8007e10:	bf00      	nop
}
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	af00      	add	r7, sp, #0
  return;
 8007e1e:	bf00      	nop
}
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0
  return;
 8007e2c:	bf00      	nop
}
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007e36:	b480      	push	{r7}
 8007e38:	af00      	add	r7, sp, #0
  return;
 8007e3a:	bf00      	nop
}
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  return;
 8007e48:	bf00      	nop
}
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007e52:	b480      	push	{r7}
 8007e54:	af00      	add	r7, sp, #0
  return;
 8007e56:	bf00      	nop
}
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
  return;
 8007e64:	bf00      	nop
}
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007e6e:	b480      	push	{r7}
 8007e70:	af00      	add	r7, sp, #0
  return;
 8007e72:	bf00      	nop
}
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  return;
 8007e80:	bf00      	nop
}
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
	...

08007e8c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007e90:	4b04      	ldr	r3, [pc, #16]	@ (8007ea4 <SVCCTL_Init+0x18>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007e96:	4b04      	ldr	r3, [pc, #16]	@ (8007ea8 <SVCCTL_Init+0x1c>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007e9c:	f000 f806 	bl	8007eac <SVCCTL_SvcInit>

  return;
 8007ea0:	bf00      	nop
}
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	20000038 	.word	0x20000038
 8007ea8:	20000058 	.word	0x20000058

08007eac <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
  BAS_Init();
 8007eb0:	f7ff ff74 	bl	8007d9c <BAS_Init>

  BLS_Init();
 8007eb4:	f7ff ff79 	bl	8007daa <BLS_Init>

  CRS_STM_Init();
 8007eb8:	f7ff ff7e 	bl	8007db8 <CRS_STM_Init>

  DIS_Init();
 8007ebc:	f7ff ff83 	bl	8007dc6 <DIS_Init>

  EDS_STM_Init();
 8007ec0:	f7ff ff88 	bl	8007dd4 <EDS_STM_Init>

  HIDS_Init();
 8007ec4:	f7ff ff8d 	bl	8007de2 <HIDS_Init>

  HRS_Init();
 8007ec8:	f7ff ff92 	bl	8007df0 <HRS_Init>

  HTS_Init();
 8007ecc:	f7ff ff97 	bl	8007dfe <HTS_Init>

  IAS_Init();
 8007ed0:	f7ff ff9c 	bl	8007e0c <IAS_Init>

  LLS_Init();
 8007ed4:	f7ff ffa1 	bl	8007e1a <LLS_Init>

  TPS_Init();
 8007ed8:	f7ff ffa6 	bl	8007e28 <TPS_Init>

  MOTENV_STM_Init();
 8007edc:	f7ff ffab 	bl	8007e36 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007ee0:	f7ff ffb0 	bl	8007e44 <P2PS_STM_Init>

  ZDD_STM_Init();
 8007ee4:	f7ff ffb5 	bl	8007e52 <ZDD_STM_Init>

  OTAS_STM_Init();
 8007ee8:	f7ff ffba 	bl	8007e60 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007eec:	f7ff ffc6 	bl	8007e7c <BVOPUS_STM_Init>

  MESH_Init();
 8007ef0:	f7ff ffbd 	bl	8007e6e <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007ef4:	f001 fc44 	bl	8009780 <SVCCTL_InitCustomSvc>
  
  return;
 8007ef8:	bf00      	nop
}
 8007efa:	bd80      	pop	{r7, pc}

08007efc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007f04:	4b09      	ldr	r3, [pc, #36]	@ (8007f2c <SVCCTL_RegisterSvcHandler+0x30>)
 8007f06:	7f1b      	ldrb	r3, [r3, #28]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4a08      	ldr	r2, [pc, #32]	@ (8007f2c <SVCCTL_RegisterSvcHandler+0x30>)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007f12:	4b06      	ldr	r3, [pc, #24]	@ (8007f2c <SVCCTL_RegisterSvcHandler+0x30>)
 8007f14:	7f1b      	ldrb	r3, [r3, #28]
 8007f16:	3301      	adds	r3, #1
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	4b04      	ldr	r3, [pc, #16]	@ (8007f2c <SVCCTL_RegisterSvcHandler+0x30>)
 8007f1c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007f1e:	bf00      	nop
}
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	20000038 	.word	0x20000038

08007f30 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2bff      	cmp	r3, #255	@ 0xff
 8007f48:	d125      	bne.n	8007f96 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	3302      	adds	r3, #2
 8007f4e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007f5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f5e:	d118      	bne.n	8007f92 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007f60:	2300      	movs	r3, #0
 8007f62:	757b      	strb	r3, [r7, #21]
 8007f64:	e00d      	b.n	8007f82 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007f66:	7d7b      	ldrb	r3, [r7, #21]
 8007f68:	4a1a      	ldr	r2, [pc, #104]	@ (8007fd4 <SVCCTL_UserEvtRx+0xa4>)
 8007f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
 8007f72:	4603      	mov	r3, r0
 8007f74:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d108      	bne.n	8007f8e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007f7c:	7d7b      	ldrb	r3, [r7, #21]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	757b      	strb	r3, [r7, #21]
 8007f82:	4b14      	ldr	r3, [pc, #80]	@ (8007fd4 <SVCCTL_UserEvtRx+0xa4>)
 8007f84:	7f1b      	ldrb	r3, [r3, #28]
 8007f86:	7d7a      	ldrb	r2, [r7, #21]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d3ec      	bcc.n	8007f66 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007f8c:	e002      	b.n	8007f94 <SVCCTL_UserEvtRx+0x64>
              break;
 8007f8e:	bf00      	nop
          break;
 8007f90:	e000      	b.n	8007f94 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007f92:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007f94:	e000      	b.n	8007f98 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007f96:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d00f      	beq.n	8007fbe <SVCCTL_UserEvtRx+0x8e>
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	dc10      	bgt.n	8007fc4 <SVCCTL_UserEvtRx+0x94>
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <SVCCTL_UserEvtRx+0x7c>
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d006      	beq.n	8007fb8 <SVCCTL_UserEvtRx+0x88>
 8007faa:	e00b      	b.n	8007fc4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 ff81 	bl	8008eb4 <SVCCTL_App_Notification>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	75bb      	strb	r3, [r7, #22]
      break;
 8007fb6:	e008      	b.n	8007fca <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	75bb      	strb	r3, [r7, #22]
      break;
 8007fbc:	e005      	b.n	8007fca <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	75bb      	strb	r3, [r7, #22]
      break;
 8007fc2:	e002      	b.n	8007fca <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	75bb      	strb	r3, [r7, #22]
      break;
 8007fc8:	bf00      	nop
  }

  return (return_status);
 8007fca:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20000038 	.word	0x20000038

08007fd8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007fe0:	f107 030c 	add.w	r3, r7, #12
 8007fe4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	212e      	movs	r1, #46	@ 0x2e
 8007ff0:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8007ff4:	f000 fae8 	bl	80085c8 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	330b      	adds	r3, #11
 8007ffc:	78db      	ldrb	r3, [r3, #3]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3720      	adds	r7, #32
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b088      	sub	sp, #32
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800800e:	f107 030c 	add.w	r3, r7, #12
 8008012:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	210f      	movs	r1, #15
 800801e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8008022:	f000 fad1 	bl	80085c8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	330b      	adds	r3, #11
 800802a:	78db      	ldrb	r3, [r3, #3]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3720      	adds	r7, #32
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800803c:	f107 030c 	add.w	r3, r7, #12
 8008040:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	2110      	movs	r1, #16
 8008048:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800804c:	f000 fabc 	bl	80085c8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	330b      	adds	r3, #11
 8008054:	78db      	ldrb	r3, [r3, #3]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3720      	adds	r7, #32
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008060:	b480      	push	{r7}
 8008062:	b08b      	sub	sp, #44	@ 0x2c
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008070:	2300      	movs	r3, #0
 8008072:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800807c:	2300      	movs	r3, #0
 800807e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008080:	2300      	movs	r3, #0
 8008082:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008088:	4b4a      	ldr	r3, [pc, #296]	@ (80081b4 <SHCI_GetWirelessFwInfo+0x154>)
 800808a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800808c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008090:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800809a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a44      	ldr	r2, [pc, #272]	@ (80081b8 <SHCI_GetWirelessFwInfo+0x158>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d10f      	bne.n	80080cc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	e01a      	b.n	8008102 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80080d4:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80080d8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	0e1b      	lsrs	r3, r3, #24
 8008106:	b2da      	uxtb	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800810c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810e:	0c1b      	lsrs	r3, r3, #16
 8008110:	b2da      	uxtb	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008118:	0a1b      	lsrs	r3, r3, #8
 800811a:	b2da      	uxtb	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008122:	091b      	lsrs	r3, r3, #4
 8008124:	b2db      	uxtb	r3, r3
 8008126:	f003 030f 	and.w	r3, r3, #15
 800812a:	b2da      	uxtb	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f003 030f 	and.w	r3, r3, #15
 8008138:	b2da      	uxtb	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	0e1b      	lsrs	r3, r3, #24
 8008142:	b2da      	uxtb	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008148:	6a3b      	ldr	r3, [r7, #32]
 800814a:	0c1b      	lsrs	r3, r3, #16
 800814c:	b2da      	uxtb	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	0a1b      	lsrs	r3, r3, #8
 8008156:	b2da      	uxtb	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	b2da      	uxtb	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	b2da      	uxtb	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	0e1b      	lsrs	r3, r3, #24
 8008170:	b2da      	uxtb	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	0c1b      	lsrs	r3, r3, #16
 800817a:	b2da      	uxtb	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	0a1b      	lsrs	r3, r3, #8
 8008184:	b2da      	uxtb	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	0e1b      	lsrs	r3, r3, #24
 800818e:	b2da      	uxtb	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	0c1b      	lsrs	r3, r3, #16
 8008198:	b2da      	uxtb	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	372c      	adds	r7, #44	@ 0x2c
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	58004000 	.word	0x58004000
 80081b8:	a94656b9 	.word	0xa94656b9

080081bc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	4a08      	ldr	r2, [pc, #32]	@ (80081ec <hci_init+0x30>)
 80081cc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80081ce:	4a08      	ldr	r2, [pc, #32]	@ (80081f0 <hci_init+0x34>)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80081d4:	4806      	ldr	r0, [pc, #24]	@ (80081f0 <hci_init+0x34>)
 80081d6:	f000 f979 	bl	80084cc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 f8da 	bl	8008398 <TlInit>

  return;
 80081e4:	bf00      	nop
}
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	200003f8 	.word	0x200003f8
 80081f0:	200003d0 	.word	0x200003d0

080081f4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80081fa:	4822      	ldr	r0, [pc, #136]	@ (8008284 <hci_user_evt_proc+0x90>)
 80081fc:	f000 fd32 	bl	8008c64 <LST_is_empty>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d12b      	bne.n	800825e <hci_user_evt_proc+0x6a>
 8008206:	4b20      	ldr	r3, [pc, #128]	@ (8008288 <hci_user_evt_proc+0x94>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d027      	beq.n	800825e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800820e:	f107 030c 	add.w	r3, r7, #12
 8008212:	4619      	mov	r1, r3
 8008214:	481b      	ldr	r0, [pc, #108]	@ (8008284 <hci_user_evt_proc+0x90>)
 8008216:	f000 fdb4 	bl	8008d82 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800821a:	4b1c      	ldr	r3, [pc, #112]	@ (800828c <hci_user_evt_proc+0x98>)
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00c      	beq.n	800823c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008226:	2301      	movs	r3, #1
 8008228:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800822a:	4b18      	ldr	r3, [pc, #96]	@ (800828c <hci_user_evt_proc+0x98>)
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	1d3a      	adds	r2, r7, #4
 8008230:	4610      	mov	r0, r2
 8008232:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008234:	793a      	ldrb	r2, [r7, #4]
 8008236:	4b14      	ldr	r3, [pc, #80]	@ (8008288 <hci_user_evt_proc+0x94>)
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	e002      	b.n	8008242 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800823c:	4b12      	ldr	r3, [pc, #72]	@ (8008288 <hci_user_evt_proc+0x94>)
 800823e:	2201      	movs	r2, #1
 8008240:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008242:	4b11      	ldr	r3, [pc, #68]	@ (8008288 <hci_user_evt_proc+0x94>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d004      	beq.n	8008254 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fc0d 	bl	8008a6c <TL_MM_EvtDone>
 8008252:	e004      	b.n	800825e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4619      	mov	r1, r3
 8008258:	480a      	ldr	r0, [pc, #40]	@ (8008284 <hci_user_evt_proc+0x90>)
 800825a:	f000 fd25 	bl	8008ca8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800825e:	4809      	ldr	r0, [pc, #36]	@ (8008284 <hci_user_evt_proc+0x90>)
 8008260:	f000 fd00 	bl	8008c64 <LST_is_empty>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d107      	bne.n	800827a <hci_user_evt_proc+0x86>
 800826a:	4b07      	ldr	r3, [pc, #28]	@ (8008288 <hci_user_evt_proc+0x94>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008272:	4804      	ldr	r0, [pc, #16]	@ (8008284 <hci_user_evt_proc+0x90>)
 8008274:	f001 f844 	bl	8009300 <hci_notify_asynch_evt>
  }


  return;
 8008278:	bf00      	nop
 800827a:	bf00      	nop
}
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20000060 	.word	0x20000060
 8008288:	2000006c 	.word	0x2000006c
 800828c:	200003d0 	.word	0x200003d0

08008290 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b088      	sub	sp, #32
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800829c:	2000      	movs	r0, #0
 800829e:	f000 f8d1 	bl	8008444 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80082a2:	2300      	movs	r3, #0
 80082a4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	885b      	ldrh	r3, [r3, #2]
 80082aa:	b21b      	sxth	r3, r3
 80082ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082b0:	b21a      	sxth	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	029b      	lsls	r3, r3, #10
 80082b8:	b21b      	sxth	r3, r3
 80082ba:	4313      	orrs	r3, r2
 80082bc:	b21b      	sxth	r3, r3
 80082be:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80082c0:	4b33      	ldr	r3, [pc, #204]	@ (8008390 <hci_send_req+0x100>)
 80082c2:	2201      	movs	r2, #1
 80082c4:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	b2d9      	uxtb	r1, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	8bbb      	ldrh	r3, [r7, #28]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 f890 	bl	80083f8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80082d8:	e04e      	b.n	8008378 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80082da:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80082de:	f001 f826 	bl	800932e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80082e2:	e043      	b.n	800836c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80082e4:	f107 030c 	add.w	r3, r7, #12
 80082e8:	4619      	mov	r1, r3
 80082ea:	482a      	ldr	r0, [pc, #168]	@ (8008394 <hci_send_req+0x104>)
 80082ec:	f000 fd49 	bl	8008d82 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	7a5b      	ldrb	r3, [r3, #9]
 80082f4:	2b0f      	cmp	r3, #15
 80082f6:	d114      	bne.n	8008322 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	330b      	adds	r3, #11
 80082fc:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	885b      	ldrh	r3, [r3, #2]
 8008302:	b29b      	uxth	r3, r3
 8008304:	8bba      	ldrh	r2, [r7, #28]
 8008306:	429a      	cmp	r2, r3
 8008308:	d104      	bne.n	8008314 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	7812      	ldrb	r2, [r2, #0]
 8008312:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d027      	beq.n	800836c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800831c:	2301      	movs	r3, #1
 800831e:	77fb      	strb	r3, [r7, #31]
 8008320:	e024      	b.n	800836c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	330b      	adds	r3, #11
 8008326:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800832e:	b29b      	uxth	r3, r3
 8008330:	8bba      	ldrh	r2, [r7, #28]
 8008332:	429a      	cmp	r2, r3
 8008334:	d114      	bne.n	8008360 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	7a9b      	ldrb	r3, [r3, #10]
 800833a:	3b03      	subs	r3, #3
 800833c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	695a      	ldr	r2, [r3, #20]
 8008342:	7dfb      	ldrb	r3, [r7, #23]
 8008344:	429a      	cmp	r2, r3
 8008346:	bfa8      	it	ge
 8008348:	461a      	movge	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6918      	ldr	r0, [r3, #16]
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	1cd9      	adds	r1, r3, #3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	461a      	mov	r2, r3
 800835c:	f002 f866 	bl	800a42c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008368:	2301      	movs	r3, #1
 800836a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800836c:	4809      	ldr	r0, [pc, #36]	@ (8008394 <hci_send_req+0x104>)
 800836e:	f000 fc79 	bl	8008c64 <LST_is_empty>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d0b5      	beq.n	80082e4 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008378:	7ffb      	ldrb	r3, [r7, #31]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0ad      	beq.n	80082da <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800837e:	2001      	movs	r0, #1
 8008380:	f000 f860 	bl	8008444 <NotifyCmdStatus>

  return 0;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3720      	adds	r7, #32
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	200003fc 	.word	0x200003fc
 8008394:	200003f0 	.word	0x200003f0

08008398 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80083a0:	480f      	ldr	r0, [pc, #60]	@ (80083e0 <TlInit+0x48>)
 80083a2:	f000 fc4f 	bl	8008c44 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80083a6:	4a0f      	ldr	r2, [pc, #60]	@ (80083e4 <TlInit+0x4c>)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80083ac:	480e      	ldr	r0, [pc, #56]	@ (80083e8 <TlInit+0x50>)
 80083ae:	f000 fc49 	bl	8008c44 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80083b2:	4b0e      	ldr	r3, [pc, #56]	@ (80083ec <TlInit+0x54>)
 80083b4:	2201      	movs	r2, #1
 80083b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80083b8:	4b0d      	ldr	r3, [pc, #52]	@ (80083f0 <TlInit+0x58>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00a      	beq.n	80083d6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80083c4:	4b0b      	ldr	r3, [pc, #44]	@ (80083f4 <TlInit+0x5c>)
 80083c6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80083c8:	4b09      	ldr	r3, [pc, #36]	@ (80083f0 <TlInit+0x58>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f107 0208 	add.w	r2, r7, #8
 80083d0:	4610      	mov	r0, r2
 80083d2:	4798      	blx	r3
  }

  return;
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop
}
 80083d8:	3718      	adds	r7, #24
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	200003f0 	.word	0x200003f0
 80083e4:	20000068 	.word	0x20000068
 80083e8:	20000060 	.word	0x20000060
 80083ec:	2000006c 	.word	0x2000006c
 80083f0:	200003d0 	.word	0x200003d0
 80083f4:	08008485 	.word	0x08008485

080083f8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	603a      	str	r2, [r7, #0]
 8008402:	80fb      	strh	r3, [r7, #6]
 8008404:	460b      	mov	r3, r1
 8008406:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008408:	4b0c      	ldr	r3, [pc, #48]	@ (800843c <SendCmd+0x44>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	88fa      	ldrh	r2, [r7, #6]
 800840e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008412:	4b0a      	ldr	r3, [pc, #40]	@ (800843c <SendCmd+0x44>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	797a      	ldrb	r2, [r7, #5]
 8008418:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800841a:	4b08      	ldr	r3, [pc, #32]	@ (800843c <SendCmd+0x44>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	330c      	adds	r3, #12
 8008420:	797a      	ldrb	r2, [r7, #5]
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	4618      	mov	r0, r3
 8008426:	f002 f801 	bl	800a42c <memcpy>

  hciContext.io.Send(0,0);
 800842a:	4b05      	ldr	r3, [pc, #20]	@ (8008440 <SendCmd+0x48>)
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	2100      	movs	r1, #0
 8008430:	2000      	movs	r0, #0
 8008432:	4798      	blx	r3

  return;
 8008434:	bf00      	nop
}
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	20000068 	.word	0x20000068
 8008440:	200003d0 	.word	0x200003d0

08008444 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800844e:	79fb      	ldrb	r3, [r7, #7]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d108      	bne.n	8008466 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008454:	4b0a      	ldr	r3, [pc, #40]	@ (8008480 <NotifyCmdStatus+0x3c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00d      	beq.n	8008478 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800845c:	4b08      	ldr	r3, [pc, #32]	@ (8008480 <NotifyCmdStatus+0x3c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2000      	movs	r0, #0
 8008462:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008464:	e008      	b.n	8008478 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008466:	4b06      	ldr	r3, [pc, #24]	@ (8008480 <NotifyCmdStatus+0x3c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d004      	beq.n	8008478 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800846e:	4b04      	ldr	r3, [pc, #16]	@ (8008480 <NotifyCmdStatus+0x3c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2001      	movs	r0, #1
 8008474:	4798      	blx	r3
  return;
 8008476:	bf00      	nop
 8008478:	bf00      	nop
}
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	200003f8 	.word	0x200003f8

08008484 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	7a5b      	ldrb	r3, [r3, #9]
 8008490:	2b0f      	cmp	r3, #15
 8008492:	d003      	beq.n	800849c <TlEvtReceived+0x18>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	7a5b      	ldrb	r3, [r3, #9]
 8008498:	2b0e      	cmp	r3, #14
 800849a:	d107      	bne.n	80084ac <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800849c:	6879      	ldr	r1, [r7, #4]
 800849e:	4809      	ldr	r0, [pc, #36]	@ (80084c4 <TlEvtReceived+0x40>)
 80084a0:	f000 fc28 	bl	8008cf4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80084a4:	2000      	movs	r0, #0
 80084a6:	f000 ff37 	bl	8009318 <hci_cmd_resp_release>
 80084aa:	e006      	b.n	80084ba <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	4806      	ldr	r0, [pc, #24]	@ (80084c8 <TlEvtReceived+0x44>)
 80084b0:	f000 fc20 	bl	8008cf4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80084b4:	4804      	ldr	r0, [pc, #16]	@ (80084c8 <TlEvtReceived+0x44>)
 80084b6:	f000 ff23 	bl	8009300 <hci_notify_asynch_evt>
  }

  return;
 80084ba:	bf00      	nop
}
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	200003f0 	.word	0x200003f0
 80084c8:	20000060 	.word	0x20000060

080084cc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a05      	ldr	r2, [pc, #20]	@ (80084ec <hci_register_io_bus+0x20>)
 80084d8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a04      	ldr	r2, [pc, #16]	@ (80084f0 <hci_register_io_bus+0x24>)
 80084de:	611a      	str	r2, [r3, #16]

  return;
 80084e0:	bf00      	nop
}
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	080087e5 	.word	0x080087e5
 80084f0:	0800884d 	.word	0x0800884d

080084f4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	4a08      	ldr	r2, [pc, #32]	@ (8008524 <shci_init+0x30>)
 8008504:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008506:	4a08      	ldr	r2, [pc, #32]	@ (8008528 <shci_init+0x34>)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800850c:	4806      	ldr	r0, [pc, #24]	@ (8008528 <shci_init+0x34>)
 800850e:	f000 f915 	bl	800873c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4618      	mov	r0, r3
 8008518:	f000 f898 	bl	800864c <TlInit>

  return;
 800851c:	bf00      	nop
}
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20000420 	.word	0x20000420
 8008528:	20000400 	.word	0x20000400

0800852c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008532:	4822      	ldr	r0, [pc, #136]	@ (80085bc <shci_user_evt_proc+0x90>)
 8008534:	f000 fb96 	bl	8008c64 <LST_is_empty>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d12b      	bne.n	8008596 <shci_user_evt_proc+0x6a>
 800853e:	4b20      	ldr	r3, [pc, #128]	@ (80085c0 <shci_user_evt_proc+0x94>)
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d027      	beq.n	8008596 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008546:	f107 030c 	add.w	r3, r7, #12
 800854a:	4619      	mov	r1, r3
 800854c:	481b      	ldr	r0, [pc, #108]	@ (80085bc <shci_user_evt_proc+0x90>)
 800854e:	f000 fc18 	bl	8008d82 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008552:	4b1c      	ldr	r3, [pc, #112]	@ (80085c4 <shci_user_evt_proc+0x98>)
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00c      	beq.n	8008574 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800855e:	2301      	movs	r3, #1
 8008560:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008562:	4b18      	ldr	r3, [pc, #96]	@ (80085c4 <shci_user_evt_proc+0x98>)
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	1d3a      	adds	r2, r7, #4
 8008568:	4610      	mov	r0, r2
 800856a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800856c:	793a      	ldrb	r2, [r7, #4]
 800856e:	4b14      	ldr	r3, [pc, #80]	@ (80085c0 <shci_user_evt_proc+0x94>)
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	e002      	b.n	800857a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008574:	4b12      	ldr	r3, [pc, #72]	@ (80085c0 <shci_user_evt_proc+0x94>)
 8008576:	2201      	movs	r2, #1
 8008578:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800857a:	4b11      	ldr	r3, [pc, #68]	@ (80085c0 <shci_user_evt_proc+0x94>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d004      	beq.n	800858c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fa71 	bl	8008a6c <TL_MM_EvtDone>
 800858a:	e004      	b.n	8008596 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4619      	mov	r1, r3
 8008590:	480a      	ldr	r0, [pc, #40]	@ (80085bc <shci_user_evt_proc+0x90>)
 8008592:	f000 fb89 	bl	8008ca8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008596:	4809      	ldr	r0, [pc, #36]	@ (80085bc <shci_user_evt_proc+0x90>)
 8008598:	f000 fb64 	bl	8008c64 <LST_is_empty>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d107      	bne.n	80085b2 <shci_user_evt_proc+0x86>
 80085a2:	4b07      	ldr	r3, [pc, #28]	@ (80085c0 <shci_user_evt_proc+0x94>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80085aa:	4804      	ldr	r0, [pc, #16]	@ (80085bc <shci_user_evt_proc+0x90>)
 80085ac:	f7f8 fa82 	bl	8000ab4 <shci_notify_asynch_evt>
  }


  return;
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
}
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000070 	.word	0x20000070
 80085c0:	20000080 	.word	0x20000080
 80085c4:	20000400 	.word	0x20000400

080085c8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60ba      	str	r2, [r7, #8]
 80085d0:	607b      	str	r3, [r7, #4]
 80085d2:	4603      	mov	r3, r0
 80085d4:	81fb      	strh	r3, [r7, #14]
 80085d6:	460b      	mov	r3, r1
 80085d8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80085da:	2000      	movs	r0, #0
 80085dc:	f000 f868 	bl	80086b0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80085e0:	4b17      	ldr	r3, [pc, #92]	@ (8008640 <shci_send+0x78>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	89fa      	ldrh	r2, [r7, #14]
 80085e6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80085ea:	4b15      	ldr	r3, [pc, #84]	@ (8008640 <shci_send+0x78>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	7b7a      	ldrb	r2, [r7, #13]
 80085f0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80085f2:	4b13      	ldr	r3, [pc, #76]	@ (8008640 <shci_send+0x78>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	330c      	adds	r3, #12
 80085f8:	7b7a      	ldrb	r2, [r7, #13]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 ff15 	bl	800a42c <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8008602:	4b10      	ldr	r3, [pc, #64]	@ (8008644 <shci_send+0x7c>)
 8008604:	2201      	movs	r2, #1
 8008606:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8008608:	4b0f      	ldr	r3, [pc, #60]	@ (8008648 <shci_send+0x80>)
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	2100      	movs	r1, #0
 800860e:	2000      	movs	r0, #0
 8008610:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008612:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8008616:	f7f8 fa64 	bl	8000ae2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f103 0008 	add.w	r0, r3, #8
 8008620:	4b07      	ldr	r3, [pc, #28]	@ (8008640 <shci_send+0x78>)
 8008622:	6819      	ldr	r1, [r3, #0]
 8008624:	4b06      	ldr	r3, [pc, #24]	@ (8008640 <shci_send+0x78>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	789b      	ldrb	r3, [r3, #2]
 800862a:	3303      	adds	r3, #3
 800862c:	461a      	mov	r2, r3
 800862e:	f001 fefd 	bl	800a42c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008632:	2001      	movs	r0, #1
 8008634:	f000 f83c 	bl	80086b0 <Cmd_SetStatus>

  return;
 8008638:	bf00      	nop
}
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	2000007c 	.word	0x2000007c
 8008644:	20000424 	.word	0x20000424
 8008648:	20000400 	.word	0x20000400

0800864c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008654:	4a10      	ldr	r2, [pc, #64]	@ (8008698 <TlInit+0x4c>)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800865a:	4810      	ldr	r0, [pc, #64]	@ (800869c <TlInit+0x50>)
 800865c:	f000 faf2 	bl	8008c44 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008660:	2001      	movs	r0, #1
 8008662:	f000 f825 	bl	80086b0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008666:	4b0e      	ldr	r3, [pc, #56]	@ (80086a0 <TlInit+0x54>)
 8008668:	2201      	movs	r2, #1
 800866a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800866c:	4b0d      	ldr	r3, [pc, #52]	@ (80086a4 <TlInit+0x58>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00c      	beq.n	800868e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008678:	4b0b      	ldr	r3, [pc, #44]	@ (80086a8 <TlInit+0x5c>)
 800867a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800867c:	4b0b      	ldr	r3, [pc, #44]	@ (80086ac <TlInit+0x60>)
 800867e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008680:	4b08      	ldr	r3, [pc, #32]	@ (80086a4 <TlInit+0x58>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f107 020c 	add.w	r2, r7, #12
 8008688:	4610      	mov	r0, r2
 800868a:	4798      	blx	r3
  }

  return;
 800868c:	bf00      	nop
 800868e:	bf00      	nop
}
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	2000007c 	.word	0x2000007c
 800869c:	20000070 	.word	0x20000070
 80086a0:	20000080 	.word	0x20000080
 80086a4:	20000400 	.word	0x20000400
 80086a8:	08008701 	.word	0x08008701
 80086ac:	08008719 	.word	0x08008719

080086b0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80086ba:	79fb      	ldrb	r3, [r7, #7]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10b      	bne.n	80086d8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80086c0:	4b0d      	ldr	r3, [pc, #52]	@ (80086f8 <Cmd_SetStatus+0x48>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80086c8:	4b0b      	ldr	r3, [pc, #44]	@ (80086f8 <Cmd_SetStatus+0x48>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2000      	movs	r0, #0
 80086ce:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80086d0:	4b0a      	ldr	r3, [pc, #40]	@ (80086fc <Cmd_SetStatus+0x4c>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80086d6:	e00b      	b.n	80086f0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80086d8:	4b08      	ldr	r3, [pc, #32]	@ (80086fc <Cmd_SetStatus+0x4c>)
 80086da:	2201      	movs	r2, #1
 80086dc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80086de:	4b06      	ldr	r3, [pc, #24]	@ (80086f8 <Cmd_SetStatus+0x48>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d004      	beq.n	80086f0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80086e6:	4b04      	ldr	r3, [pc, #16]	@ (80086f8 <Cmd_SetStatus+0x48>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2001      	movs	r0, #1
 80086ec:	4798      	blx	r3
  return;
 80086ee:	bf00      	nop
 80086f0:	bf00      	nop
}
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	20000420 	.word	0x20000420
 80086fc:	20000078 	.word	0x20000078

08008700 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008708:	2000      	movs	r0, #0
 800870a:	f7f8 f9df 	bl	8000acc <shci_cmd_resp_release>

  return;
 800870e:	bf00      	nop
}
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	4805      	ldr	r0, [pc, #20]	@ (8008738 <TlUserEvtReceived+0x20>)
 8008724:	f000 fae6 	bl	8008cf4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008728:	4803      	ldr	r0, [pc, #12]	@ (8008738 <TlUserEvtReceived+0x20>)
 800872a:	f7f8 f9c3 	bl	8000ab4 <shci_notify_asynch_evt>

  return;
 800872e:	bf00      	nop
}
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	20000070 	.word	0x20000070

0800873c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a05      	ldr	r2, [pc, #20]	@ (800875c <shci_register_io_bus+0x20>)
 8008748:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a04      	ldr	r2, [pc, #16]	@ (8008760 <shci_register_io_bus+0x24>)
 800874e:	611a      	str	r2, [r3, #16]

  return;
 8008750:	bf00      	nop
}
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	080088f9 	.word	0x080088f9
 8008760:	0800894d 	.word	0x0800894d

08008764 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008768:	f001 fa98 	bl	8009c9c <HW_IPCC_Enable>

  return;
 800876c:	bf00      	nop
}
 800876e:	bd80      	pop	{r7, pc}

08008770 <TL_Init>:


void TL_Init( void )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008774:	4b10      	ldr	r3, [pc, #64]	@ (80087b8 <TL_Init+0x48>)
 8008776:	4a11      	ldr	r2, [pc, #68]	@ (80087bc <TL_Init+0x4c>)
 8008778:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800877a:	4b0f      	ldr	r3, [pc, #60]	@ (80087b8 <TL_Init+0x48>)
 800877c:	4a10      	ldr	r2, [pc, #64]	@ (80087c0 <TL_Init+0x50>)
 800877e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008780:	4b0d      	ldr	r3, [pc, #52]	@ (80087b8 <TL_Init+0x48>)
 8008782:	4a10      	ldr	r2, [pc, #64]	@ (80087c4 <TL_Init+0x54>)
 8008784:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008786:	4b0c      	ldr	r3, [pc, #48]	@ (80087b8 <TL_Init+0x48>)
 8008788:	4a0f      	ldr	r2, [pc, #60]	@ (80087c8 <TL_Init+0x58>)
 800878a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800878c:	4b0a      	ldr	r3, [pc, #40]	@ (80087b8 <TL_Init+0x48>)
 800878e:	4a0f      	ldr	r2, [pc, #60]	@ (80087cc <TL_Init+0x5c>)
 8008790:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008792:	4b09      	ldr	r3, [pc, #36]	@ (80087b8 <TL_Init+0x48>)
 8008794:	4a0e      	ldr	r2, [pc, #56]	@ (80087d0 <TL_Init+0x60>)
 8008796:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008798:	4b07      	ldr	r3, [pc, #28]	@ (80087b8 <TL_Init+0x48>)
 800879a:	4a0e      	ldr	r2, [pc, #56]	@ (80087d4 <TL_Init+0x64>)
 800879c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800879e:	4b06      	ldr	r3, [pc, #24]	@ (80087b8 <TL_Init+0x48>)
 80087a0:	4a0d      	ldr	r2, [pc, #52]	@ (80087d8 <TL_Init+0x68>)
 80087a2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80087a4:	4b04      	ldr	r3, [pc, #16]	@ (80087b8 <TL_Init+0x48>)
 80087a6:	4a0d      	ldr	r2, [pc, #52]	@ (80087dc <TL_Init+0x6c>)
 80087a8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80087aa:	4b03      	ldr	r3, [pc, #12]	@ (80087b8 <TL_Init+0x48>)
 80087ac:	4a0c      	ldr	r2, [pc, #48]	@ (80087e0 <TL_Init+0x70>)
 80087ae:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80087b0:	f001 fa88 	bl	8009cc4 <HW_IPCC_Init>

  return;
 80087b4:	bf00      	nop
}
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20030000 	.word	0x20030000
 80087bc:	20030028 	.word	0x20030028
 80087c0:	20030048 	.word	0x20030048
 80087c4:	20030058 	.word	0x20030058
 80087c8:	20030068 	.word	0x20030068
 80087cc:	20030070 	.word	0x20030070
 80087d0:	20030078 	.word	0x20030078
 80087d4:	20030080 	.word	0x20030080
 80087d8:	2003009c 	.word	0x2003009c
 80087dc:	200300a0 	.word	0x200300a0
 80087e0:	200300ac 	.word	0x200300ac

080087e4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80087f0:	4811      	ldr	r0, [pc, #68]	@ (8008838 <TL_BLE_Init+0x54>)
 80087f2:	f000 fa27 	bl	8008c44 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80087f6:	4b11      	ldr	r3, [pc, #68]	@ (800883c <TL_BLE_Init+0x58>)
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	689a      	ldr	r2, [r3, #8]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	4a0c      	ldr	r2, [pc, #48]	@ (8008840 <TL_BLE_Init+0x5c>)
 8008810:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	4a08      	ldr	r2, [pc, #32]	@ (8008838 <TL_BLE_Init+0x54>)
 8008816:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008818:	f001 fa88 	bl	8009d2c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a08      	ldr	r2, [pc, #32]	@ (8008844 <TL_BLE_Init+0x60>)
 8008822:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	4a07      	ldr	r2, [pc, #28]	@ (8008848 <TL_BLE_Init+0x64>)
 800882a:	6013      	str	r3, [r2, #0]

  return 0;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	200300c8 	.word	0x200300c8
 800883c:	20030000 	.word	0x20030000
 8008840:	20030a58 	.word	0x20030a58
 8008844:	20000430 	.word	0x20000430
 8008848:	20000434 	.word	0x20000434

0800884c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008858:	4b09      	ldr	r3, [pc, #36]	@ (8008880 <TL_BLE_SendCmd+0x34>)
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2201      	movs	r2, #1
 8008860:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008862:	4b07      	ldr	r3, [pc, #28]	@ (8008880 <TL_BLE_SendCmd+0x34>)
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4619      	mov	r1, r3
 800886a:	2001      	movs	r0, #1
 800886c:	f000 f96c 	bl	8008b48 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008870:	f001 fa66 	bl	8009d40 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	20030000 	.word	0x20030000

08008884 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800888a:	e01c      	b.n	80088c6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800888c:	1d3b      	adds	r3, r7, #4
 800888e:	4619      	mov	r1, r3
 8008890:	4812      	ldr	r0, [pc, #72]	@ (80088dc <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008892:	f000 fa76 	bl	8008d82 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	7a5b      	ldrb	r3, [r3, #9]
 800889a:	2b0f      	cmp	r3, #15
 800889c:	d003      	beq.n	80088a6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	7a5b      	ldrb	r3, [r3, #9]
 80088a2:	2b0e      	cmp	r3, #14
 80088a4:	d105      	bne.n	80088b2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4619      	mov	r1, r3
 80088aa:	2002      	movs	r0, #2
 80088ac:	f000 f94c 	bl	8008b48 <OutputDbgTrace>
 80088b0:	e004      	b.n	80088bc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4619      	mov	r1, r3
 80088b6:	2003      	movs	r0, #3
 80088b8:	f000 f946 	bl	8008b48 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80088bc:	4b08      	ldr	r3, [pc, #32]	@ (80088e0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	4610      	mov	r0, r2
 80088c4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80088c6:	4805      	ldr	r0, [pc, #20]	@ (80088dc <HW_IPCC_BLE_RxEvtNot+0x58>)
 80088c8:	f000 f9cc 	bl	8008c64 <LST_is_empty>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0dc      	beq.n	800888c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80088d2:	bf00      	nop
}
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	200300c8 	.word	0x200300c8
 80088e0:	20000430 	.word	0x20000430

080088e4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80088e8:	4b02      	ldr	r3, [pc, #8]	@ (80088f4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4798      	blx	r3

  return;
 80088ee:	bf00      	nop
}
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20000434 	.word	0x20000434

080088f8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008904:	480d      	ldr	r0, [pc, #52]	@ (800893c <TL_SYS_Init+0x44>)
 8008906:	f000 f99d 	bl	8008c44 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800890a:	4b0d      	ldr	r3, [pc, #52]	@ (8008940 <TL_SYS_Init+0x48>)
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	4a08      	ldr	r2, [pc, #32]	@ (800893c <TL_SYS_Init+0x44>)
 800891c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800891e:	f001 fa2f 	bl	8009d80 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a07      	ldr	r2, [pc, #28]	@ (8008944 <TL_SYS_Init+0x4c>)
 8008928:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	4a06      	ldr	r2, [pc, #24]	@ (8008948 <TL_SYS_Init+0x50>)
 8008930:	6013      	str	r3, [r2, #0]

  return 0;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	200300d0 	.word	0x200300d0
 8008940:	20030000 	.word	0x20030000
 8008944:	20000438 	.word	0x20000438
 8008948:	2000043c 	.word	0x2000043c

0800894c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008958:	4b09      	ldr	r3, [pc, #36]	@ (8008980 <TL_SYS_SendCmd+0x34>)
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2210      	movs	r2, #16
 8008960:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008962:	4b07      	ldr	r3, [pc, #28]	@ (8008980 <TL_SYS_SendCmd+0x34>)
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4619      	mov	r1, r3
 800896a:	2004      	movs	r0, #4
 800896c:	f000 f8ec 	bl	8008b48 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008970:	f001 fa10 	bl	8009d94 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20030000 	.word	0x20030000

08008984 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008988:	4b07      	ldr	r3, [pc, #28]	@ (80089a8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4619      	mov	r1, r3
 8008990:	2005      	movs	r0, #5
 8008992:	f000 f8d9 	bl	8008b48 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008996:	4b05      	ldr	r3, [pc, #20]	@ (80089ac <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a03      	ldr	r2, [pc, #12]	@ (80089a8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800899c:	68d2      	ldr	r2, [r2, #12]
 800899e:	6812      	ldr	r2, [r2, #0]
 80089a0:	4610      	mov	r0, r2
 80089a2:	4798      	blx	r3

  return;
 80089a4:	bf00      	nop
}
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	20030000 	.word	0x20030000
 80089ac:	20000438 	.word	0x20000438

080089b0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80089b6:	e00e      	b.n	80089d6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80089b8:	1d3b      	adds	r3, r7, #4
 80089ba:	4619      	mov	r1, r3
 80089bc:	480b      	ldr	r0, [pc, #44]	@ (80089ec <HW_IPCC_SYS_EvtNot+0x3c>)
 80089be:	f000 f9e0 	bl	8008d82 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4619      	mov	r1, r3
 80089c6:	2006      	movs	r0, #6
 80089c8:	f000 f8be 	bl	8008b48 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80089cc:	4b08      	ldr	r3, [pc, #32]	@ (80089f0 <HW_IPCC_SYS_EvtNot+0x40>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	4610      	mov	r0, r2
 80089d4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80089d6:	4805      	ldr	r0, [pc, #20]	@ (80089ec <HW_IPCC_SYS_EvtNot+0x3c>)
 80089d8:	f000 f944 	bl	8008c64 <LST_is_empty>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0ea      	beq.n	80089b8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80089e2:	bf00      	nop
}
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	200300d0 	.word	0x200300d0
 80089f0:	2000043c 	.word	0x2000043c

080089f4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80089fc:	4817      	ldr	r0, [pc, #92]	@ (8008a5c <TL_MM_Init+0x68>)
 80089fe:	f000 f921 	bl	8008c44 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008a02:	4817      	ldr	r0, [pc, #92]	@ (8008a60 <TL_MM_Init+0x6c>)
 8008a04:	f000 f91e 	bl	8008c44 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008a08:	4b16      	ldr	r3, [pc, #88]	@ (8008a64 <TL_MM_Init+0x70>)
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	4a16      	ldr	r2, [pc, #88]	@ (8008a68 <TL_MM_Init+0x74>)
 8008a0e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008a10:	4b15      	ldr	r3, [pc, #84]	@ (8008a68 <TL_MM_Init+0x74>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6892      	ldr	r2, [r2, #8]
 8008a18:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008a1a:	4b13      	ldr	r3, [pc, #76]	@ (8008a68 <TL_MM_Init+0x74>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	68d2      	ldr	r2, [r2, #12]
 8008a22:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008a24:	4b10      	ldr	r3, [pc, #64]	@ (8008a68 <TL_MM_Init+0x74>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a0c      	ldr	r2, [pc, #48]	@ (8008a5c <TL_MM_Init+0x68>)
 8008a2a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8008a68 <TL_MM_Init+0x74>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	6812      	ldr	r2, [r2, #0]
 8008a34:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008a36:	4b0c      	ldr	r3, [pc, #48]	@ (8008a68 <TL_MM_Init+0x74>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6852      	ldr	r2, [r2, #4]
 8008a3e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008a40:	4b09      	ldr	r3, [pc, #36]	@ (8008a68 <TL_MM_Init+0x74>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6912      	ldr	r2, [r2, #16]
 8008a48:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008a4a:	4b07      	ldr	r3, [pc, #28]	@ (8008a68 <TL_MM_Init+0x74>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	6952      	ldr	r2, [r2, #20]
 8008a52:	619a      	str	r2, [r3, #24]

  return;
 8008a54:	bf00      	nop
}
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	200300b8 	.word	0x200300b8
 8008a60:	20000428 	.word	0x20000428
 8008a64:	20030000 	.word	0x20030000
 8008a68:	20000440 	.word	0x20000440

08008a6c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008a74:	6879      	ldr	r1, [r7, #4]
 8008a76:	4807      	ldr	r0, [pc, #28]	@ (8008a94 <TL_MM_EvtDone+0x28>)
 8008a78:	f000 f93c 	bl	8008cf4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008a7c:	6879      	ldr	r1, [r7, #4]
 8008a7e:	2000      	movs	r0, #0
 8008a80:	f000 f862 	bl	8008b48 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008a84:	4804      	ldr	r0, [pc, #16]	@ (8008a98 <TL_MM_EvtDone+0x2c>)
 8008a86:	f001 f9ab 	bl	8009de0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008a8a:	bf00      	nop
}
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20000428 	.word	0x20000428
 8008a98:	08008a9d 	.word	0x08008a9d

08008a9c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008aa2:	e00c      	b.n	8008abe <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008aa4:	1d3b      	adds	r3, r7, #4
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	480a      	ldr	r0, [pc, #40]	@ (8008ad4 <SendFreeBuf+0x38>)
 8008aaa:	f000 f96a 	bl	8008d82 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008aae:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad8 <SendFreeBuf+0x3c>)
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 f91b 	bl	8008cf4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008abe:	4805      	ldr	r0, [pc, #20]	@ (8008ad4 <SendFreeBuf+0x38>)
 8008ac0:	f000 f8d0 	bl	8008c64 <LST_is_empty>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0ec      	beq.n	8008aa4 <SendFreeBuf+0x8>
  }

  return;
 8008aca:	bf00      	nop
}
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20000428 	.word	0x20000428
 8008ad8:	20030000 	.word	0x20030000

08008adc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008ae0:	4805      	ldr	r0, [pc, #20]	@ (8008af8 <TL_TRACES_Init+0x1c>)
 8008ae2:	f000 f8af 	bl	8008c44 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008ae6:	4b05      	ldr	r3, [pc, #20]	@ (8008afc <TL_TRACES_Init+0x20>)
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	4a03      	ldr	r2, [pc, #12]	@ (8008af8 <TL_TRACES_Init+0x1c>)
 8008aec:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008aee:	f001 f9a9 	bl	8009e44 <HW_IPCC_TRACES_Init>

  return;
 8008af2:	bf00      	nop
}
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	200300c0 	.word	0x200300c0
 8008afc:	20030000 	.word	0x20030000

08008b00 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008b06:	e008      	b.n	8008b1a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008b08:	1d3b      	adds	r3, r7, #4
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	4808      	ldr	r0, [pc, #32]	@ (8008b30 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008b0e:	f000 f938 	bl	8008d82 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 f80d 	bl	8008b34 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008b1a:	4805      	ldr	r0, [pc, #20]	@ (8008b30 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008b1c:	f000 f8a2 	bl	8008c64 <LST_is_empty>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0f0      	beq.n	8008b08 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008b26:	bf00      	nop
}
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200300c0 	.word	0x200300c0

08008b34 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	6039      	str	r1, [r7, #0]
 8008b52:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008b54:	79fb      	ldrb	r3, [r7, #7]
 8008b56:	2b06      	cmp	r3, #6
 8008b58:	d845      	bhi.n	8008be6 <OutputDbgTrace+0x9e>
 8008b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b60 <OutputDbgTrace+0x18>)
 8008b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b60:	08008b7d 	.word	0x08008b7d
 8008b64:	08008ba1 	.word	0x08008ba1
 8008b68:	08008ba7 	.word	0x08008ba7
 8008b6c:	08008bbb 	.word	0x08008bbb
 8008b70:	08008bc7 	.word	0x08008bc7
 8008b74:	08008bcd 	.word	0x08008bcd
 8008b78:	08008bdb 	.word	0x08008bdb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	7a5b      	ldrb	r3, [r3, #9]
 8008b84:	2bff      	cmp	r3, #255	@ 0xff
 8008b86:	d005      	beq.n	8008b94 <OutputDbgTrace+0x4c>
 8008b88:	2bff      	cmp	r3, #255	@ 0xff
 8008b8a:	dc05      	bgt.n	8008b98 <OutputDbgTrace+0x50>
 8008b8c:	2b0e      	cmp	r3, #14
 8008b8e:	d005      	beq.n	8008b9c <OutputDbgTrace+0x54>
 8008b90:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008b92:	e001      	b.n	8008b98 <OutputDbgTrace+0x50>
          break;
 8008b94:	bf00      	nop
 8008b96:	e027      	b.n	8008be8 <OutputDbgTrace+0xa0>
          break;
 8008b98:	bf00      	nop
 8008b9a:	e025      	b.n	8008be8 <OutputDbgTrace+0xa0>
          break;
 8008b9c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008b9e:	e023      	b.n	8008be8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008ba4:	e020      	b.n	8008be8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	7a5b      	ldrb	r3, [r3, #9]
 8008bae:	2b0e      	cmp	r3, #14
 8008bb0:	d001      	beq.n	8008bb6 <OutputDbgTrace+0x6e>
 8008bb2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008bb4:	e000      	b.n	8008bb8 <OutputDbgTrace+0x70>
          break;
 8008bb6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008bb8:	e016      	b.n	8008be8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	7a5b      	ldrb	r3, [r3, #9]
 8008bc2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008bc4:	e010      	b.n	8008be8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008bca:	e00d      	b.n	8008be8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	7a5b      	ldrb	r3, [r3, #9]
 8008bd4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008bd6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008bd8:	e006      	b.n	8008be8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	7a5b      	ldrb	r3, [r3, #9]
 8008be2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008be4:	e000      	b.n	8008be8 <OutputDbgTrace+0xa0>

    default:
      break;
 8008be6:	bf00      	nop
  }

  return;
 8008be8:	bf00      	nop
}
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8008c3c <OTP_Read+0x48>)
 8008c00:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008c02:	e002      	b.n	8008c0a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3b08      	subs	r3, #8
 8008c08:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3307      	adds	r3, #7
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	79fa      	ldrb	r2, [r7, #7]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d003      	beq.n	8008c1e <OTP_Read+0x2a>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	4a09      	ldr	r2, [pc, #36]	@ (8008c40 <OTP_Read+0x4c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d1f2      	bne.n	8008c04 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	3307      	adds	r3, #7
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	79fa      	ldrb	r2, [r7, #7]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d001      	beq.n	8008c2e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	1fff73f8 	.word	0x1fff73f8
 8008c40:	1fff7000 	.word	0x1fff7000

08008c44 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	605a      	str	r2, [r3, #4]
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c72:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c76:	b672      	cpsid	i
}
 8008c78:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d102      	bne.n	8008c8a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008c84:	2301      	movs	r3, #1
 8008c86:	75fb      	strb	r3, [r7, #23]
 8008c88:	e001      	b.n	8008c8e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	75fb      	strb	r3, [r7, #23]
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	f383 8810 	msr	PRIMASK, r3
}
 8008c98:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	371c      	adds	r7, #28
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8008cb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008cba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cbc:	b672      	cpsid	i
}
 8008cbe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	605a      	str	r2, [r3, #4]
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	f383 8810 	msr	PRIMASK, r3
}
 8008ce6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008ce8:	bf00      	nop
 8008cea:	371c      	adds	r7, #28
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8008d02:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d04:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008d06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d08:	b672      	cpsid	i
}
 8008d0a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f383 8810 	msr	PRIMASK, r3
}
 8008d32:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008d34:	bf00      	nop
 8008d36:	371c      	adds	r7, #28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d48:	f3ef 8310 	mrs	r3, PRIMASK
 8008d4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008d50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d52:	b672      	cpsid	i
}
 8008d54:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	6812      	ldr	r2, [r2, #0]
 8008d5e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	6852      	ldr	r2, [r2, #4]
 8008d68:	605a      	str	r2, [r3, #4]
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f383 8810 	msr	PRIMASK, r3
}
 8008d74:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008d76:	bf00      	nop
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b086      	sub	sp, #24
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d90:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d92:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008d94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d96:	b672      	cpsid	i
}
 8008d98:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff ffca 	bl	8008d40 <LST_remove_node>
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f383 8810 	msr	PRIMASK, r3
}
 8008db6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008db8:	bf00      	nop
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008dc4:	4b03      	ldr	r3, [pc, #12]	@ (8008dd4 <LL_FLASH_GetUDN+0x14>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	1fff7580 	.word	0x1fff7580

08008dd8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008ddc:	4b03      	ldr	r3, [pc, #12]	@ (8008dec <LL_FLASH_GetDeviceID+0x14>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	b2db      	uxtb	r3, r3
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	1fff7584 	.word	0x1fff7584

08008df0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008df0:	b480      	push	{r7}
 8008df2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008df4:	4b03      	ldr	r3, [pc, #12]	@ (8008e04 <LL_FLASH_GetSTCompanyID+0x14>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	0a1b      	lsrs	r3, r3, #8
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	1fff7584 	.word	0x1fff7584

08008e08 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008e08:	b5b0      	push	{r4, r5, r7, lr}
 8008e0a:	b090      	sub	sp, #64	@ 0x40
 8008e0c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008e0e:	2392      	movs	r3, #146	@ 0x92
 8008e10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008e14:	4b23      	ldr	r3, [pc, #140]	@ (8008ea4 <APP_BLE_Init+0x9c>)
 8008e16:	1d3c      	adds	r4, r7, #4
 8008e18:	461d      	mov	r5, r3
 8008e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008e2a:	c403      	stmia	r4!, {r0, r1}
 8008e2c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008e2e:	f000 f90f 	bl	8009050 <Ble_Tl_Init>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008e32:	4a1d      	ldr	r2, [pc, #116]	@ (8008ea8 <APP_BLE_Init+0xa0>)
 8008e34:	2100      	movs	r1, #0
 8008e36:	2002      	movs	r0, #2
 8008e38:	f001 f98e 	bl	800a158 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008e3c:	1d3b      	adds	r3, r7, #4
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff f8ca 	bl	8007fd8 <SHCI_C2_BLE_Init>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8008e4a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <APP_BLE_Init+0x4e>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8008e52:	f7f8 fec4 	bl	8001bde <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008e56:	f000 f911 	bl	800907c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008e5a:	f7ff f817 	bl	8007e8c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008e5e:	4b13      	ldr	r3, [pc, #76]	@ (8008eac <APP_BLE_Init+0xa4>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008e66:	4b11      	ldr	r3, [pc, #68]	@ (8008eac <APP_BLE_Init+0xa4>)
 8008e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e6c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008e6e:	4a10      	ldr	r2, [pc, #64]	@ (8008eb0 <APP_BLE_Init+0xa8>)
 8008e70:	2100      	movs	r1, #0
 8008e72:	2001      	movs	r0, #1
 8008e74:	f001 f970 	bl	800a158 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008e78:	2006      	movs	r0, #6
 8008e7a:	f7fe fe7a 	bl	8007b72 <aci_hal_set_radio_activity_mask>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008e84:	f000 faf8 	bl	8009478 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008e88:	4b08      	ldr	r3, [pc, #32]	@ (8008eac <APP_BLE_Init+0xa4>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008e8e:	4b07      	ldr	r3, [pc, #28]	@ (8008eac <APP_BLE_Init+0xa4>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008e94:	2001      	movs	r0, #1
 8008e96:	f000 f9a5 	bl	80091e4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008e9a:	bf00      	nop
}
 8008e9c:	3740      	adds	r7, #64	@ 0x40
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	0800a49c 	.word	0x0800a49c
 8008ea8:	080081f5 	.word	0x080081f5
 8008eac:	2000044c 	.word	0x2000044c
 8008eb0:	080092cd 	.word	0x080092cd

08008eb4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b08a      	sub	sp, #40	@ 0x28
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008ebc:	2392      	movs	r3, #146	@ 0x92
 8008ebe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	2bff      	cmp	r3, #255	@ 0xff
 8008ece:	d053      	beq.n	8008f78 <SVCCTL_App_Notification+0xc4>
 8008ed0:	2bff      	cmp	r3, #255	@ 0xff
 8008ed2:	f300 80af 	bgt.w	8009034 <SVCCTL_App_Notification+0x180>
 8008ed6:	2b05      	cmp	r3, #5
 8008ed8:	d002      	beq.n	8008ee0 <SVCCTL_App_Notification+0x2c>
 8008eda:	2b3e      	cmp	r3, #62	@ 0x3e
 8008edc:	d020      	beq.n	8008f20 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008ede:	e0a9      	b.n	8009034 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	3302      	adds	r3, #2
 8008ee4:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	4b55      	ldr	r3, [pc, #340]	@ (8009044 <SVCCTL_App_Notification+0x190>)
 8008ef0:	8adb      	ldrh	r3, [r3, #22]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d106      	bne.n	8008f04 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008ef6:	4b53      	ldr	r3, [pc, #332]	@ (8009044 <SVCCTL_App_Notification+0x190>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008efc:	4b51      	ldr	r3, [pc, #324]	@ (8009044 <SVCCTL_App_Notification+0x190>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008f04:	2001      	movs	r0, #1
 8008f06:	f000 f96d 	bl	80091e4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8008f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8009048 <SVCCTL_App_Notification+0x194>)
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008f10:	4b4c      	ldr	r3, [pc, #304]	@ (8009044 <SVCCTL_App_Notification+0x190>)
 8008f12:	8ada      	ldrh	r2, [r3, #22]
 8008f14:	4b4c      	ldr	r3, [pc, #304]	@ (8009048 <SVCCTL_App_Notification+0x194>)
 8008f16:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8008f18:	484b      	ldr	r0, [pc, #300]	@ (8009048 <SVCCTL_App_Notification+0x194>)
 8008f1a:	f000 fa7d 	bl	8009418 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008f1e:	e08c      	b.n	800903a <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	3302      	adds	r3, #2
 8008f24:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d001      	beq.n	8008f32 <SVCCTL_App_Notification+0x7e>
 8008f2e:	2b03      	cmp	r3, #3
          break;
 8008f30:	e021      	b.n	8008f76 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	3301      	adds	r3, #1
 8008f36:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008f38:	4b42      	ldr	r3, [pc, #264]	@ (8009044 <SVCCTL_App_Notification+0x190>)
 8008f3a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d104      	bne.n	8008f4c <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008f42:	4b40      	ldr	r3, [pc, #256]	@ (8009044 <SVCCTL_App_Notification+0x190>)
 8008f44:	2206      	movs	r2, #6
 8008f46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8008f4a:	e003      	b.n	8008f54 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8009044 <SVCCTL_App_Notification+0x190>)
 8008f4e:	2205      	movs	r2, #5
 8008f50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	4b39      	ldr	r3, [pc, #228]	@ (8009044 <SVCCTL_App_Notification+0x190>)
 8008f5e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8008f60:	4b39      	ldr	r3, [pc, #228]	@ (8009048 <SVCCTL_App_Notification+0x194>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008f66:	4b37      	ldr	r3, [pc, #220]	@ (8009044 <SVCCTL_App_Notification+0x190>)
 8008f68:	8ada      	ldrh	r2, [r3, #22]
 8008f6a:	4b37      	ldr	r3, [pc, #220]	@ (8009048 <SVCCTL_App_Notification+0x194>)
 8008f6c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8008f6e:	4836      	ldr	r0, [pc, #216]	@ (8009048 <SVCCTL_App_Notification+0x194>)
 8008f70:	f000 fa52 	bl	8009418 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008f74:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008f76:	e060      	b.n	800903a <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	3302      	adds	r3, #2
 8008f7c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d047      	beq.n	800901c <SVCCTL_App_Notification+0x168>
 8008f8c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8008f90:	4293      	cmp	r3, r2
 8008f92:	dc51      	bgt.n	8009038 <SVCCTL_App_Notification+0x184>
 8008f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f98:	d046      	beq.n	8009028 <SVCCTL_App_Notification+0x174>
 8008f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f9e:	dc4b      	bgt.n	8009038 <SVCCTL_App_Notification+0x184>
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	d043      	beq.n	800902c <SVCCTL_App_Notification+0x178>
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	db47      	blt.n	8009038 <SVCCTL_App_Notification+0x184>
 8008fa8:	f240 420a 	movw	r2, #1034	@ 0x40a
 8008fac:	4293      	cmp	r3, r2
 8008fae:	dc43      	bgt.n	8009038 <SVCCTL_App_Notification+0x184>
 8008fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fb4:	dd40      	ble.n	8009038 <SVCCTL_App_Notification+0x184>
 8008fb6:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8008fba:	2b09      	cmp	r3, #9
 8008fbc:	d83c      	bhi.n	8009038 <SVCCTL_App_Notification+0x184>
 8008fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc4 <SVCCTL_App_Notification+0x110>)
 8008fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc4:	08009015 	.word	0x08009015
 8008fc8:	08008fed 	.word	0x08008fed
 8008fcc:	08009039 	.word	0x08009039
 8008fd0:	08009039 	.word	0x08009039
 8008fd4:	08009039 	.word	0x08009039
 8008fd8:	08009039 	.word	0x08009039
 8008fdc:	08009031 	.word	0x08009031
 8008fe0:	08009039 	.word	0x08009039
 8008fe4:	08009001 	.word	0x08009001
 8008fe8:	08009031 	.word	0x08009031
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008fec:	4b15      	ldr	r3, [pc, #84]	@ (8009044 <SVCCTL_App_Notification+0x190>)
 8008fee:	8adb      	ldrh	r3, [r3, #22]
 8008ff0:	4916      	ldr	r1, [pc, #88]	@ (800904c <SVCCTL_App_Notification+0x198>)
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fd ffbf 	bl	8006f76 <aci_gap_pass_key_resp>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8008ffe:	e018      	b.n	8009032 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8009000:	4b10      	ldr	r3, [pc, #64]	@ (8009044 <SVCCTL_App_Notification+0x190>)
 8009002:	8adb      	ldrh	r3, [r3, #22]
 8009004:	2101      	movs	r1, #1
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe f95f 	bl	80072ca <aci_gap_numeric_comparison_value_confirm_yesno>
 800900c:	4603      	mov	r3, r0
 800900e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8009012:	e00e      	b.n	8009032 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	3302      	adds	r3, #2
 8009018:	61bb      	str	r3, [r7, #24]
          break;
 800901a:	e00a      	b.n	8009032 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800901c:	4b09      	ldr	r3, [pc, #36]	@ (8009044 <SVCCTL_App_Notification+0x190>)
 800901e:	8adb      	ldrh	r3, [r3, #22]
 8009020:	4618      	mov	r0, r3
 8009022:	f7fe fc65 	bl	80078f0 <aci_gatt_confirm_indication>
        break;
 8009026:	e004      	b.n	8009032 <SVCCTL_App_Notification+0x17e>
          break;
 8009028:	bf00      	nop
 800902a:	e005      	b.n	8009038 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800902c:	bf00      	nop
 800902e:	e003      	b.n	8009038 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009030:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009032:	e001      	b.n	8009038 <SVCCTL_App_Notification+0x184>
      break;
 8009034:	bf00      	nop
 8009036:	e000      	b.n	800903a <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009038:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800903a:	2301      	movs	r3, #1
}
 800903c:	4618      	mov	r0, r3
 800903e:	3728      	adds	r7, #40	@ 0x28
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	2000044c 	.word	0x2000044c
 8009048:	200004d0 	.word	0x200004d0
 800904c:	0001b207 	.word	0x0001b207

08009050 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009056:	4b06      	ldr	r3, [pc, #24]	@ (8009070 <Ble_Tl_Init+0x20>)
 8009058:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800905a:	4b06      	ldr	r3, [pc, #24]	@ (8009074 <Ble_Tl_Init+0x24>)
 800905c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800905e:	463b      	mov	r3, r7
 8009060:	4619      	mov	r1, r3
 8009062:	4805      	ldr	r0, [pc, #20]	@ (8009078 <Ble_Tl_Init+0x28>)
 8009064:	f7ff f8aa 	bl	80081bc <hci_init>

  return;
 8009068:	bf00      	nop
}
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	200300d8 	.word	0x200300d8
 8009074:	0800937d 	.word	0x0800937d
 8009078:	08009345 	.word	0x08009345

0800907c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800907c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800907e:	b08d      	sub	sp, #52	@ 0x34
 8009080:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8009082:	2300      	movs	r3, #0
 8009084:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009086:	2392      	movs	r3, #146	@ 0x92
 8009088:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800908a:	f7fe fdc6 	bl	8007c1a <hci_reset>
 800908e:	4603      	mov	r3, r0
 8009090:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8009092:	f000 f8d7 	bl	8009244 <BleGetBdAddress>
 8009096:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	2106      	movs	r1, #6
 800909c:	2000      	movs	r0, #0
 800909e:	f7fe fc7c 	bl	800799a <aci_hal_write_config_data>
 80090a2:	4603      	mov	r3, r0
 80090a4:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80090a6:	4a4a      	ldr	r2, [pc, #296]	@ (80091d0 <Ble_Hci_Gap_Gatt_Init+0x154>)
 80090a8:	2110      	movs	r1, #16
 80090aa:	2018      	movs	r0, #24
 80090ac:	f7fe fc75 	bl	800799a <aci_hal_write_config_data>
 80090b0:	4603      	mov	r3, r0
 80090b2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80090b4:	4a47      	ldr	r2, [pc, #284]	@ (80091d4 <Ble_Hci_Gap_Gatt_Init+0x158>)
 80090b6:	2110      	movs	r1, #16
 80090b8:	2008      	movs	r0, #8
 80090ba:	f7fe fc6e 	bl	800799a <aci_hal_write_config_data>
 80090be:	4603      	mov	r3, r0
 80090c0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80090c2:	2118      	movs	r1, #24
 80090c4:	2001      	movs	r0, #1
 80090c6:	f7fe fced 	bl	8007aa4 <aci_hal_set_tx_power_level>
 80090ca:	4603      	mov	r3, r0
 80090cc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80090ce:	f7fe f963 	bl	8007398 <aci_gatt_init>
 80090d2:	4603      	mov	r3, r0
 80090d4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	f043 0301 	orr.w	r3, r3, #1
 80090e0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d01f      	beq.n	8009128 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80090e8:	4b3b      	ldr	r3, [pc, #236]	@ (80091d8 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 80090ea:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80090ec:	1dba      	adds	r2, r7, #6
 80090ee:	7bf8      	ldrb	r0, [r7, #15]
 80090f0:	1cbb      	adds	r3, r7, #2
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	1d3b      	adds	r3, r7, #4
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	4613      	mov	r3, r2
 80090fa:	2209      	movs	r2, #9
 80090fc:	2100      	movs	r1, #0
 80090fe:	f7fd ffa1 	bl	8007044 <aci_gap_init>
 8009102:	4603      	mov	r3, r0
 8009104:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8009106:	88fc      	ldrh	r4, [r7, #6]
 8009108:	88bd      	ldrh	r5, [r7, #4]
 800910a:	68b8      	ldr	r0, [r7, #8]
 800910c:	f7f7 f836 	bl	800017c <strlen>
 8009110:	4603      	mov	r3, r0
 8009112:	b2da      	uxtb	r2, r3
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	4613      	mov	r3, r2
 800911a:	2200      	movs	r2, #0
 800911c:	4629      	mov	r1, r5
 800911e:	4620      	mov	r0, r4
 8009120:	f7fe fb3d 	bl	800779e <aci_gatt_update_char_value>
 8009124:	4603      	mov	r3, r0
 8009126:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8009128:	88f8      	ldrh	r0, [r7, #6]
 800912a:	8879      	ldrh	r1, [r7, #2]
 800912c:	463b      	mov	r3, r7
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	2302      	movs	r3, #2
 8009132:	2200      	movs	r2, #0
 8009134:	f7fe fb33 	bl	800779e <aci_gatt_update_char_value>
 8009138:	4603      	mov	r3, r0
 800913a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800913c:	2202      	movs	r2, #2
 800913e:	2102      	movs	r1, #2
 8009140:	2000      	movs	r0, #0
 8009142:	f7fe fd8e 	bl	8007c62 <hci_le_set_default_phy>
 8009146:	4603      	mov	r3, r0
 8009148:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800914a:	4b24      	ldr	r3, [pc, #144]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800914c:	2201      	movs	r2, #1
 800914e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8009150:	4b22      	ldr	r3, [pc, #136]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	4618      	mov	r0, r3
 8009156:	f7fd fdf6 	bl	8006d46 <aci_gap_set_io_capability>
 800915a:	4603      	mov	r3, r0
 800915c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800915e:	4b1f      	ldr	r3, [pc, #124]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009160:	2201      	movs	r2, #1
 8009162:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009164:	4b1d      	ldr	r3, [pc, #116]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009166:	2208      	movs	r2, #8
 8009168:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800916a:	4b1c      	ldr	r3, [pc, #112]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800916c:	2210      	movs	r2, #16
 800916e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009170:	4b1a      	ldr	r3, [pc, #104]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009172:	2200      	movs	r2, #0
 8009174:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8009176:	4b19      	ldr	r3, [pc, #100]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009178:	4a19      	ldr	r2, [pc, #100]	@ (80091e0 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800917a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800917c:	4b17      	ldr	r3, [pc, #92]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800917e:	2200      	movs	r2, #0
 8009180:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8009182:	4b16      	ldr	r3, [pc, #88]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009184:	789c      	ldrb	r4, [r3, #2]
 8009186:	4b15      	ldr	r3, [pc, #84]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009188:	785d      	ldrb	r5, [r3, #1]
 800918a:	4b14      	ldr	r3, [pc, #80]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800918c:	791b      	ldrb	r3, [r3, #4]
 800918e:	4a13      	ldr	r2, [pc, #76]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009190:	7952      	ldrb	r2, [r2, #5]
 8009192:	4912      	ldr	r1, [pc, #72]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009194:	78c9      	ldrb	r1, [r1, #3]
 8009196:	4811      	ldr	r0, [pc, #68]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009198:	6880      	ldr	r0, [r0, #8]
 800919a:	2600      	movs	r6, #0
 800919c:	9604      	str	r6, [sp, #16]
 800919e:	9003      	str	r0, [sp, #12]
 80091a0:	9102      	str	r1, [sp, #8]
 80091a2:	9201      	str	r2, [sp, #4]
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	2300      	movs	r3, #0
 80091a8:	2201      	movs	r2, #1
 80091aa:	4629      	mov	r1, r5
 80091ac:	4620      	mov	r0, r4
 80091ae:	f7fd fe1e 	bl	8006dee <aci_gap_set_authentication_requirement>
 80091b2:	4603      	mov	r3, r0
 80091b4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80091b6:	4b09      	ldr	r3, [pc, #36]	@ (80091dc <Ble_Hci_Gap_Gatt_Init+0x160>)
 80091b8:	789b      	ldrb	r3, [r3, #2]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 80091be:	f7fe f860 	bl	8007282 <aci_gap_configure_filter_accept_list>
 80091c2:	4603      	mov	r3, r0
 80091c4:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80091c6:	bf00      	nop
 80091c8:	371c      	adds	r7, #28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091ce:	bf00      	nop
 80091d0:	0800a6b4 	.word	0x0800a6b4
 80091d4:	0800a6c4 	.word	0x0800a6c4
 80091d8:	0800a4d8 	.word	0x0800a4d8
 80091dc:	2000044c 	.word	0x2000044c
 80091e0:	0001b207 	.word	0x0001b207

080091e4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b08c      	sub	sp, #48	@ 0x30
 80091e8:	af08      	add	r7, sp, #32
 80091ea:	4603      	mov	r3, r0
 80091ec:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80091ee:	2392      	movs	r3, #146	@ 0x92
 80091f0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80091f2:	4a12      	ldr	r2, [pc, #72]	@ (800923c <Adv_Request+0x58>)
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80091fa:	2300      	movs	r3, #0
 80091fc:	9306      	str	r3, [sp, #24]
 80091fe:	2300      	movs	r3, #0
 8009200:	9305      	str	r3, [sp, #20]
 8009202:	2300      	movs	r3, #0
 8009204:	9304      	str	r3, [sp, #16]
 8009206:	2300      	movs	r3, #0
 8009208:	9303      	str	r3, [sp, #12]
 800920a:	2300      	movs	r3, #0
 800920c:	9302      	str	r3, [sp, #8]
 800920e:	2300      	movs	r3, #0
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	2300      	movs	r3, #0
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	2300      	movs	r3, #0
 8009218:	22a0      	movs	r2, #160	@ 0xa0
 800921a:	2180      	movs	r1, #128	@ 0x80
 800921c:	2000      	movs	r0, #0
 800921e:	f7fd fc98 	bl	8006b52 <aci_gap_set_discoverable>
 8009222:	4603      	mov	r3, r0
 8009224:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8009226:	4906      	ldr	r1, [pc, #24]	@ (8009240 <Adv_Request+0x5c>)
 8009228:	200b      	movs	r0, #11
 800922a:	f7fd ffb8 	bl	800719e <aci_gap_update_adv_data>
 800922e:	4603      	mov	r3, r0
 8009230:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8009232:	bf00      	nop
}
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	2000044c 	.word	0x2000044c
 8009240:	20000020 	.word	0x20000020

08009244 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800924a:	f7ff fdb9 	bl	8008dc0 <LL_FLASH_GetUDN>
 800924e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009256:	d023      	beq.n	80092a0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8009258:	f7ff fdca 	bl	8008df0 <LL_FLASH_GetSTCompanyID>
 800925c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800925e:	f7ff fdbb 	bl	8008dd8 <LL_FLASH_GetDeviceID>
 8009262:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	b2da      	uxtb	r2, r3
 8009268:	4b16      	ldr	r3, [pc, #88]	@ (80092c4 <BleGetBdAddress+0x80>)
 800926a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	0a1b      	lsrs	r3, r3, #8
 8009270:	b2da      	uxtb	r2, r3
 8009272:	4b14      	ldr	r3, [pc, #80]	@ (80092c4 <BleGetBdAddress+0x80>)
 8009274:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	b2da      	uxtb	r2, r3
 800927a:	4b12      	ldr	r3, [pc, #72]	@ (80092c4 <BleGetBdAddress+0x80>)
 800927c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	b2da      	uxtb	r2, r3
 8009282:	4b10      	ldr	r3, [pc, #64]	@ (80092c4 <BleGetBdAddress+0x80>)
 8009284:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	0a1b      	lsrs	r3, r3, #8
 800928a:	b2da      	uxtb	r2, r3
 800928c:	4b0d      	ldr	r3, [pc, #52]	@ (80092c4 <BleGetBdAddress+0x80>)
 800928e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	0c1b      	lsrs	r3, r3, #16
 8009294:	b2da      	uxtb	r2, r3
 8009296:	4b0b      	ldr	r3, [pc, #44]	@ (80092c4 <BleGetBdAddress+0x80>)
 8009298:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800929a:	4b0a      	ldr	r3, [pc, #40]	@ (80092c4 <BleGetBdAddress+0x80>)
 800929c:	617b      	str	r3, [r7, #20]
 800929e:	e00b      	b.n	80092b8 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80092a0:	2000      	movs	r0, #0
 80092a2:	f7ff fca7 	bl	8008bf4 <OTP_Read>
 80092a6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	617b      	str	r3, [r7, #20]
 80092b2:	e001      	b.n	80092b8 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80092b4:	4b04      	ldr	r3, [pc, #16]	@ (80092c8 <BleGetBdAddress+0x84>)
 80092b6:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80092b8:	697b      	ldr	r3, [r7, #20]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20000444 	.word	0x20000444
 80092c8:	0800a6ac 	.word	0x0800a6ac

080092cc <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80092d2:	4b0a      	ldr	r3, [pc, #40]	@ (80092fc <Adv_Cancel+0x30>)
 80092d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80092d8:	2b05      	cmp	r3, #5
 80092da:	d00a      	beq.n	80092f2 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80092dc:	2392      	movs	r3, #146	@ 0x92
 80092de:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80092e0:	f7fd fc13 	bl	8006b0a <aci_gap_set_non_discoverable>
 80092e4:	4603      	mov	r3, r0
 80092e6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80092e8:	4b04      	ldr	r3, [pc, #16]	@ (80092fc <Adv_Cancel+0x30>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
}
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	2000044c 	.word	0x2000044c

08009300 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8009308:	2100      	movs	r1, #0
 800930a:	2002      	movs	r0, #2
 800930c:	f000 ff46 	bl	800a19c <UTIL_SEQ_SetTask>

  return;
 8009310:	bf00      	nop
}
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009320:	2001      	movs	r0, #1
 8009322:	f000 ffa7 	bl	800a274 <UTIL_SEQ_SetEvt>

  return;
 8009326:	bf00      	nop
}
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b082      	sub	sp, #8
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009336:	2001      	movs	r0, #1
 8009338:	f000 ffbc 	bl	800a2b4 <UTIL_SEQ_WaitEvt>

  return;
 800933c:	bf00      	nop
}
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	3308      	adds	r3, #8
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe fdea 	bl	8007f30 <SVCCTL_UserEvtRx>
 800935c:	4603      	mov	r3, r0
 800935e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8009360:	7afb      	ldrb	r3, [r7, #11]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2201      	movs	r2, #1
 800936a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800936c:	e003      	b.n	8009376 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	701a      	strb	r2, [r3, #0]
  return;
 8009374:	bf00      	nop
}
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	4603      	mov	r3, r0
 8009384:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8009386:	79fb      	ldrb	r3, [r7, #7]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <BLE_StatusNot+0x16>
 800938c:	2b01      	cmp	r3, #1
 800938e:	d006      	beq.n	800939e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8009390:	e00b      	b.n	80093aa <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009392:	2303      	movs	r3, #3
 8009394:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f000 ff2c 	bl	800a1f4 <UTIL_SEQ_PauseTask>
      break;
 800939c:	e005      	b.n	80093aa <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800939e:	2303      	movs	r3, #3
 80093a0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f000 ff46 	bl	800a234 <UTIL_SEQ_ResumeTask>
      break;
 80093a8:	bf00      	nop
  }

  return;
 80093aa:	bf00      	nop
}
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	2b06      	cmp	r3, #6
 80093c2:	d823      	bhi.n	800940c <Custom_STM_App_Notification+0x58>
 80093c4:	a201      	add	r2, pc, #4	@ (adr r2, 80093cc <Custom_STM_App_Notification+0x18>)
 80093c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ca:	bf00      	nop
 80093cc:	0800940d 	.word	0x0800940d
 80093d0:	080093e9 	.word	0x080093e9
 80093d4:	080093f3 	.word	0x080093f3
 80093d8:	0800940d 	.word	0x0800940d
 80093dc:	080093fb 	.word	0x080093fb
 80093e0:	08009405 	.word	0x08009405
 80093e4:	0800940d 	.word	0x0800940d
      /* USER CODE END CUSTOM_STM_TMPCHAR_READ_EVT */
      break;

    case CUSTOM_STM_TMPCHAR_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TMPCHAR_NOTIFY_ENABLED_EVT */
    	UTIL_SEQ_SetTask(1<<CFG_TASK_READ_TEMPERATURE, CFG_SCH_PRIO_0);
 80093e8:	2100      	movs	r1, #0
 80093ea:	2008      	movs	r0, #8
 80093ec:	f000 fed6 	bl	800a19c <UTIL_SEQ_SetTask>
      /* USER CODE END CUSTOM_STM_TMPCHAR_NOTIFY_ENABLED_EVT */
      break;
 80093f0:	e00d      	b.n	800940e <Custom_STM_App_Notification+0x5a>

    case CUSTOM_STM_TMPCHAR_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TMPCHAR_NOTIFY_DISABLED_EVT */
    	UTIL_SEQ_PauseTask(1<<CFG_TASK_READ_TEMPERATURE);
 80093f2:	2008      	movs	r0, #8
 80093f4:	f000 fefe 	bl	800a1f4 <UTIL_SEQ_PauseTask>
      /* USER CODE END CUSTOM_STM_TMPCHAR_NOTIFY_DISABLED_EVT */
      break;
 80093f8:	e009      	b.n	800940e <Custom_STM_App_Notification+0x5a>
      /* USER CODE END CUSTOM_STM_BATTCHAR_READ_EVT */
      break;

    case CUSTOM_STM_BATTCHAR_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BATTCHAR_NOTIFY_ENABLED_EVT */
    	UTIL_SEQ_SetTask(1<<CFG_TASK_READ_BATTERY, CFG_SCH_PRIO_0);
 80093fa:	2100      	movs	r1, #0
 80093fc:	2010      	movs	r0, #16
 80093fe:	f000 fecd 	bl	800a19c <UTIL_SEQ_SetTask>
      /* USER CODE END CUSTOM_STM_BATTCHAR_NOTIFY_ENABLED_EVT */
      break;
 8009402:	e004      	b.n	800940e <Custom_STM_App_Notification+0x5a>

    case CUSTOM_STM_BATTCHAR_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BATTCHAR_NOTIFY_DISABLED_EVT */
    	UTIL_SEQ_PauseTask(1<<CFG_TASK_READ_BATTERY);
 8009404:	2010      	movs	r0, #16
 8009406:	f000 fef5 	bl	800a1f4 <UTIL_SEQ_PauseTask>
      /* USER CODE END CUSTOM_STM_BATTCHAR_NOTIFY_DISABLED_EVT */
      break;
 800940a:	e000      	b.n	800940e <Custom_STM_App_Notification+0x5a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800940c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800940e:	bf00      	nop
}
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop

08009418 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <Custom_APP_Notification+0x16>
 8009428:	2b01      	cmp	r3, #1
 800942a:	d017      	beq.n	800945c <Custom_APP_Notification+0x44>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800942c:	e01d      	b.n	800946a <Custom_APP_Notification+0x52>
    	UTIL_SEQ_SetTask(1<<CFG_TASK_READ_TEMPERATURE, CFG_SCH_PRIO_0);
 800942e:	2100      	movs	r1, #0
 8009430:	2008      	movs	r0, #8
 8009432:	f000 feb3 	bl	800a19c <UTIL_SEQ_SetTask>
    	HW_TS_Start(Custom_App_Context.TMP_TIMER_ID, TMPTIMER_INTERVAL);
 8009436:	4b0f      	ldr	r3, [pc, #60]	@ (8009474 <Custom_APP_Notification+0x5c>)
 8009438:	789b      	ldrb	r3, [r3, #2]
 800943a:	f241 0102 	movw	r1, #4098	@ 0x1002
 800943e:	4618      	mov	r0, r3
 8009440:	f7f8 f946 	bl	80016d0 <HW_TS_Start>
    	UTIL_SEQ_SetTask(1<<CFG_TASK_READ_BATTERY, CFG_SCH_PRIO_0);
 8009444:	2100      	movs	r1, #0
 8009446:	2010      	movs	r0, #16
 8009448:	f000 fea8 	bl	800a19c <UTIL_SEQ_SetTask>
    	HW_TS_Start(Custom_App_Context.BATT_TIMER_ID, BATTTIMER_INTERVAL);
 800944c:	4b09      	ldr	r3, [pc, #36]	@ (8009474 <Custom_APP_Notification+0x5c>)
 800944e:	78db      	ldrb	r3, [r3, #3]
 8009450:	f243 0107 	movw	r1, #12295	@ 0x3007
 8009454:	4618      	mov	r0, r3
 8009456:	f7f8 f93b 	bl	80016d0 <HW_TS_Start>
      break;
 800945a:	e006      	b.n	800946a <Custom_APP_Notification+0x52>
    	UTIL_SEQ_PauseTask(1<<CFG_TASK_READ_TEMPERATURE);
 800945c:	2008      	movs	r0, #8
 800945e:	f000 fec9 	bl	800a1f4 <UTIL_SEQ_PauseTask>
    	UTIL_SEQ_PauseTask(1<<CFG_TASK_READ_BATTERY);
 8009462:	2010      	movs	r0, #16
 8009464:	f000 fec6 	bl	800a1f4 <UTIL_SEQ_PauseTask>
      break;
 8009468:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800946a:	bf00      	nop
}
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	200004d4 	.word	0x200004d4

08009478 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	UTIL_SEQ_RegTask(1<<CFG_TASK_READ_TEMPERATURE, UTIL_SEQ_RFU, readTemperature);
 800947c:	4a0b      	ldr	r2, [pc, #44]	@ (80094ac <Custom_APP_Init+0x34>)
 800947e:	2100      	movs	r1, #0
 8009480:	2008      	movs	r0, #8
 8009482:	f000 fe69 	bl	800a158 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_READ_BATTERY, UTIL_SEQ_RFU, readBattery);
 8009486:	4a0a      	ldr	r2, [pc, #40]	@ (80094b0 <Custom_APP_Init+0x38>)
 8009488:	2100      	movs	r1, #0
 800948a:	2010      	movs	r0, #16
 800948c:	f000 fe64 	bl	800a158 <UTIL_SEQ_RegTask>
	HW_TS_Create(CFG_TIM_TMPSVC_ID_ISR, &(Custom_App_Context.TMP_TIMER_ID), hw_ts_SingleShot, TMP_TIMER_ISR);
 8009490:	4b08      	ldr	r3, [pc, #32]	@ (80094b4 <Custom_APP_Init+0x3c>)
 8009492:	2200      	movs	r2, #0
 8009494:	4908      	ldr	r1, [pc, #32]	@ (80094b8 <Custom_APP_Init+0x40>)
 8009496:	2001      	movs	r0, #1
 8009498:	f7f8 f81c 	bl	80014d4 <HW_TS_Create>
	HW_TS_Create(CFG_TIM_BATTSVC_ID_ISR, &(Custom_App_Context.BATT_TIMER_ID), hw_ts_SingleShot, BATT_TIMER_ISR);
 800949c:	4b07      	ldr	r3, [pc, #28]	@ (80094bc <Custom_APP_Init+0x44>)
 800949e:	2200      	movs	r2, #0
 80094a0:	4907      	ldr	r1, [pc, #28]	@ (80094c0 <Custom_APP_Init+0x48>)
 80094a2:	2002      	movs	r0, #2
 80094a4:	f7f8 f816 	bl	80014d4 <HW_TS_Create>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 80094a8:	bf00      	nop
}
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	08009525 	.word	0x08009525
 80094b0:	08009599 	.word	0x08009599
 80094b4:	080094e5 	.word	0x080094e5
 80094b8:	200004d6 	.word	0x200004d6
 80094bc:	08009505 	.word	0x08009505
 80094c0:	200004d7 	.word	0x200004d7

080094c4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN FD */

/* System callback Function definitions */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
	Custom_App_Context.ADC_CONV_CPLT = 1;
 80094cc:	4b04      	ldr	r3, [pc, #16]	@ (80094e0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80094ce:	2201      	movs	r2, #1
 80094d0:	711a      	strb	r2, [r3, #4]
}
 80094d2:	bf00      	nop
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	200004d4 	.word	0x200004d4

080094e4 <TMP_TIMER_ISR>:

/* User ISR Function definitions */
void TMP_TIMER_ISR(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
	HW_TS_Stop(Custom_App_Context.TMP_TIMER_ID);
 80094e8:	4b05      	ldr	r3, [pc, #20]	@ (8009500 <TMP_TIMER_ISR+0x1c>)
 80094ea:	789b      	ldrb	r3, [r3, #2]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7f8 f86b 	bl	80015c8 <HW_TS_Stop>
	UTIL_SEQ_SetTask(1<<CFG_TASK_READ_TEMPERATURE, CFG_SCH_PRIO_0);
 80094f2:	2100      	movs	r1, #0
 80094f4:	2008      	movs	r0, #8
 80094f6:	f000 fe51 	bl	800a19c <UTIL_SEQ_SetTask>
	return;
 80094fa:	bf00      	nop
}
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	200004d4 	.word	0x200004d4

08009504 <BATT_TIMER_ISR>:

void BATT_TIMER_ISR(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
	HW_TS_Stop(Custom_App_Context.BATT_TIMER_ID);
 8009508:	4b05      	ldr	r3, [pc, #20]	@ (8009520 <BATT_TIMER_ISR+0x1c>)
 800950a:	78db      	ldrb	r3, [r3, #3]
 800950c:	4618      	mov	r0, r3
 800950e:	f7f8 f85b 	bl	80015c8 <HW_TS_Stop>
	UTIL_SEQ_SetTask(1<<CFG_TASK_READ_BATTERY, CFG_SCH_PRIO_0);
 8009512:	2100      	movs	r1, #0
 8009514:	2010      	movs	r0, #16
 8009516:	f000 fe41 	bl	800a19c <UTIL_SEQ_SetTask>
	return;
 800951a:	bf00      	nop
}
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	200004d4 	.word	0x200004d4

08009524 <readTemperature>:

/* User Function definitions */
void readTemperature(void)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) (Custom_App_Context.ADC_BUFF), 2);
 8009528:	2202      	movs	r2, #2
 800952a:	4917      	ldr	r1, [pc, #92]	@ (8009588 <readTemperature+0x64>)
 800952c:	4817      	ldr	r0, [pc, #92]	@ (800958c <readTemperature+0x68>)
 800952e:	f7f9 fdb5 	bl	800309c <HAL_ADC_Start_DMA>
	while(!Custom_App_Context.ADC_CONV_CPLT);
 8009532:	bf00      	nop
 8009534:	4b16      	ldr	r3, [pc, #88]	@ (8009590 <readTemperature+0x6c>)
 8009536:	791b      	ldrb	r3, [r3, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0fb      	beq.n	8009534 <readTemperature+0x10>
	Custom_App_Context.TMP_ADC_VALUE = (uint16_t) Custom_App_Context.ADC_BUFF[0];
 800953c:	4b14      	ldr	r3, [pc, #80]	@ (8009590 <readTemperature+0x6c>)
 800953e:	88da      	ldrh	r2, [r3, #6]
 8009540:	4b13      	ldr	r3, [pc, #76]	@ (8009590 <readTemperature+0x6c>)
 8009542:	815a      	strh	r2, [r3, #10]
	UpdateCharData[0] = (uint8_t)((Custom_App_Context.TMP_ADC_VALUE >> 8) & 0x0F);
 8009544:	4b12      	ldr	r3, [pc, #72]	@ (8009590 <readTemperature+0x6c>)
 8009546:	895b      	ldrh	r3, [r3, #10]
 8009548:	0a1b      	lsrs	r3, r3, #8
 800954a:	b29b      	uxth	r3, r3
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 030f 	and.w	r3, r3, #15
 8009552:	b2da      	uxtb	r2, r3
 8009554:	4b0f      	ldr	r3, [pc, #60]	@ (8009594 <readTemperature+0x70>)
 8009556:	701a      	strb	r2, [r3, #0]
	UpdateCharData[1] = (uint8_t)(Custom_App_Context.TMP_ADC_VALUE & 0xFF);
 8009558:	4b0d      	ldr	r3, [pc, #52]	@ (8009590 <readTemperature+0x6c>)
 800955a:	895b      	ldrh	r3, [r3, #10]
 800955c:	b2da      	uxtb	r2, r3
 800955e:	4b0d      	ldr	r3, [pc, #52]	@ (8009594 <readTemperature+0x70>)
 8009560:	705a      	strb	r2, [r3, #1]
	Custom_STM_App_Update_Char(CUSTOM_STM_TMPCHAR, (uint8_t *)UpdateCharData);
 8009562:	490c      	ldr	r1, [pc, #48]	@ (8009594 <readTemperature+0x70>)
 8009564:	2000      	movs	r0, #0
 8009566:	f000 f9e9 	bl	800993c <Custom_STM_App_Update_Char>
	APP_DBG_MSG("UpdateCharData[0]: %u", UpdateCharData[0]);
	APP_DBG_MSG("UpdateCharData[1]: %u", UpdateCharData[1]);
	HAL_ADC_Stop(&hadc1);
 800956a:	4808      	ldr	r0, [pc, #32]	@ (800958c <readTemperature+0x68>)
 800956c:	f7f9 fd62 	bl	8003034 <HAL_ADC_Stop>
	Custom_App_Context.ADC_CONV_CPLT = 0;
 8009570:	4b07      	ldr	r3, [pc, #28]	@ (8009590 <readTemperature+0x6c>)
 8009572:	2200      	movs	r2, #0
 8009574:	711a      	strb	r2, [r3, #4]
	HW_TS_Start(Custom_App_Context.TMP_TIMER_ID, TMPTIMER_INTERVAL);
 8009576:	4b06      	ldr	r3, [pc, #24]	@ (8009590 <readTemperature+0x6c>)
 8009578:	789b      	ldrb	r3, [r3, #2]
 800957a:	f241 0102 	movw	r1, #4098	@ 0x1002
 800957e:	4618      	mov	r0, r3
 8009580:	f7f8 f8a6 	bl	80016d0 <HW_TS_Start>
	return;
 8009584:	bf00      	nop
}
 8009586:	bd80      	pop	{r7, pc}
 8009588:	200004da 	.word	0x200004da
 800958c:	20000144 	.word	0x20000144
 8009590:	200004d4 	.word	0x200004d4
 8009594:	200004e4 	.word	0x200004e4

08009598 <readBattery>:

void readBattery(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) (Custom_App_Context.ADC_BUFF), 2);
 800959c:	2202      	movs	r2, #2
 800959e:	4917      	ldr	r1, [pc, #92]	@ (80095fc <readBattery+0x64>)
 80095a0:	4817      	ldr	r0, [pc, #92]	@ (8009600 <readBattery+0x68>)
 80095a2:	f7f9 fd7b 	bl	800309c <HAL_ADC_Start_DMA>
	while(!Custom_App_Context.ADC_CONV_CPLT);
 80095a6:	bf00      	nop
 80095a8:	4b16      	ldr	r3, [pc, #88]	@ (8009604 <readBattery+0x6c>)
 80095aa:	791b      	ldrb	r3, [r3, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d0fb      	beq.n	80095a8 <readBattery+0x10>
	Custom_App_Context.BATT_ADC_VALUE = (uint16_t) Custom_App_Context.ADC_BUFF[1];
 80095b0:	4b14      	ldr	r3, [pc, #80]	@ (8009604 <readBattery+0x6c>)
 80095b2:	891a      	ldrh	r2, [r3, #8]
 80095b4:	4b13      	ldr	r3, [pc, #76]	@ (8009604 <readBattery+0x6c>)
 80095b6:	819a      	strh	r2, [r3, #12]
	UpdateCharData[0] = (uint8_t)((Custom_App_Context.BATT_ADC_VALUE >> 8) & 0x0F);
 80095b8:	4b12      	ldr	r3, [pc, #72]	@ (8009604 <readBattery+0x6c>)
 80095ba:	899b      	ldrh	r3, [r3, #12]
 80095bc:	0a1b      	lsrs	r3, r3, #8
 80095be:	b29b      	uxth	r3, r3
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	f003 030f 	and.w	r3, r3, #15
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009608 <readBattery+0x70>)
 80095ca:	701a      	strb	r2, [r3, #0]
	UpdateCharData[1] = (uint8_t)(Custom_App_Context.BATT_ADC_VALUE & 0xFF);
 80095cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009604 <readBattery+0x6c>)
 80095ce:	899b      	ldrh	r3, [r3, #12]
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009608 <readBattery+0x70>)
 80095d4:	705a      	strb	r2, [r3, #1]
	Custom_STM_App_Update_Char(CUSTOM_STM_BATTCHAR, (uint8_t *)UpdateCharData);
 80095d6:	490c      	ldr	r1, [pc, #48]	@ (8009608 <readBattery+0x70>)
 80095d8:	2001      	movs	r0, #1
 80095da:	f000 f9af 	bl	800993c <Custom_STM_App_Update_Char>
	HAL_ADC_Stop(&hadc1);
 80095de:	4808      	ldr	r0, [pc, #32]	@ (8009600 <readBattery+0x68>)
 80095e0:	f7f9 fd28 	bl	8003034 <HAL_ADC_Stop>
	Custom_App_Context.ADC_CONV_CPLT = 0;
 80095e4:	4b07      	ldr	r3, [pc, #28]	@ (8009604 <readBattery+0x6c>)
 80095e6:	2200      	movs	r2, #0
 80095e8:	711a      	strb	r2, [r3, #4]
	HW_TS_Start(Custom_App_Context.BATT_TIMER_ID, BATTTIMER_INTERVAL);
 80095ea:	4b06      	ldr	r3, [pc, #24]	@ (8009604 <readBattery+0x6c>)
 80095ec:	78db      	ldrb	r3, [r3, #3]
 80095ee:	f243 0107 	movw	r1, #12295	@ 0x3007
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7f8 f86c 	bl	80016d0 <HW_TS_Start>
	return;
 80095f8:	bf00      	nop
}
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	200004da 	.word	0x200004da
 8009600:	20000144 	.word	0x20000144
 8009604:	200004d4 	.word	0x200004d4
 8009608:	200004e4 	.word	0x200004e4

0800960c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b08c      	sub	sp, #48	@ 0x30
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009614:	2300      	movs	r3, #0
 8009616:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	3301      	adds	r3, #1
 800961e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8009620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	2bff      	cmp	r3, #255	@ 0xff
 8009626:	f040 80a2 	bne.w	800976e <Custom_STM_Event_Handler+0x162>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800962a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962c:	3302      	adds	r3, #2
 800962e:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8009630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	b29b      	uxth	r3, r3
 8009636:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800963a:	2b1a      	cmp	r3, #26
 800963c:	f200 8093 	bhi.w	8009766 <Custom_STM_Event_Handler+0x15a>
 8009640:	a201      	add	r2, pc, #4	@ (adr r2, 8009648 <Custom_STM_Event_Handler+0x3c>)
 8009642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009646:	bf00      	nop
 8009648:	080096b5 	.word	0x080096b5
 800964c:	08009767 	.word	0x08009767
 8009650:	08009767 	.word	0x08009767
 8009654:	08009767 	.word	0x08009767
 8009658:	08009767 	.word	0x08009767
 800965c:	08009767 	.word	0x08009767
 8009660:	08009767 	.word	0x08009767
 8009664:	08009767 	.word	0x08009767
 8009668:	08009767 	.word	0x08009767
 800966c:	08009767 	.word	0x08009767
 8009670:	08009767 	.word	0x08009767
 8009674:	08009767 	.word	0x08009767
 8009678:	08009767 	.word	0x08009767
 800967c:	08009767 	.word	0x08009767
 8009680:	08009767 	.word	0x08009767
 8009684:	08009767 	.word	0x08009767
 8009688:	08009767 	.word	0x08009767
 800968c:	08009767 	.word	0x08009767
 8009690:	08009767 	.word	0x08009767
 8009694:	08009767 	.word	0x08009767
 8009698:	08009767 	.word	0x08009767
 800969c:	08009767 	.word	0x08009767
 80096a0:	08009767 	.word	0x08009767
 80096a4:	08009767 	.word	0x08009767
 80096a8:	08009767 	.word	0x08009767
 80096ac:	08009767 	.word	0x08009767
 80096b0:	08009749 	.word	0x08009749
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80096b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b6:	3302      	adds	r3, #2
 80096b8:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomTmpcharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	885b      	ldrh	r3, [r3, #2]
 80096be:	b29b      	uxth	r3, r3
 80096c0:	461a      	mov	r2, r3
 80096c2:	4b2e      	ldr	r3, [pc, #184]	@ (800977c <Custom_STM_Event_Handler+0x170>)
 80096c4:	885b      	ldrh	r3, [r3, #2]
 80096c6:	3302      	adds	r3, #2
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d119      	bne.n	8009700 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80096cc:	2301      	movs	r3, #1
 80096ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	7a1b      	ldrb	r3, [r3, #8]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d002      	beq.n	80096e0 <Custom_STM_Event_Handler+0xd4>
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d008      	beq.n	80096f0 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 80096de:	e032      	b.n	8009746 <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TMPCHAR_NOTIFY_DISABLED_EVT;
 80096e0:	2302      	movs	r3, #2
 80096e2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80096e4:	f107 0308 	add.w	r3, r7, #8
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff fe63 	bl	80093b4 <Custom_STM_App_Notification>
                break;
 80096ee:	e02a      	b.n	8009746 <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TMPCHAR_NOTIFY_ENABLED_EVT;
 80096f0:	2301      	movs	r3, #1
 80096f2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80096f4:	f107 0308 	add.w	r3, r7, #8
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7ff fe5b 	bl	80093b4 <Custom_STM_App_Notification>
                break;
 80096fe:	e022      	b.n	8009746 <Custom_STM_Event_Handler+0x13a>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomTmpcharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBattcharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	885b      	ldrh	r3, [r3, #2]
 8009704:	b29b      	uxth	r3, r3
 8009706:	461a      	mov	r2, r3
 8009708:	4b1c      	ldr	r3, [pc, #112]	@ (800977c <Custom_STM_Event_Handler+0x170>)
 800970a:	88db      	ldrh	r3, [r3, #6]
 800970c:	3302      	adds	r3, #2
 800970e:	429a      	cmp	r2, r3
 8009710:	d12b      	bne.n	800976a <Custom_STM_Event_Handler+0x15e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8009712:	2301      	movs	r3, #1
 8009714:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_2_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	7a1b      	ldrb	r3, [r3, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <Custom_STM_Event_Handler+0x11a>
 8009720:	2b01      	cmp	r3, #1
 8009722:	d008      	beq.n	8009736 <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_2_Char_1_default */
              break;
 8009724:	e00f      	b.n	8009746 <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BATTCHAR_NOTIFY_DISABLED_EVT;
 8009726:	2305      	movs	r3, #5
 8009728:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800972a:	f107 0308 	add.w	r3, r7, #8
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff fe40 	bl	80093b4 <Custom_STM_App_Notification>
                break;
 8009734:	e007      	b.n	8009746 <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BATTCHAR_NOTIFY_ENABLED_EVT;
 8009736:	2304      	movs	r3, #4
 8009738:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800973a:	f107 0308 	add.w	r3, r7, #8
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff fe38 	bl	80093b4 <Custom_STM_App_Notification>
                break;
 8009744:	bf00      	nop
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomBattcharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8009746:	e010      	b.n	800976a <Custom_STM_Event_Handler+0x15e>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8009748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974a:	3302      	adds	r3, #2
 800974c:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800974e:	2306      	movs	r3, #6
 8009750:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	881b      	ldrh	r3, [r3, #0]
 8009756:	b29b      	uxth	r3, r3
 8009758:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800975a:	f107 0308 	add.w	r3, r7, #8
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff fe28 	bl	80093b4 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8009764:	e002      	b.n	800976c <Custom_STM_Event_Handler+0x160>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8009766:	bf00      	nop
 8009768:	e002      	b.n	8009770 <Custom_STM_Event_Handler+0x164>
          break;
 800976a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800976c:	e000      	b.n	8009770 <Custom_STM_Event_Handler+0x164>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800976e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8009770:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8009774:	4618      	mov	r0, r3
 8009776:	3730      	adds	r7, #48	@ 0x30
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	200006e4 	.word	0x200006e4

08009780 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b08c      	sub	sp, #48	@ 0x30
 8009784:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009786:	2392      	movs	r3, #146	@ 0x92
 8009788:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800978a:	4865      	ldr	r0, [pc, #404]	@ (8009920 <SVCCTL_InitCustomSvc+0x1a0>)
 800978c:	f7fe fbb6 	bl	8007efc <SVCCTL_RegisterSvcHandler>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 8009790:	2304      	movs	r3, #4
 8009792:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_TMPSVC_UUID(uuid.Char_UUID_128);
 8009794:	238f      	movs	r3, #143	@ 0x8f
 8009796:	713b      	strb	r3, [r7, #4]
 8009798:	23e5      	movs	r3, #229	@ 0xe5
 800979a:	717b      	strb	r3, [r7, #5]
 800979c:	23b3      	movs	r3, #179	@ 0xb3
 800979e:	71bb      	strb	r3, [r7, #6]
 80097a0:	23d5      	movs	r3, #213	@ 0xd5
 80097a2:	71fb      	strb	r3, [r7, #7]
 80097a4:	232e      	movs	r3, #46	@ 0x2e
 80097a6:	723b      	strb	r3, [r7, #8]
 80097a8:	237f      	movs	r3, #127	@ 0x7f
 80097aa:	727b      	strb	r3, [r7, #9]
 80097ac:	234a      	movs	r3, #74	@ 0x4a
 80097ae:	72bb      	strb	r3, [r7, #10]
 80097b0:	2398      	movs	r3, #152	@ 0x98
 80097b2:	72fb      	strb	r3, [r7, #11]
 80097b4:	232a      	movs	r3, #42	@ 0x2a
 80097b6:	733b      	strb	r3, [r7, #12]
 80097b8:	2348      	movs	r3, #72	@ 0x48
 80097ba:	737b      	strb	r3, [r7, #13]
 80097bc:	237a      	movs	r3, #122	@ 0x7a
 80097be:	73bb      	strb	r3, [r7, #14]
 80097c0:	23cc      	movs	r3, #204	@ 0xcc
 80097c2:	73fb      	strb	r3, [r7, #15]
 80097c4:	2300      	movs	r3, #0
 80097c6:	743b      	strb	r3, [r7, #16]
 80097c8:	2300      	movs	r3, #0
 80097ca:	747b      	strb	r3, [r7, #17]
 80097cc:	2300      	movs	r3, #0
 80097ce:	74bb      	strb	r3, [r7, #18]
 80097d0:	2300      	movs	r3, #0
 80097d2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80097d4:	7dbb      	ldrb	r3, [r7, #22]
 80097d6:	1d39      	adds	r1, r7, #4
 80097d8:	4a52      	ldr	r2, [pc, #328]	@ (8009924 <SVCCTL_InitCustomSvc+0x1a4>)
 80097da:	9200      	str	r2, [sp, #0]
 80097dc:	2201      	movs	r2, #1
 80097de:	2002      	movs	r0, #2
 80097e0:	f7fd fdff 	bl	80073e2 <aci_gatt_add_service>
 80097e4:	4603      	mov	r3, r0
 80097e6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  TMPCHAR
   */
  COPY_TMPCHAR_UUID(uuid.Char_UUID_128);
 80097e8:	2319      	movs	r3, #25
 80097ea:	713b      	strb	r3, [r7, #4]
 80097ec:	23ed      	movs	r3, #237	@ 0xed
 80097ee:	717b      	strb	r3, [r7, #5]
 80097f0:	2382      	movs	r3, #130	@ 0x82
 80097f2:	71bb      	strb	r3, [r7, #6]
 80097f4:	23ae      	movs	r3, #174	@ 0xae
 80097f6:	71fb      	strb	r3, [r7, #7]
 80097f8:	23ed      	movs	r3, #237	@ 0xed
 80097fa:	723b      	strb	r3, [r7, #8]
 80097fc:	2321      	movs	r3, #33	@ 0x21
 80097fe:	727b      	strb	r3, [r7, #9]
 8009800:	234c      	movs	r3, #76	@ 0x4c
 8009802:	72bb      	strb	r3, [r7, #10]
 8009804:	239d      	movs	r3, #157	@ 0x9d
 8009806:	72fb      	strb	r3, [r7, #11]
 8009808:	2341      	movs	r3, #65	@ 0x41
 800980a:	733b      	strb	r3, [r7, #12]
 800980c:	2345      	movs	r3, #69	@ 0x45
 800980e:	737b      	strb	r3, [r7, #13]
 8009810:	2322      	movs	r3, #34	@ 0x22
 8009812:	73bb      	strb	r3, [r7, #14]
 8009814:	238e      	movs	r3, #142	@ 0x8e
 8009816:	73fb      	strb	r3, [r7, #15]
 8009818:	2300      	movs	r3, #0
 800981a:	743b      	strb	r3, [r7, #16]
 800981c:	2300      	movs	r3, #0
 800981e:	747b      	strb	r3, [r7, #17]
 8009820:	2300      	movs	r3, #0
 8009822:	74bb      	strb	r3, [r7, #18]
 8009824:	2300      	movs	r3, #0
 8009826:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTmpsvcHdle,
 8009828:	4b3e      	ldr	r3, [pc, #248]	@ (8009924 <SVCCTL_InitCustomSvc+0x1a4>)
 800982a:	8818      	ldrh	r0, [r3, #0]
 800982c:	4b3e      	ldr	r3, [pc, #248]	@ (8009928 <SVCCTL_InitCustomSvc+0x1a8>)
 800982e:	881b      	ldrh	r3, [r3, #0]
 8009830:	1d3a      	adds	r2, r7, #4
 8009832:	493e      	ldr	r1, [pc, #248]	@ (800992c <SVCCTL_InitCustomSvc+0x1ac>)
 8009834:	9105      	str	r1, [sp, #20]
 8009836:	2100      	movs	r1, #0
 8009838:	9104      	str	r1, [sp, #16]
 800983a:	2110      	movs	r1, #16
 800983c:	9103      	str	r1, [sp, #12]
 800983e:	2108      	movs	r1, #8
 8009840:	9102      	str	r1, [sp, #8]
 8009842:	2100      	movs	r1, #0
 8009844:	9101      	str	r1, [sp, #4]
 8009846:	2112      	movs	r1, #18
 8009848:	9100      	str	r1, [sp, #0]
 800984a:	2102      	movs	r1, #2
 800984c:	f7fd fe9f 	bl	800758e <aci_gatt_add_char>
 8009850:	4603      	mov	r3, r0
 8009852:	75fb      	strb	r3, [r7, #23]
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 8009854:	2304      	movs	r3, #4
 8009856:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BATTSVC_UUID(uuid.Char_UUID_128);
 8009858:	23fb      	movs	r3, #251	@ 0xfb
 800985a:	713b      	strb	r3, [r7, #4]
 800985c:	2334      	movs	r3, #52	@ 0x34
 800985e:	717b      	strb	r3, [r7, #5]
 8009860:	239b      	movs	r3, #155	@ 0x9b
 8009862:	71bb      	strb	r3, [r7, #6]
 8009864:	235f      	movs	r3, #95	@ 0x5f
 8009866:	71fb      	strb	r3, [r7, #7]
 8009868:	2380      	movs	r3, #128	@ 0x80
 800986a:	723b      	strb	r3, [r7, #8]
 800986c:	2300      	movs	r3, #0
 800986e:	727b      	strb	r3, [r7, #9]
 8009870:	2300      	movs	r3, #0
 8009872:	72bb      	strb	r3, [r7, #10]
 8009874:	2380      	movs	r3, #128	@ 0x80
 8009876:	72fb      	strb	r3, [r7, #11]
 8009878:	2300      	movs	r3, #0
 800987a:	733b      	strb	r3, [r7, #12]
 800987c:	2310      	movs	r3, #16
 800987e:	737b      	strb	r3, [r7, #13]
 8009880:	2300      	movs	r3, #0
 8009882:	73bb      	strb	r3, [r7, #14]
 8009884:	2300      	movs	r3, #0
 8009886:	73fb      	strb	r3, [r7, #15]
 8009888:	230f      	movs	r3, #15
 800988a:	743b      	strb	r3, [r7, #16]
 800988c:	2318      	movs	r3, #24
 800988e:	747b      	strb	r3, [r7, #17]
 8009890:	2300      	movs	r3, #0
 8009892:	74bb      	strb	r3, [r7, #18]
 8009894:	2300      	movs	r3, #0
 8009896:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8009898:	7dbb      	ldrb	r3, [r7, #22]
 800989a:	1d39      	adds	r1, r7, #4
 800989c:	4a24      	ldr	r2, [pc, #144]	@ (8009930 <SVCCTL_InitCustomSvc+0x1b0>)
 800989e:	9200      	str	r2, [sp, #0]
 80098a0:	2201      	movs	r2, #1
 80098a2:	2002      	movs	r0, #2
 80098a4:	f7fd fd9d 	bl	80073e2 <aci_gatt_add_service>
 80098a8:	4603      	mov	r3, r0
 80098aa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  BATTCHAR
   */
  COPY_BATTCHAR_UUID(uuid.Char_UUID_128);
 80098ac:	23fb      	movs	r3, #251	@ 0xfb
 80098ae:	713b      	strb	r3, [r7, #4]
 80098b0:	2334      	movs	r3, #52	@ 0x34
 80098b2:	717b      	strb	r3, [r7, #5]
 80098b4:	239b      	movs	r3, #155	@ 0x9b
 80098b6:	71bb      	strb	r3, [r7, #6]
 80098b8:	235f      	movs	r3, #95	@ 0x5f
 80098ba:	71fb      	strb	r3, [r7, #7]
 80098bc:	2380      	movs	r3, #128	@ 0x80
 80098be:	723b      	strb	r3, [r7, #8]
 80098c0:	2300      	movs	r3, #0
 80098c2:	727b      	strb	r3, [r7, #9]
 80098c4:	2300      	movs	r3, #0
 80098c6:	72bb      	strb	r3, [r7, #10]
 80098c8:	2380      	movs	r3, #128	@ 0x80
 80098ca:	72fb      	strb	r3, [r7, #11]
 80098cc:	2300      	movs	r3, #0
 80098ce:	733b      	strb	r3, [r7, #12]
 80098d0:	2310      	movs	r3, #16
 80098d2:	737b      	strb	r3, [r7, #13]
 80098d4:	2300      	movs	r3, #0
 80098d6:	73bb      	strb	r3, [r7, #14]
 80098d8:	2300      	movs	r3, #0
 80098da:	73fb      	strb	r3, [r7, #15]
 80098dc:	230f      	movs	r3, #15
 80098de:	743b      	strb	r3, [r7, #16]
 80098e0:	2318      	movs	r3, #24
 80098e2:	747b      	strb	r3, [r7, #17]
 80098e4:	2300      	movs	r3, #0
 80098e6:	74bb      	strb	r3, [r7, #18]
 80098e8:	2300      	movs	r3, #0
 80098ea:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBattsvcHdle,
 80098ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009924 <SVCCTL_InitCustomSvc+0x1a4>)
 80098ee:	8898      	ldrh	r0, [r3, #4]
 80098f0:	4b10      	ldr	r3, [pc, #64]	@ (8009934 <SVCCTL_InitCustomSvc+0x1b4>)
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	1d3a      	adds	r2, r7, #4
 80098f6:	4910      	ldr	r1, [pc, #64]	@ (8009938 <SVCCTL_InitCustomSvc+0x1b8>)
 80098f8:	9105      	str	r1, [sp, #20]
 80098fa:	2100      	movs	r1, #0
 80098fc:	9104      	str	r1, [sp, #16]
 80098fe:	2110      	movs	r1, #16
 8009900:	9103      	str	r1, [sp, #12]
 8009902:	2108      	movs	r1, #8
 8009904:	9102      	str	r1, [sp, #8]
 8009906:	2100      	movs	r1, #0
 8009908:	9101      	str	r1, [sp, #4]
 800990a:	2112      	movs	r1, #18
 800990c:	9100      	str	r1, [sp, #0]
 800990e:	2102      	movs	r1, #2
 8009910:	f7fd fe3d 	bl	800758e <aci_gatt_add_char>
 8009914:	4603      	mov	r3, r0
 8009916:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009918:	bf00      	nop
}
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	0800960d 	.word	0x0800960d
 8009924:	200006e4 	.word	0x200006e4
 8009928:	2000002c 	.word	0x2000002c
 800992c:	200006e6 	.word	0x200006e6
 8009930:	200006e8 	.word	0x200006e8
 8009934:	2000002e 	.word	0x2000002e
 8009938:	200006ea 	.word	0x200006ea

0800993c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af02      	add	r7, sp, #8
 8009942:	4603      	mov	r3, r0
 8009944:	6039      	str	r1, [r7, #0]
 8009946:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009948:	2392      	movs	r3, #146	@ 0x92
 800994a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800994c:	79fb      	ldrb	r3, [r7, #7]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <Custom_STM_App_Update_Char+0x1c>
 8009952:	2b01      	cmp	r3, #1
 8009954:	d010      	beq.n	8009978 <Custom_STM_App_Update_Char+0x3c>

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;

    default:
      break;
 8009956:	e01f      	b.n	8009998 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomTmpsvcHdle,
 8009958:	4b12      	ldr	r3, [pc, #72]	@ (80099a4 <Custom_STM_App_Update_Char+0x68>)
 800995a:	8818      	ldrh	r0, [r3, #0]
 800995c:	4b11      	ldr	r3, [pc, #68]	@ (80099a4 <Custom_STM_App_Update_Char+0x68>)
 800995e:	8859      	ldrh	r1, [r3, #2]
 8009960:	4b11      	ldr	r3, [pc, #68]	@ (80099a8 <Custom_STM_App_Update_Char+0x6c>)
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	b2da      	uxtb	r2, r3
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	4613      	mov	r3, r2
 800996c:	2200      	movs	r2, #0
 800996e:	f7fd ff16 	bl	800779e <aci_gatt_update_char_value>
 8009972:	4603      	mov	r3, r0
 8009974:	73fb      	strb	r3, [r7, #15]
      break;
 8009976:	e00f      	b.n	8009998 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomBattsvcHdle,
 8009978:	4b0a      	ldr	r3, [pc, #40]	@ (80099a4 <Custom_STM_App_Update_Char+0x68>)
 800997a:	8898      	ldrh	r0, [r3, #4]
 800997c:	4b09      	ldr	r3, [pc, #36]	@ (80099a4 <Custom_STM_App_Update_Char+0x68>)
 800997e:	88d9      	ldrh	r1, [r3, #6]
 8009980:	4b0a      	ldr	r3, [pc, #40]	@ (80099ac <Custom_STM_App_Update_Char+0x70>)
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	b2da      	uxtb	r2, r3
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	4613      	mov	r3, r2
 800998c:	2200      	movs	r2, #0
 800998e:	f7fd ff06 	bl	800779e <aci_gatt_update_char_value>
 8009992:	4603      	mov	r3, r0
 8009994:	73fb      	strb	r3, [r7, #15]
      break;
 8009996:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8009998:	7bfb      	ldrb	r3, [r7, #15]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	200006e4 	.word	0x200006e4
 80099a8:	2000002c 	.word	0x2000002c
 80099ac:	2000002e 	.word	0x2000002e

080099b0 <LL_PWR_EnableBootC2>:
{
 80099b0:	b480      	push	{r7}
 80099b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80099b4:	4b05      	ldr	r3, [pc, #20]	@ (80099cc <LL_PWR_EnableBootC2+0x1c>)
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	4a04      	ldr	r2, [pc, #16]	@ (80099cc <LL_PWR_EnableBootC2+0x1c>)
 80099ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099be:	60d3      	str	r3, [r2, #12]
}
 80099c0:	bf00      	nop
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	58000400 	.word	0x58000400

080099d0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80099d8:	4b06      	ldr	r3, [pc, #24]	@ (80099f4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80099da:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80099de:	4905      	ldr	r1, [pc, #20]	@ (80099f4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	58000800 	.word	0x58000800

080099f8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009a00:	4b05      	ldr	r3, [pc, #20]	@ (8009a18 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009a02:	6a1a      	ldr	r2, [r3, #32]
 8009a04:	4904      	ldr	r1, [pc, #16]	@ (8009a18 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	620b      	str	r3, [r1, #32]
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	58000800 	.word	0x58000800

08009a1c <LL_AHB3_GRP1_EnableClock>:
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009a40:	68fb      	ldr	r3, [r7, #12]
}
 8009a42:	bf00      	nop
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b085      	sub	sp, #20
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009a56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a5a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009a5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a6e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4013      	ands	r3, r2
 8009a76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009a78:	68fb      	ldr	r3, [r7, #12]
}
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <LL_C1_IPCC_EnableIT_TXF>:
{
 8009a86:	b480      	push	{r7}
 8009a88:	b083      	sub	sp, #12
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	601a      	str	r2, [r3, #0]
}
 8009a9a:	bf00      	nop
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <LL_C1_IPCC_EnableIT_RXO>:
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b083      	sub	sp, #12
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f043 0201 	orr.w	r2, r3, #1
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	601a      	str	r2, [r3, #0]
}
 8009aba:	bf00      	nop
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	041b      	lsls	r3, r3, #16
 8009ad8:	43db      	mvns	r3, r3
 8009ada:	401a      	ands	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	605a      	str	r2, [r3, #4]
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685a      	ldr	r2, [r3, #4]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	041b      	lsls	r3, r3, #16
 8009afe:	431a      	orrs	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	605a      	str	r2, [r3, #4]
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	43db      	mvns	r3, r3
 8009b22:	401a      	ands	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	605a      	str	r2, [r3, #4]
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	609a      	str	r2, [r3, #8]
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <LL_C1_IPCC_SetFlag_CHx>:
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	041a      	lsls	r2, r3, #16
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	609a      	str	r2, [r3, #8]
}
 8009b62:	bf00      	nop
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b083      	sub	sp, #12
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	68da      	ldr	r2, [r3, #12]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	4013      	ands	r3, r2
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d101      	bne.n	8009b8a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009b86:	2301      	movs	r3, #1
 8009b88:	e000      	b.n	8009b8c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	69da      	ldr	r2, [r3, #28]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	4013      	ands	r3, r2
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d101      	bne.n	8009bb4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e000      	b.n	8009bb6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
	...

08009bc4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009bc8:	2102      	movs	r1, #2
 8009bca:	4818      	ldr	r0, [pc, #96]	@ (8009c2c <HW_IPCC_Rx_Handler+0x68>)
 8009bcc:	f7ff ffe4 	bl	8009b98 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d008      	beq.n	8009be8 <HW_IPCC_Rx_Handler+0x24>
 8009bd6:	4b15      	ldr	r3, [pc, #84]	@ (8009c2c <HW_IPCC_Rx_Handler+0x68>)
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f003 0302 	and.w	r3, r3, #2
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d102      	bne.n	8009be8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8009be2:	f000 f8f1 	bl	8009dc8 <HW_IPCC_SYS_EvtHandler>
 8009be6:	e01e      	b.n	8009c26 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009be8:	2101      	movs	r1, #1
 8009bea:	4810      	ldr	r0, [pc, #64]	@ (8009c2c <HW_IPCC_Rx_Handler+0x68>)
 8009bec:	f7ff ffd4 	bl	8009b98 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d008      	beq.n	8009c08 <HW_IPCC_Rx_Handler+0x44>
 8009bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009c2c <HW_IPCC_Rx_Handler+0x68>)
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d102      	bne.n	8009c08 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8009c02:	f000 f8a5 	bl	8009d50 <HW_IPCC_BLE_EvtHandler>
 8009c06:	e00e      	b.n	8009c26 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009c08:	2108      	movs	r1, #8
 8009c0a:	4808      	ldr	r0, [pc, #32]	@ (8009c2c <HW_IPCC_Rx_Handler+0x68>)
 8009c0c:	f7ff ffc4 	bl	8009b98 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d008      	beq.n	8009c28 <HW_IPCC_Rx_Handler+0x64>
 8009c16:	4b05      	ldr	r3, [pc, #20]	@ (8009c2c <HW_IPCC_Rx_Handler+0x68>)
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f003 0308 	and.w	r3, r3, #8
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d102      	bne.n	8009c28 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009c22:	f000 f919 	bl	8009e58 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009c26:	bf00      	nop
 8009c28:	bf00      	nop
}
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	58000c00 	.word	0x58000c00

08009c30 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009c34:	2102      	movs	r1, #2
 8009c36:	4818      	ldr	r0, [pc, #96]	@ (8009c98 <HW_IPCC_Tx_Handler+0x68>)
 8009c38:	f7ff ff99 	bl	8009b6e <LL_C1_IPCC_IsActiveFlag_CHx>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d108      	bne.n	8009c54 <HW_IPCC_Tx_Handler+0x24>
 8009c42:	4b15      	ldr	r3, [pc, #84]	@ (8009c98 <HW_IPCC_Tx_Handler+0x68>)
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d102      	bne.n	8009c54 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009c4e:	f000 f8af 	bl	8009db0 <HW_IPCC_SYS_CmdEvtHandler>
 8009c52:	e01e      	b.n	8009c92 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009c54:	2108      	movs	r1, #8
 8009c56:	4810      	ldr	r0, [pc, #64]	@ (8009c98 <HW_IPCC_Tx_Handler+0x68>)
 8009c58:	f7ff ff89 	bl	8009b6e <LL_C1_IPCC_IsActiveFlag_CHx>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d108      	bne.n	8009c74 <HW_IPCC_Tx_Handler+0x44>
 8009c62:	4b0d      	ldr	r3, [pc, #52]	@ (8009c98 <HW_IPCC_Tx_Handler+0x68>)
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d102      	bne.n	8009c74 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009c6e:	f000 f8d7 	bl	8009e20 <HW_IPCC_MM_FreeBufHandler>
 8009c72:	e00e      	b.n	8009c92 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009c74:	2120      	movs	r1, #32
 8009c76:	4808      	ldr	r0, [pc, #32]	@ (8009c98 <HW_IPCC_Tx_Handler+0x68>)
 8009c78:	f7ff ff79 	bl	8009b6e <LL_C1_IPCC_IsActiveFlag_CHx>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d108      	bne.n	8009c94 <HW_IPCC_Tx_Handler+0x64>
 8009c82:	4b05      	ldr	r3, [pc, #20]	@ (8009c98 <HW_IPCC_Tx_Handler+0x68>)
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009c8e:	f000 f86b 	bl	8009d68 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
}
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	58000c00 	.word	0x58000c00

08009c9c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009ca0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009ca4:	f7ff fed3 	bl	8009a4e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009ca8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009cac:	f7ff fea4 	bl	80099f8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009cb0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009cb4:	f7ff fe8c 	bl	80099d0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009cb8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009cba:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009cbc:	f7ff fe78 	bl	80099b0 <LL_PWR_EnableBootC2>

  return;
 8009cc0:	bf00      	nop
}
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009cc8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009ccc:	f7ff fea6 	bl	8009a1c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009cd0:	4806      	ldr	r0, [pc, #24]	@ (8009cec <HW_IPCC_Init+0x28>)
 8009cd2:	f7ff fee8 	bl	8009aa6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009cd6:	4805      	ldr	r0, [pc, #20]	@ (8009cec <HW_IPCC_Init+0x28>)
 8009cd8:	f7ff fed5 	bl	8009a86 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009cdc:	202c      	movs	r0, #44	@ 0x2c
 8009cde:	f7f9 ffe0 	bl	8003ca2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009ce2:	202d      	movs	r0, #45	@ 0x2d
 8009ce4:	f7f9 ffdd 	bl	8003ca2 <HAL_NVIC_EnableIRQ>

  return;
 8009ce8:	bf00      	nop
}
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	58000c00 	.word	0x58000c00

08009cf0 <IPCC_Wakeup_CPU2>:

#if(CFG_LPM_STANDBY_SUPPORTED != 0)
static void IPCC_Wakeup_CPU2(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009cf4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009cf8:	f7ff fe7e 	bl	80099f8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009cfc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009d00:	f7ff fe66 	bl	80099d0 <LL_C2_EXTI_EnableEvent_32_63>

  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009d04:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009d06:	bf20      	wfe

  return;
 8009d08:	bf00      	nop
}
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <HW_IPCC_SetFlagCHx>:

static void HW_IPCC_SetFlagCHx(uint32_t Channel)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  IPCC_Wakeup_CPU2();
 8009d14:	f7ff ffec 	bl	8009cf0 <IPCC_Wakeup_CPU2>
  LL_C1_IPCC_SetFlag_CHx(IPCC, Channel);
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4803      	ldr	r0, [pc, #12]	@ (8009d28 <HW_IPCC_SetFlagCHx+0x1c>)
 8009d1c:	f7ff ff18 	bl	8009b50 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009d20:	bf00      	nop
}
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	58000c00 	.word	0x58000c00

08009d2c <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009d30:	2101      	movs	r1, #1
 8009d32:	4802      	ldr	r0, [pc, #8]	@ (8009d3c <HW_IPCC_BLE_Init+0x10>)
 8009d34:	f7ff feec 	bl	8009b10 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009d38:	bf00      	nop
}
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	58000c00 	.word	0x58000c00

08009d40 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8009d44:	2001      	movs	r0, #1
 8009d46:	f7ff ffe1 	bl	8009d0c <HW_IPCC_SetFlagCHx>

  return;
 8009d4a:	bf00      	nop
}
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009d54:	f7fe fd96 	bl	8008884 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009d58:	2101      	movs	r1, #1
 8009d5a:	4802      	ldr	r0, [pc, #8]	@ (8009d64 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009d5c:	f7ff feea 	bl	8009b34 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009d60:	bf00      	nop
}
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	58000c00 	.word	0x58000c00

08009d68 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009d6c:	2120      	movs	r1, #32
 8009d6e:	4803      	ldr	r0, [pc, #12]	@ (8009d7c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009d70:	f7ff febc 	bl	8009aec <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009d74:	f7fe fdb6 	bl	80088e4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009d78:	bf00      	nop
}
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	58000c00 	.word	0x58000c00

08009d80 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009d84:	2102      	movs	r1, #2
 8009d86:	4802      	ldr	r0, [pc, #8]	@ (8009d90 <HW_IPCC_SYS_Init+0x10>)
 8009d88:	f7ff fec2 	bl	8009b10 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009d8c:	bf00      	nop
}
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	58000c00 	.word	0x58000c00

08009d94 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009d98:	2002      	movs	r0, #2
 8009d9a:	f7ff ffb7 	bl	8009d0c <HW_IPCC_SetFlagCHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009d9e:	2102      	movs	r1, #2
 8009da0:	4802      	ldr	r0, [pc, #8]	@ (8009dac <HW_IPCC_SYS_SendCmd+0x18>)
 8009da2:	f7ff fe90 	bl	8009ac6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009da6:	bf00      	nop
}
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	58000c00 	.word	0x58000c00

08009db0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009db4:	2102      	movs	r1, #2
 8009db6:	4803      	ldr	r0, [pc, #12]	@ (8009dc4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009db8:	f7ff fe98 	bl	8009aec <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009dbc:	f7fe fde2 	bl	8008984 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009dc0:	bf00      	nop
}
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	58000c00 	.word	0x58000c00

08009dc8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009dcc:	f7fe fdf0 	bl	80089b0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009dd0:	2102      	movs	r1, #2
 8009dd2:	4802      	ldr	r0, [pc, #8]	@ (8009ddc <HW_IPCC_SYS_EvtHandler+0x14>)
 8009dd4:	f7ff feae 	bl	8009b34 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009dd8:	bf00      	nop
}
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	58000c00 	.word	0x58000c00

08009de0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009de8:	2108      	movs	r1, #8
 8009dea:	480b      	ldr	r0, [pc, #44]	@ (8009e18 <HW_IPCC_MM_SendFreeBuf+0x38>)
 8009dec:	f7ff febf 	bl	8009b6e <LL_C1_IPCC_IsActiveFlag_CHx>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d007      	beq.n	8009e06 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009df6:	4a09      	ldr	r2, [pc, #36]	@ (8009e1c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009dfc:	2108      	movs	r1, #8
 8009dfe:	4806      	ldr	r0, [pc, #24]	@ (8009e18 <HW_IPCC_MM_SendFreeBuf+0x38>)
 8009e00:	f7ff fe61 	bl	8009ac6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009e04:	e005      	b.n	8009e12 <HW_IPCC_MM_SendFreeBuf+0x32>
    cb();
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009e0a:	2008      	movs	r0, #8
 8009e0c:	f7ff ff7e 	bl	8009d0c <HW_IPCC_SetFlagCHx>
  return;
 8009e10:	bf00      	nop
}
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	58000c00 	.word	0x58000c00
 8009e1c:	200006ec 	.word	0x200006ec

08009e20 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009e24:	2108      	movs	r1, #8
 8009e26:	4805      	ldr	r0, [pc, #20]	@ (8009e3c <HW_IPCC_MM_FreeBufHandler+0x1c>)
 8009e28:	f7ff fe60 	bl	8009aec <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009e2c:	4b04      	ldr	r3, [pc, #16]	@ (8009e40 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009e32:	2008      	movs	r0, #8
 8009e34:	f7ff ff6a 	bl	8009d0c <HW_IPCC_SetFlagCHx>

  return;
 8009e38:	bf00      	nop
}
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	58000c00 	.word	0x58000c00
 8009e40:	200006ec 	.word	0x200006ec

08009e44 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009e48:	2108      	movs	r1, #8
 8009e4a:	4802      	ldr	r0, [pc, #8]	@ (8009e54 <HW_IPCC_TRACES_Init+0x10>)
 8009e4c:	f7ff fe60 	bl	8009b10 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009e50:	bf00      	nop
}
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	58000c00 	.word	0x58000c00

08009e58 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009e5c:	f7fe fe50 	bl	8008b00 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009e60:	2108      	movs	r1, #8
 8009e62:	4802      	ldr	r0, [pc, #8]	@ (8009e6c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009e64:	f7ff fe66 	bl	8009b34 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009e68:	bf00      	nop
}
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	58000c00 	.word	0x58000c00

08009e70 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009e70:	b480      	push	{r7}
 8009e72:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009e74:	4b05      	ldr	r3, [pc, #20]	@ (8009e8c <UTIL_LPM_Init+0x1c>)
 8009e76:	2200      	movs	r2, #0
 8009e78:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009e7a:	4b05      	ldr	r3, [pc, #20]	@ (8009e90 <UTIL_LPM_Init+0x20>)
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009e80:	bf00      	nop
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	200006f0 	.word	0x200006f0
 8009e90:	200006f4 	.word	0x200006f4

08009e94 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ea4:	613b      	str	r3, [r7, #16]
  return(result);
 8009ea6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009ea8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009eaa:	b672      	cpsid	i
}
 8009eac:	bf00      	nop
  
  switch(state)
 8009eae:	78fb      	ldrb	r3, [r7, #3]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d008      	beq.n	8009ec6 <UTIL_LPM_SetOffMode+0x32>
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d10e      	bne.n	8009ed6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef0 <UTIL_LPM_SetOffMode+0x5c>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8009ef0 <UTIL_LPM_SetOffMode+0x5c>)
 8009ec2:	6013      	str	r3, [r2, #0]
      break;
 8009ec4:	e008      	b.n	8009ed8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	43da      	mvns	r2, r3
 8009eca:	4b09      	ldr	r3, [pc, #36]	@ (8009ef0 <UTIL_LPM_SetOffMode+0x5c>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4013      	ands	r3, r2
 8009ed0:	4a07      	ldr	r2, [pc, #28]	@ (8009ef0 <UTIL_LPM_SetOffMode+0x5c>)
 8009ed2:	6013      	str	r3, [r2, #0]
      break;
 8009ed4:	e000      	b.n	8009ed8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009ed6:	bf00      	nop
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f383 8810 	msr	PRIMASK, r3
}
 8009ee2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009ee4:	bf00      	nop
 8009ee6:	371c      	adds	r7, #28
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	200006f4 	.word	0x200006f4

08009ef4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009efa:	f3ef 8310 	mrs	r3, PRIMASK
 8009efe:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f00:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8009f02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f04:	b672      	cpsid	i
}
 8009f06:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8009f08:	4b12      	ldr	r3, [pc, #72]	@ (8009f54 <UTIL_LPM_EnterLowPower+0x60>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d006      	beq.n	8009f1e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8009f10:	4b11      	ldr	r3, [pc, #68]	@ (8009f58 <UTIL_LPM_EnterLowPower+0x64>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8009f16:	4b10      	ldr	r3, [pc, #64]	@ (8009f58 <UTIL_LPM_EnterLowPower+0x64>)
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	4798      	blx	r3
 8009f1c:	e010      	b.n	8009f40 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8009f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8009f5c <UTIL_LPM_EnterLowPower+0x68>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d006      	beq.n	8009f34 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8009f26:	4b0c      	ldr	r3, [pc, #48]	@ (8009f58 <UTIL_LPM_EnterLowPower+0x64>)
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8009f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f58 <UTIL_LPM_EnterLowPower+0x64>)
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	4798      	blx	r3
 8009f32:	e005      	b.n	8009f40 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8009f34:	4b08      	ldr	r3, [pc, #32]	@ (8009f58 <UTIL_LPM_EnterLowPower+0x64>)
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8009f3a:	4b07      	ldr	r3, [pc, #28]	@ (8009f58 <UTIL_LPM_EnterLowPower+0x64>)
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	4798      	blx	r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f383 8810 	msr	PRIMASK, r3
}
 8009f4a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8009f4c:	bf00      	nop
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	200006f0 	.word	0x200006f0
 8009f58:	0800a614 	.word	0x0800a614
 8009f5c:	200006f4 	.word	0x200006f4

08009f60 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b090      	sub	sp, #64	@ 0x40
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009f68:	4b73      	ldr	r3, [pc, #460]	@ (800a138 <UTIL_SEQ_Run+0x1d8>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8009f6e:	4b72      	ldr	r3, [pc, #456]	@ (800a138 <UTIL_SEQ_Run+0x1d8>)
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4013      	ands	r3, r2
 8009f76:	4a70      	ldr	r2, [pc, #448]	@ (800a138 <UTIL_SEQ_Run+0x1d8>)
 8009f78:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009f7a:	4b70      	ldr	r3, [pc, #448]	@ (800a13c <UTIL_SEQ_Run+0x1dc>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8009f80:	4b6f      	ldr	r3, [pc, #444]	@ (800a140 <UTIL_SEQ_Run+0x1e0>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8009f86:	4b6f      	ldr	r3, [pc, #444]	@ (800a144 <UTIL_SEQ_Run+0x1e4>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8009f8c:	4b6e      	ldr	r3, [pc, #440]	@ (800a148 <UTIL_SEQ_Run+0x1e8>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009f92:	e08d      	b.n	800a0b0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009f94:	2300      	movs	r3, #0
 8009f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009f98:	e002      	b.n	8009fa0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800a14c <UTIL_SEQ_Run+0x1ec>)
 8009fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009faa:	401a      	ands	r2, r3
 8009fac:	4b62      	ldr	r3, [pc, #392]	@ (800a138 <UTIL_SEQ_Run+0x1d8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0f1      	beq.n	8009f9a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009fb6:	4a65      	ldr	r2, [pc, #404]	@ (800a14c <UTIL_SEQ_Run+0x1ec>)
 8009fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc0:	401a      	ands	r2, r3
 8009fc2:	4b5d      	ldr	r3, [pc, #372]	@ (800a138 <UTIL_SEQ_Run+0x1d8>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009fca:	4a60      	ldr	r2, [pc, #384]	@ (800a14c <UTIL_SEQ_Run+0x1ec>)
 8009fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fce:	00db      	lsls	r3, r3, #3
 8009fd0:	4413      	add	r3, r2
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d106      	bne.n	8009fea <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009fdc:	4a5b      	ldr	r2, [pc, #364]	@ (800a14c <UTIL_SEQ_Run+0x1ec>)
 8009fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fe0:	00db      	lsls	r3, r3, #3
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009fea:	4a58      	ldr	r2, [pc, #352]	@ (800a14c <UTIL_SEQ_Run+0x1ec>)
 8009fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	4413      	add	r3, r2
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 f9b3 	bl	800a364 <SEQ_BitPosition>
 8009ffe:	4603      	mov	r3, r0
 800a000:	461a      	mov	r2, r3
 800a002:	4b53      	ldr	r3, [pc, #332]	@ (800a150 <UTIL_SEQ_Run+0x1f0>)
 800a004:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a006:	4a51      	ldr	r2, [pc, #324]	@ (800a14c <UTIL_SEQ_Run+0x1ec>)
 800a008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	4413      	add	r3, r2
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	4b4f      	ldr	r3, [pc, #316]	@ (800a150 <UTIL_SEQ_Run+0x1f0>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2101      	movs	r1, #1
 800a016:	fa01 f303 	lsl.w	r3, r1, r3
 800a01a:	43db      	mvns	r3, r3
 800a01c:	401a      	ands	r2, r3
 800a01e:	494b      	ldr	r1, [pc, #300]	@ (800a14c <UTIL_SEQ_Run+0x1ec>)
 800a020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a022:	00db      	lsls	r3, r3, #3
 800a024:	440b      	add	r3, r1
 800a026:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a028:	f3ef 8310 	mrs	r3, PRIMASK
 800a02c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a02e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a030:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a032:	b672      	cpsid	i
}
 800a034:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a036:	4b46      	ldr	r3, [pc, #280]	@ (800a150 <UTIL_SEQ_Run+0x1f0>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2201      	movs	r2, #1
 800a03c:	fa02 f303 	lsl.w	r3, r2, r3
 800a040:	43da      	mvns	r2, r3
 800a042:	4b3e      	ldr	r3, [pc, #248]	@ (800a13c <UTIL_SEQ_Run+0x1dc>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4013      	ands	r3, r2
 800a048:	4a3c      	ldr	r2, [pc, #240]	@ (800a13c <UTIL_SEQ_Run+0x1dc>)
 800a04a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a04c:	2302      	movs	r3, #2
 800a04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a050:	e013      	b.n	800a07a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a054:	3b01      	subs	r3, #1
 800a056:	4a3d      	ldr	r2, [pc, #244]	@ (800a14c <UTIL_SEQ_Run+0x1ec>)
 800a058:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a05c:	4b3c      	ldr	r3, [pc, #240]	@ (800a150 <UTIL_SEQ_Run+0x1f0>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2201      	movs	r2, #1
 800a062:	fa02 f303 	lsl.w	r3, r2, r3
 800a066:	43da      	mvns	r2, r3
 800a068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a06a:	3b01      	subs	r3, #1
 800a06c:	400a      	ands	r2, r1
 800a06e:	4937      	ldr	r1, [pc, #220]	@ (800a14c <UTIL_SEQ_Run+0x1ec>)
 800a070:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a076:	3b01      	subs	r3, #1
 800a078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1e8      	bne.n	800a052 <UTIL_SEQ_Run+0xf2>
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	f383 8810 	msr	PRIMASK, r3
}
 800a08a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a08c:	4b30      	ldr	r3, [pc, #192]	@ (800a150 <UTIL_SEQ_Run+0x1f0>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a30      	ldr	r2, [pc, #192]	@ (800a154 <UTIL_SEQ_Run+0x1f4>)
 800a092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a096:	4798      	blx	r3

    local_taskset = TaskSet;
 800a098:	4b28      	ldr	r3, [pc, #160]	@ (800a13c <UTIL_SEQ_Run+0x1dc>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800a09e:	4b28      	ldr	r3, [pc, #160]	@ (800a140 <UTIL_SEQ_Run+0x1e0>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800a0a4:	4b27      	ldr	r3, [pc, #156]	@ (800a144 <UTIL_SEQ_Run+0x1e4>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800a0aa:	4b27      	ldr	r3, [pc, #156]	@ (800a148 <UTIL_SEQ_Run+0x1e8>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a0b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b4:	401a      	ands	r2, r3
 800a0b6:	4b20      	ldr	r3, [pc, #128]	@ (800a138 <UTIL_SEQ_Run+0x1d8>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d005      	beq.n	800a0cc <UTIL_SEQ_Run+0x16c>
 800a0c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f43f af64 	beq.w	8009f94 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a0cc:	4b20      	ldr	r3, [pc, #128]	@ (800a150 <UTIL_SEQ_Run+0x1f0>)
 800a0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a0d4:	f000 f938 	bl	800a348 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a0dc:	613b      	str	r3, [r7, #16]
  return(result);
 800a0de:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a0e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0e2:	b672      	cpsid	i
}
 800a0e4:	bf00      	nop
  local_taskset = TaskSet;
 800a0e6:	4b15      	ldr	r3, [pc, #84]	@ (800a13c <UTIL_SEQ_Run+0x1dc>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800a0ec:	4b14      	ldr	r3, [pc, #80]	@ (800a140 <UTIL_SEQ_Run+0x1e0>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800a0f2:	4b14      	ldr	r3, [pc, #80]	@ (800a144 <UTIL_SEQ_Run+0x1e4>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a0f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fc:	401a      	ands	r2, r3
 800a0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a138 <UTIL_SEQ_Run+0x1d8>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4013      	ands	r3, r2
 800a104:	2b00      	cmp	r3, #0
 800a106:	d107      	bne.n	800a118 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a108:	4b0f      	ldr	r3, [pc, #60]	@ (800a148 <UTIL_SEQ_Run+0x1e8>)
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a10e:	4013      	ands	r3, r2
 800a110:	2b00      	cmp	r3, #0
 800a112:	d101      	bne.n	800a118 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a114:	f7f6 fcbb 	bl	8000a8e <UTIL_SEQ_Idle>
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f383 8810 	msr	PRIMASK, r3
}
 800a122:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a124:	f000 f917 	bl	800a356 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a128:	4a03      	ldr	r2, [pc, #12]	@ (800a138 <UTIL_SEQ_Run+0x1d8>)
 800a12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a12c:	6013      	str	r3, [r2, #0]

  return;
 800a12e:	bf00      	nop
}
 800a130:	3740      	adds	r7, #64	@ 0x40
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20000034 	.word	0x20000034
 800a13c:	200006f8 	.word	0x200006f8
 800a140:	200006fc 	.word	0x200006fc
 800a144:	20000030 	.word	0x20000030
 800a148:	20000700 	.word	0x20000700
 800a14c:	20000788 	.word	0x20000788
 800a150:	20000704 	.word	0x20000704
 800a154:	20000708 	.word	0x20000708

0800a158 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a164:	f3ef 8310 	mrs	r3, PRIMASK
 800a168:	617b      	str	r3, [r7, #20]
  return(result);
 800a16a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a16c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a16e:	b672      	cpsid	i
}
 800a170:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f000 f8f6 	bl	800a364 <SEQ_BitPosition>
 800a178:	4603      	mov	r3, r0
 800a17a:	4619      	mov	r1, r3
 800a17c:	4a06      	ldr	r2, [pc, #24]	@ (800a198 <UTIL_SEQ_RegTask+0x40>)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	f383 8810 	msr	PRIMASK, r3
}
 800a18e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a190:	bf00      	nop
}
 800a192:	3720      	adds	r7, #32
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	20000708 	.word	0x20000708

0800a19c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a19c:	b480      	push	{r7}
 800a19e:	b087      	sub	sp, #28
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a1aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a1ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1b0:	b672      	cpsid	i
}
 800a1b2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a1b4:	4b0d      	ldr	r3, [pc, #52]	@ (800a1ec <UTIL_SEQ_SetTask+0x50>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	4a0b      	ldr	r2, [pc, #44]	@ (800a1ec <UTIL_SEQ_SetTask+0x50>)
 800a1be:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a1c0:	4a0b      	ldr	r2, [pc, #44]	@ (800a1f0 <UTIL_SEQ_SetTask+0x54>)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	431a      	orrs	r2, r3
 800a1cc:	4908      	ldr	r1, [pc, #32]	@ (800a1f0 <UTIL_SEQ_SetTask+0x54>)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	f383 8810 	msr	PRIMASK, r3
}
 800a1de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a1e0:	bf00      	nop
}
 800a1e2:	371c      	adds	r7, #28
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	200006f8 	.word	0x200006f8
 800a1f0:	20000788 	.word	0x20000788

0800a1f4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1fc:	f3ef 8310 	mrs	r3, PRIMASK
 800a200:	60fb      	str	r3, [r7, #12]
  return(result);
 800a202:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a204:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a206:	b672      	cpsid	i
}
 800a208:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	43da      	mvns	r2, r3
 800a20e:	4b08      	ldr	r3, [pc, #32]	@ (800a230 <UTIL_SEQ_PauseTask+0x3c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4013      	ands	r3, r2
 800a214:	4a06      	ldr	r2, [pc, #24]	@ (800a230 <UTIL_SEQ_PauseTask+0x3c>)
 800a216:	6013      	str	r3, [r2, #0]
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f383 8810 	msr	PRIMASK, r3
}
 800a222:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a224:	bf00      	nop
}
 800a226:	371c      	adds	r7, #28
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	20000030 	.word	0x20000030

0800a234 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a234:	b480      	push	{r7}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a23c:	f3ef 8310 	mrs	r3, PRIMASK
 800a240:	60fb      	str	r3, [r7, #12]
  return(result);
 800a242:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a244:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a246:	b672      	cpsid	i
}
 800a248:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a24a:	4b09      	ldr	r3, [pc, #36]	@ (800a270 <UTIL_SEQ_ResumeTask+0x3c>)
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4313      	orrs	r3, r2
 800a252:	4a07      	ldr	r2, [pc, #28]	@ (800a270 <UTIL_SEQ_ResumeTask+0x3c>)
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	f383 8810 	msr	PRIMASK, r3
}
 800a260:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a262:	bf00      	nop
}
 800a264:	371c      	adds	r7, #28
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	20000030 	.word	0x20000030

0800a274 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a27c:	f3ef 8310 	mrs	r3, PRIMASK
 800a280:	60fb      	str	r3, [r7, #12]
  return(result);
 800a282:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a284:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a286:	b672      	cpsid	i
}
 800a288:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a28a:	4b09      	ldr	r3, [pc, #36]	@ (800a2b0 <UTIL_SEQ_SetEvt+0x3c>)
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4313      	orrs	r3, r2
 800a292:	4a07      	ldr	r2, [pc, #28]	@ (800a2b0 <UTIL_SEQ_SetEvt+0x3c>)
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f383 8810 	msr	PRIMASK, r3
}
 800a2a0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a2a2:	bf00      	nop
}
 800a2a4:	371c      	adds	r7, #28
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	200006fc 	.word	0x200006fc

0800a2b4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b088      	sub	sp, #32
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a2bc:	4b1f      	ldr	r3, [pc, #124]	@ (800a33c <UTIL_SEQ_WaitEvt+0x88>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a2c2:	4b1e      	ldr	r3, [pc, #120]	@ (800a33c <UTIL_SEQ_WaitEvt+0x88>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ca:	d102      	bne.n	800a2d2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	61fb      	str	r3, [r7, #28]
 800a2d0:	e005      	b.n	800a2de <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a2d2:	4b1a      	ldr	r3, [pc, #104]	@ (800a33c <UTIL_SEQ_WaitEvt+0x88>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2dc:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a2de:	4b18      	ldr	r3, [pc, #96]	@ (800a340 <UTIL_SEQ_WaitEvt+0x8c>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a2e4:	4a16      	ldr	r2, [pc, #88]	@ (800a340 <UTIL_SEQ_WaitEvt+0x8c>)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a2ea:	e003      	b.n	800a2f4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a2ec:	6879      	ldr	r1, [r7, #4]
 800a2ee:	69f8      	ldr	r0, [r7, #28]
 800a2f0:	f7f6 fbd3 	bl	8000a9a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a2f4:	4b13      	ldr	r3, [pc, #76]	@ (800a344 <UTIL_SEQ_WaitEvt+0x90>)
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d0f5      	beq.n	800a2ec <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a300:	4a0e      	ldr	r2, [pc, #56]	@ (800a33c <UTIL_SEQ_WaitEvt+0x88>)
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a306:	f3ef 8310 	mrs	r3, PRIMASK
 800a30a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a30c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a30e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a310:	b672      	cpsid	i
}
 800a312:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	43da      	mvns	r2, r3
 800a318:	4b0a      	ldr	r3, [pc, #40]	@ (800a344 <UTIL_SEQ_WaitEvt+0x90>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4013      	ands	r3, r2
 800a31e:	4a09      	ldr	r2, [pc, #36]	@ (800a344 <UTIL_SEQ_WaitEvt+0x90>)
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f383 8810 	msr	PRIMASK, r3
}
 800a32c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a32e:	4a04      	ldr	r2, [pc, #16]	@ (800a340 <UTIL_SEQ_WaitEvt+0x8c>)
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	6013      	str	r3, [r2, #0]
  return;
 800a334:	bf00      	nop
}
 800a336:	3720      	adds	r7, #32
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	20000704 	.word	0x20000704
 800a340:	20000700 	.word	0x20000700
 800a344:	200006fc 	.word	0x200006fc

0800a348 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a348:	b480      	push	{r7}
 800a34a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a34c:	bf00      	nop
}
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a356:	b480      	push	{r7}
 800a358:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a35a:	bf00      	nop
}
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a37a:	d204      	bcs.n	800a386 <SEQ_BitPosition+0x22>
 800a37c:	2310      	movs	r3, #16
 800a37e:	73fb      	strb	r3, [r7, #15]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	041b      	lsls	r3, r3, #16
 800a384:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a38c:	d205      	bcs.n	800a39a <SEQ_BitPosition+0x36>
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	3308      	adds	r3, #8
 800a392:	73fb      	strb	r3, [r7, #15]
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	021b      	lsls	r3, r3, #8
 800a398:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3a0:	d205      	bcs.n	800a3ae <SEQ_BitPosition+0x4a>
 800a3a2:	7bfb      	ldrb	r3, [r7, #15]
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	73fb      	strb	r3, [r7, #15]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	011b      	lsls	r3, r3, #4
 800a3ac:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	0f1b      	lsrs	r3, r3, #28
 800a3b2:	4a07      	ldr	r2, [pc, #28]	@ (800a3d0 <SEQ_BitPosition+0x6c>)
 800a3b4:	5cd2      	ldrb	r2, [r2, r3]
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	f1c3 031f 	rsb	r3, r3, #31
 800a3c2:	b2db      	uxtb	r3, r3
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	0800a6d4 	.word	0x0800a6d4

0800a3d4 <memset>:
 800a3d4:	4402      	add	r2, r0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d100      	bne.n	800a3de <memset+0xa>
 800a3dc:	4770      	bx	lr
 800a3de:	f803 1b01 	strb.w	r1, [r3], #1
 800a3e2:	e7f9      	b.n	800a3d8 <memset+0x4>

0800a3e4 <__libc_init_array>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	4d0d      	ldr	r5, [pc, #52]	@ (800a41c <__libc_init_array+0x38>)
 800a3e8:	4c0d      	ldr	r4, [pc, #52]	@ (800a420 <__libc_init_array+0x3c>)
 800a3ea:	1b64      	subs	r4, r4, r5
 800a3ec:	10a4      	asrs	r4, r4, #2
 800a3ee:	2600      	movs	r6, #0
 800a3f0:	42a6      	cmp	r6, r4
 800a3f2:	d109      	bne.n	800a408 <__libc_init_array+0x24>
 800a3f4:	4d0b      	ldr	r5, [pc, #44]	@ (800a424 <__libc_init_array+0x40>)
 800a3f6:	4c0c      	ldr	r4, [pc, #48]	@ (800a428 <__libc_init_array+0x44>)
 800a3f8:	f000 f826 	bl	800a448 <_init>
 800a3fc:	1b64      	subs	r4, r4, r5
 800a3fe:	10a4      	asrs	r4, r4, #2
 800a400:	2600      	movs	r6, #0
 800a402:	42a6      	cmp	r6, r4
 800a404:	d105      	bne.n	800a412 <__libc_init_array+0x2e>
 800a406:	bd70      	pop	{r4, r5, r6, pc}
 800a408:	f855 3b04 	ldr.w	r3, [r5], #4
 800a40c:	4798      	blx	r3
 800a40e:	3601      	adds	r6, #1
 800a410:	e7ee      	b.n	800a3f0 <__libc_init_array+0xc>
 800a412:	f855 3b04 	ldr.w	r3, [r5], #4
 800a416:	4798      	blx	r3
 800a418:	3601      	adds	r6, #1
 800a41a:	e7f2      	b.n	800a402 <__libc_init_array+0x1e>
 800a41c:	0800a6ec 	.word	0x0800a6ec
 800a420:	0800a6ec 	.word	0x0800a6ec
 800a424:	0800a6ec 	.word	0x0800a6ec
 800a428:	0800a6f0 	.word	0x0800a6f0

0800a42c <memcpy>:
 800a42c:	440a      	add	r2, r1
 800a42e:	4291      	cmp	r1, r2
 800a430:	f100 33ff 	add.w	r3, r0, #4294967295
 800a434:	d100      	bne.n	800a438 <memcpy+0xc>
 800a436:	4770      	bx	lr
 800a438:	b510      	push	{r4, lr}
 800a43a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a43e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a442:	4291      	cmp	r1, r2
 800a444:	d1f9      	bne.n	800a43a <memcpy+0xe>
 800a446:	bd10      	pop	{r4, pc}

0800a448 <_init>:
 800a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44a:	bf00      	nop
 800a44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44e:	bc08      	pop	{r3}
 800a450:	469e      	mov	lr, r3
 800a452:	4770      	bx	lr

0800a454 <_fini>:
 800a454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a456:	bf00      	nop
 800a458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45a:	bc08      	pop	{r3}
 800a45c:	469e      	mov	lr, r3
 800a45e:	4770      	bx	lr
